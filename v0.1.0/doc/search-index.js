var searchIndex = JSON.parse('{\
"net_ensembles":{"doc":"I am writing this libary for my scientific simulations","t":[13,13,2,2,2,2,13,2,4,4,2,2,13,11,11,11,11,0,0,0,0,11,11,11,0,0,11,0,0,11,11,11,0,11,11,11,11,12,12,17,17,17,17,13,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,13,4,8,13,11,11,10,10,10,11,10,10,11,11,10,11,10,10,11,11,10,10,10,11,11,11,11,10,10,10,10,11,11,11,11,11,10,10,11,11,11,10,10,11,11,11,11,11,12,12],"n":["EdgeDoesNotExist","EdgeExists","EmptyNode","ErEnsembleC","ErEnsembleM","GenericGraph","GenericIter","Graph","GraphErrors","IterWrapper","SwEnsemble","SwGraph","SwIter","borrow","borrow_mut","clone","clone_into","dot_constants","er_c","er_m","example_nodes","fmt","fmt","from","generic_graph","graph","into","sw","sw_graph","to_owned","to_str","to_string","traits","try_from","try_into","type_id","vzip","0","0","EXAMPLE_DOT_OPTIONS","NO_OVERLAP","SPLINES","TRANSPARENT_BG","AddedEdge","ErEnsembleC","ErStepC","GError","Nothing","RemovedEdge","at","at_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","from","from","graph","into","into","is_valid","mc_step","new","randomize","rng","set_target_connectivity","sort_adj","swap_rng","target_connectivity","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","undo_step","undo_step_quiet","valid_or_panic","valid_or_panic_msg","vzip","vzip","0","0","0","ErEnsembleM","ErStepM","at","at_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","get_m","graph","into","into","mc_step","new","randomize","rng","sort_adj","swap_rng","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","undo_step","undo_step_quiet","vzip","vzip","EmptyNode","borrow","borrow_mut","clone","clone_into","fmt","from","into","make_string","new_from_index","parse_str","to_owned","try_from","try_into","type_id","vzip","Bfs","Dfs","DfsWithIndex","GenericGraph","add_edge","at","at_mut","average_degree","bfs_index_depth","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_edges","clone","clone_into","connected_components","container","container_iter","degree","dfs","dfs_with_index","diameter","edge_count","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","is_connected","leaf_count","longest_shortest_path_from_index","new","next","next","next","parse_str","q_core","remove_edge","reset_edge","rewire_edge","sort_adj","to_dot","to_dot_with_labels_from_contained","to_dot_with_labels_from_container","to_owned","to_string","transitivity","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vertex_biconnected_components","vertex_count","vertex_load","vzip","vzip","vzip","vzip","Graph","NodeContainer","borrow","borrow_mut","clone","clone_into","contained","contained_mut","degree","fmt","fmt","from","get_adj_first","id","into","is_adjacent","neighbors","new","parse_str","sort_adj","to_owned","to_string","try_from","try_into","type_id","vzip","SwEnsemble","at","at_mut","borrow","borrow_mut","clone","clone_into","draw_edge","fmt","from","graph","into","new","r_prob","set_r_prob","sort_adj","to_owned","try_from","try_into","type_id","vzip","SwContainer","SwEdgeIterNeighbors","SwGraph","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","contained","contained_mut","count_root","degree","fmt","fmt","from","from","get_adj_first","id","into","into","into_iter","is_adjacent","len","neighbors","new","next","next_back","parse_str","reset_edge","rewire_edge","size_hint","sort_adj","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AdjContainer","Ensemble","EnsembleRng","GenericIter","IterWrapper","Node","SwIter","borrow","borrow_mut","contained","contained_mut","degree","from","get_adj_first","id","into","into_iter","is_adjacent","len","make_string","mc_step","mc_steps","mc_steps","neighbors","new","new_from_index","new_generic","new_sw","next","next_back","parse_str","parse_str","randomize","rng","simple_sample","simple_sample","simple_sample_vec","simple_sample_vec","size_hint","sort_adj","swap_rng","try_from","try_into","type_id","undo_step","undo_step_quiet","undo_steps","undo_steps","undo_steps_quiet","undo_steps_quiet","vzip","0","0"],"q":["net_ensembles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::IterWrapper","","net_ensembles::dot_constants","","","","net_ensembles::er_c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::er_c::ErStepC","","","net_ensembles::er_m","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::example_nodes","","","","","","","","","","","","","","","","net_ensembles::generic_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::graph","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::sw","","","","","","","","","","","","","","","","","","","","","net_ensembles::sw_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::traits::IterWrapper",""],"d":["ERROR 404: Edge not found ;)","somehow, the existing of the edge is a problem","","","","","contains generic slice iter","","Error messages","Wrapper for iterators","","","contains iter from sw implementation","","","","","constants for dot options","Erdős-Rényi ensemble with target connectivity","Erdős-Rényi with constant number of edges","Example nodes implementing trait <code>Node</code>","","","Returns the argument unchanged.","Generic implementation for Topology","Topology","Calls <code>U::from(self)</code>.","Small-world ensemble","Topology for SwEnsemble","","get error message as <code>&amp;str</code>, for printing etc.","","You should <code>use net_ensembles::traits::*</code>","","","","","","","Example options. You are free to use your own. Search for …","no overlapping nodes for <code>to_dot*</code><strong>Note:</strong> You can chain …","activate splines for for <code>to_dot*</code><strong>Note:</strong> You can chain …","use transparent background for <code>to_dot*</code><strong>Note:</strong> You can chain …","an edge was added","Implements Erdős-Rényi graph ensemble","Returned by Monte Carlo Steps","a GraphError occured and is wrapped here","nothing was changed","an edge was removed","access additional information at vertex","mutable access of additional information at index","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","returns reference to the underlying topology aka, the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>true</code> if <code>self</code> is not <code>GError</code> variant","Monte Carlo step","Initialize","Randomizes the edges according to Er probabilities","Access RNG","set new value for target connectivityNote","Sort adjecency lists","Swap random number generator","returns target connectivity","","","","","","","","","Undo a Monte Carlo step","Undo a Monte Carlo step","<code>panic!</code> if <code>self</code> is <code>GError</code> variant","<code>panic!(msg)</code> if <code>self</code> is <code>GError</code> variant ","","","","","","Implements Erdős-Rényi graph ensemble","Storing the information about which edges were deleted or …","access additional information at vertex","mutable access of additional information at index","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Return total number of edges","returns reference to the underlying topology aka, the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Monte Carlo step","Initialize","Randomizes self according to  model","Access RNG","Sort adjecency lists","Swap random number generator","","","","","","","","undo a monte carlo step, return result-stateif you want to …","undo a monte carlo step, <strong>panic</strong> on invalid result statefor …","","","Use this, if you do not need to store extra information","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Breadth first search Iterator with <strong>index</strong> and <strong>depth</strong> of …","Depth first search Iterator","Depth first search Iterator with <strong>index</strong> of corresponding …","Generic graph implementation","Adds edge between nodes <code>index1</code> and <code>index2</code>","For your calculations etc.","For your calculations etc.","calculates the average degree of the graph","returns <code>Iterator</code>","","","","","","","","","removes all edges from the graph","","","compute sizes of all <em>connected components</em>","get NodeContainer at index","get iterator over NodeContainer in order of the indices","returns number of vertices adjacent to vertex <code>index</code>","returns <code>Iterator</code>","returns <code>Iterator</code>","returns <code>None</code> <strong>if</strong> graph not connected <strong>or</strong> does not contain …","returns total number of edges in graph","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","resultcondition<code>None</code><strong>if</strong> graph does not contain any vertices…","Count number of leaves in the graph, i.e. vertices with …","calculate the size of the longest shortest path <strong>starting </strong>…","Create new graph with <code>size</code> nodes and no edges","","","","parse from str","definition","Removes edge between nodes <em>index1</em> and <em>index2</em>","Reset small-world edge to its root state","Rewire edges","Sort adjecency lists","Creates String which contains the topology of the network …","Example","Same as <code>to_dot_with_labels_from_contained</code> but with access …","","","Calculates transitivity of graph","","","","","","","","","","","","","calculate sizes of all binode connected components","returns number of vertices present in graph","Closely related (most of the time equal) to betweeness","","","","","Contains the topology and <strong>implements functions</strong> for …","Used for accessing neighbor information from graph","","","","","return reference to what the NodeContainer contains","return mut reference to what the NodeContainer contains","count number of neighbors, i.e. number of edges incident …","","","Returns the argument unchanged.","","returns id of container","Calls <code>U::from(self)</code>.","check if vertex with <code>other_id</code> is adjacent to self","returns iterator over indices of neighbors","Create new instance with id","parse from str","Sorting adjecency lists","","","","","","","Implements small-world graph ensemble","access additional information at","mutable access of additional information at index","","","","","draws random edge <code>(i0, i1)</code>edge rooted at <code>i0</code>uniform …","","Returns the argument unchanged.","returns reference to the underlying topology aka, the …","Calls <code>U::from(self)</code>.","Initialize","returns rewiring probability","set new value for rewiring probabilityNote","Sort adjecency lists","","","","","","Used for accessing neighbor information from graph","Iterator over indices stored in adjecency list","specific <code>GenericGraph</code> used for small-world ensemble","","","","","","","return reference to what the AdjContainer contains","return mut reference to what the AdjContainer contains","Count how many root edges are contained","count number of neighbors, i.e. number of edges incident …","","","Returns the argument unchanged.","Returns the argument unchanged.","returns <code>Some(first element from the adjecency List)</code> or <code>None</code>","returns id of container","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","check if vertex with <code>other_id</code> is adjacent to self","","returns iterator over indices of neighbors","Create new instance with id","","","parse from str","Reset small-world edge to its root state","Rewire edges","","Sorting adjecency lists","","","","","","","","","","","Defines methods all adjecency containers should have such …","Sampling an Ensemble","Access random number generator of Ensemble","contains generic slice iter","Wrapper for iterators","What every node should be able to do","contains iter from sw implementation","","","return reference to what the AdjContainer contains","return mut reference to what the AdjContainer contains","count number of neighbors, i.e. number of edges incident …","Returns the argument unchanged.","returns <code>Some(first element from the adjecency List)</code> or <code>None</code>","returns id of container","Calls <code>U::from(self)</code>.","","check if vertex with <code>other_id</code> is adjacent to self","","Override this, if you want to store the network","Monte Carlo step","Monte Carlo steps","Monte Carlo steps","returns iterator over indices of neighbors","Create new instance with id","how to construct a blank object","Create new <code>IterWrapper</code> from generic slice iterator","Create new <code>IterWrapper</code> from <code>SwEdgeIterNeighbors</code>","","","Override this, if you want to load the stored network","parse from str","Randomizes self according to  model","Access RNG","do the following <code>times</code> times:","do the following <code>times</code> times:","do the following <code>times</code> times:","do the following <code>times</code> times:","","Sorting adjecency lists","If you need to exchange the internal rng","","","","undo a monte carlo step, return result-stateif you want to …","undo a monte carlo step, <strong>panic</strong> on invalid result statefor …","Undo Monte Carlo steps","Undo Monte Carlo steps","Undo Monte Carlo steps","Undo Monte Carlo steps","","",""],"i":[1,1,0,0,0,0,33,0,0,0,0,0,33,1,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,1,1,1,0,1,1,1,1,37,38,0,0,0,0,12,0,0,12,12,12,10,10,12,10,12,10,12,10,12,10,12,10,12,10,10,12,10,12,10,10,10,10,10,10,10,10,12,10,12,10,12,10,12,10,10,10,12,12,12,10,39,40,41,0,0,19,19,20,19,20,19,19,19,20,19,20,19,19,19,20,19,19,19,19,19,19,19,19,20,19,20,19,20,19,19,19,20,19,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,0,24,24,24,24,24,26,30,29,24,26,30,29,24,24,24,24,24,24,24,24,24,24,24,24,24,24,26,30,29,24,26,30,29,24,26,30,29,24,24,24,24,26,30,29,24,24,24,24,24,24,24,24,24,24,24,24,26,30,29,24,26,30,29,24,26,30,29,24,24,24,24,26,30,29,24,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,36,31,36,31,31,31,31,31,31,31,31,31,36,31,31,31,36,31,36,31,36,31,31,36,36,31,35,35,36,31,31,31,36,31,36,31,36,31,36,31,0,0,0,33,0,0,33,33,33,23,23,23,33,23,23,33,33,23,33,8,42,42,42,23,23,8,33,33,33,33,8,23,42,43,42,42,42,42,33,23,43,33,33,33,42,42,42,42,42,42,33,37,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],0,0,0,0,[[1,2],3],[[1,2],3],[[]],0,0,[[]],0,0,[[]],[1,4],[[],5],0,[[],6],[[],6],[[],7],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[[10,[8,9]],11]],[[[10,[8,9]],11]],[[]],[[]],[[]],[[]],[12,12],[[[10,[[0,[13,8]],[0,[13,9]]]]],[[10,[[0,[13,8]],[0,[13,9]]]]]],[[]],[[]],[[12,2],3],[[[10,[[0,[14,8]],[0,[14,9]]]],2],3],[[]],[[]],[[[10,[8,9]]],15],[[]],[[]],[12,16],[10,12],[[17,18,9],[[10,[8,9]]]],[10],[10],[[[10,[8,9]],18]],[[[10,[8,9]]]],[10],[[[10,[8,9]]],18],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[10,12],12],[[10,12]],[12],[[12,4]],[[]],[[]],0,0,0,0,0,[[[19,[8,9]],11]],[[[19,[8,9]],11]],[[]],[[]],[[]],[[]],[[[19,[[0,[13,8]],[0,[13,9]]]]],[[19,[[0,[13,8]],[0,[13,9]]]]]],[[]],[[20,2],3],[[[19,[[0,[14,8]],[0,[14,9]]]],2],3],[[]],[[]],[[[19,[8,9]]],11],[[[19,[8,9]]],15],[[]],[[]],[19,20],[[17,11,9],[[19,[8,9]]]],[19],[19],[[[19,[8,9]]]],[19],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[19,20],20],[[19,20]],[[]],[[]],0,[[]],[[]],[21,21],[[]],[[21,2],3],[[]],[[]],[21,[[22,[5]]]],[17,21],[4,22],[[]],[[],6],[[],6],[[],7],[[]],0,0,0,0,[[[24,[8,[23,[8]]]],17,17],[[6,[1]]]],[[[24,[8,[23,[8]]]],11]],[[[24,[8,[23,[8]]]],11]],[[[24,[8,[23,[8]]]]],25],[[[24,[8,[23,[8]]]],17],[[26,[8,[23,[8]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[8,[23,[8]]]]]],[[[24,[[0,[13,8]],[0,[13,[23,[[0,[13,8]]]]]]]]],[[24,[[0,[13,8]],[0,[13,[23,[[0,[13,8]]]]]]]]]],[[]],[[[24,[8,[23,[8]]]]],[[27,[17]]]],[[[24,[8,[23,[8]]]],11]],[[[24,[8,[23,[8]]]]],[[28,[[23,[8]]]]]],[[[24,[8,[23,[8]]]],11],[[22,[11]]]],[[[24,[8,[23,[8]]]],17],[[29,[8,[23,[8]]]]]],[[[24,[8,[23,[8]]]],17],[[30,[8,[23,[8]]]]]],[[[24,[8,[23,[8]]]]],[[22,[17]]]],[[[24,[8,[23,[8]]]]],17],[[[24,[[0,[14,8]],[0,[14,[23,[[0,[14,8]]]]]]]],2],3],[[[24,[8,[23,[8]]]],2],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[8,[23,[8]]]]],[[22,[16]]]],[[[24,[8,[23,[8]]]]],11],[[[24,[8,[23,[8]]]],17],[[22,[17]]]],[17,[[24,[8,[23,[8]]]]]],[26,22],[30,22],[29,22],[4,22],[[[24,[8,[23,[8]]]],17],[[22,[17]]]],[[[24,[8,[23,[8]]]],17,17],[[6,[1]]]],0,0,[[[24,[8,[23,[8]]]]]],[[[24,[8,[23,[8]]]]],5],[[[24,[8,[23,[8]]]],4],5],[[[24,[8,[23,[8]]]],4],5],[[]],[[],5],[[[24,[8,[23,[8]]]]],18],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[[24,[8,[23,[8]]]],16],[[27,[11]]]],[[[24,[8,[23,[8]]]]],17],[[[24,[8,[23,[8]]]],16],[[27,[18]]]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[[32,[[0,[13,8]]]]],[[32,[[0,[13,8]]]]]],[[]],[[[32,[8]]]],[[[32,[8]]]],[[[32,[8]]],11],[[[32,[[0,[14,8]]]],2],3],[[[32,[8]],2],3],[[]],[[[32,[8]]],[[22,[17]]]],[[[32,[8]]],17],[[]],[[[32,[8]],17],16],[[[32,[8]]],33],[[17,8],[[32,[8]]]],[4,22],[[[32,[8]]]],[[]],[[],5],[[],6],[[],6],[[],7],[[]],0,[[34,11]],[[34,11]],[[]],[[]],[[[34,[[0,[13,8]],[0,[13,9]]]]],[[34,[[0,[13,8]],[0,[13,9]]]]]],[[]],[34],[[[34,[[0,[14,8]],[0,[14,9]]]],2],3],[[]],[34,35],[[]],[[17,18],34],[34,18],[[34,18]],[34],[[]],[[],6],[[],6],[[],7],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[31,[[0,[13,8]]]]],[[31,[[0,[13,8]]]]]],[[]],[[[31,[8]]]],[[[31,[8]]]],[[[31,[8]]],11],[[[31,[8]]],11],[[[31,[[0,[14,8]]]],2],3],[[[31,[8]],2],3],[[]],[[]],[[[31,[8]]],[[22,[17]]]],[[[31,[8]]],17],[[]],[[]],[[]],[[[31,[8]],17],16],[36,11],[[[31,[8]]],33],[[17,8],[[31,[8]]]],[36,22],[36,22],[4,22],0,0,[36],[[[31,[8]]]],[[]],[[],5],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],11],[[]],[[],[[22,[17]]]],[[],17],[[]],[[]],[17,16],[33,11],[[],[[22,[5]]]],[[]],[11,27],[11,27],[[],33],[17],[17],[[[28,[17]]],33],[36,33],[33,22],[33,22],[4,22],[4,22],[[]],[[]],[11],[11],[11,27],[11,27],[33],[[]],[[]],[[],6],[[],6],[[],7],[[]],[[]],[27,27],[27,27],[27],[27],[[]],0,0],"p":[[4,"GraphErrors"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Node"],[8,"Rng"],[3,"ErEnsembleC"],[15,"usize"],[4,"ErStepC"],[8,"Clone"],[8,"Debug"],[6,"Graph"],[15,"bool"],[15,"u32"],[15,"f64"],[3,"ErEnsembleM"],[3,"ErStepM"],[3,"EmptyNode"],[4,"Option"],[8,"AdjContainer"],[3,"GenericGraph"],[15,"f32"],[3,"Bfs"],[3,"Vec"],[3,"Iter"],[3,"Dfs"],[3,"DfsWithIndex"],[3,"SwContainer"],[3,"NodeContainer"],[4,"IterWrapper"],[3,"SwEnsemble"],[6,"SwGraph"],[3,"SwEdgeIterNeighbors"],[13,"GenericIter"],[13,"SwIter"],[13,"AddedEdge"],[13,"RemovedEdge"],[13,"GError"],[8,"Ensemble"],[8,"EnsembleRng"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
