var searchIndex = JSON.parse('{\
"net_ensembles":{"doc":"This lib is intended for scientific simulations","t":[13,3,3,4,2,13,13,2,2,2,13,3,2,4,2,2,2,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,14,11,11,11,11,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,2,11,11,11,0,11,11,11,11,11,11,11,0,0,0,0,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,17,17,17,17,17,17,17,4,3,4,8,3,6,3,3,3,6,13,13,13,13,6,13,6,13,4,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,13,3,4,3,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,3,3,8,13,13,13,13,13,13,3,13,3,13,13,13,13,13,13,13,8,8,8,8,4,8,3,3,13,13,13,4,13,4,3,6,6,4,4,3,3,4,8,8,4,3,3,6,3,3,13,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,3,3,3,8,8,8,13,13,13,8,13,13,13,13,13,13,13,13,13,13,13,13,16,13,13,13,4,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,6,3,13,13,3,3,3,3,6,6,4,4,3,13,13,4,8,4,13,16,13,8,3,3,8,8,8,4,8,4,13,13,13,11,11,11,11,10,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,5,5,11,11,11,11,12,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,11,12,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,5,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,11,11,12,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,5,5,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,12,11,11,10,11,12,0,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,0,11,11,11,10,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,10,11,11,11,11,12,10,10,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,8,8,8,8,4,8,3,3,13,13,13,13,13,13,10,10,10,11,11,10,11,10,11,11,10,10,11,10,10,10,12,0,4,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,4,3,4,13,13,3,5,12,0,5,5,5,12,12,12,5,12,12,12,12,5,5,3,13,3,13,13,13,13,4,4,3,3,4,4,3,3,6,3,3,13,13,3,13,13,13,13,13,12,12,12,12,12,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,3,3,8,13,13,8,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,3,3,3,8,8,8,8,13,13,16,13,13,13,13,13,16,13,10,11,11,11,11,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,13,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,4,13,6,3,3,5,5,5,5,5,5,5,13,13,4,6,6,13,13,13,13,13,13,13,13,13,13,3,3,6,6,4,4,3,13,13,4,13,5,5,5,5,5,5,5,5,5,5,12,8,8,8,10,11,11,11,11,11,10,10,11,11,11,11,10,10,10,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,4,8,3,3,8,8,8,4,8,4,10,10,10,11,11,10,11,10,11,11,10,10,10,10,10,11,10,10,10,12,13,3,13,3,13,13,3,6,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,2,2,13,13,13,4,2,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,13,13,4,8,8,8,2,8,8,8,8,8,8,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,11,10,10,11,11,11,10,10,10,11,11,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,10,10,10,10,10,10,10,11,11,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,10,11,10,11,11,10,10,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,10,10,11,11,10,10,10,11,13,13,3,6,3,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Added","BAensemble","ConfigurationModel","ConfigurationModelStep","CountingNode","EdgeDoesNotExist","EdgeExists","EmptyNode","ErEnsembleC","ErEnsembleM","Error","GenericGraph","Graph","GraphErrors","IterWrapper","SwEnsemble","SwGraph","UnableToAddEdge","UnableToRemoveEdge","UndoStepErrorCM","as_ref","as_ref","assert_degree_vec_valid","at","at","at_mut","at_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone","clone","clone_from_generic_graph","clone_into","clone_into","clone_into","clone_into","contained_iter_mut","contained_iter_mut","contained_iter_neighbors_mut","contained_iter_neighbors_mut","contained_iter_neighbors_mut_with_index","contained_iter_neighbors_mut_with_index","conv","conv","conv","conv","degree_vec","degree_vec_from_generic_graph","degree_vec_is_valid","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","dot_constants","dot_options","drop","drop","drop","drop","dual_graph","er_c","er_m","example_nodes","fmt","fmt","fmt","fmt","from","from","from","from","from_const","from_generic_graph","from_vec","from_vec_unchecked","generic_graph","get_contained","get_contained_mut","get_contained_unchecked","get_contained_unchecked_mut","graph","graph","graph","init","init","init","init","into","into","into","into","iter","m_step","new","new_from_generic_graph","new_from_graph","rand","randomize","randomize","rng","sampling","serialize","serialize","serialize","serialize","sort_adj","sort_adj","source_graph","spacial","step_structs","sw","sw_graph","swap_degree_vec","swap_degree_vec_unchecked","swap_rng","to_owned","to_owned","to_owned","to_owned","traits","try_cast","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","undo_step","undo_step_quiet","vzip","vzip","vzip","vzip","watts_strogatz","0","1","0","0","1","1","EXAMPLE_DOT_OPTIONS","MARGIN_0","NO_OVERLAP","RATIO_FILL","SIZE_A4","SPLINES","TRANSPARENT_BG","AddEdgeError","Adj","AdjSingle","AdjTrait","BfsDualIndex","DefaultSDG","DfsDualContained","DfsDualIndex","DualGraph","DualIndex","EdgeExists","Graph1","Graph2","IndexOutOfBounds","MultiDualGraph","Nothing","SingleDualGraph","Something","WhichGraph","add_edge","add_edge","add_edge","add_edge","adj_1","adj_2","bfs_index","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","contained_iter_neighbors_1","contained_iter_neighbors_2","conv","conv","conv","conv","conv","conv","conv","conv","degree_1","degree_2","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","dfs_1_contained","dfs_1_index","dfs_2_contained","dfs_2_index","dfs_contained","dfs_index","diameter","drop","drop","drop","drop","drop","drop","drop","drop","eq","fmt","fmt","from","from","from","from","from","from","from","from","graph_1","graph_1_contained_iter","graph_1_contained_iter","graph_1_contained_iter_mut","graph_1_contained_iter_mut","graph_1_contained_iter_mut_which_graph","graph_1_contained_iter_mut_which_graph","graph_1_contained_iter_mut_which_graph_with_index","graph_1_contained_iter_mut_which_graph_with_index","graph_1_contained_iter_neighbors_in_other_graph_mut","graph_1_contained_iter_neighbors_in_other_graph_mut","graph_1_mut","graph_2","graph_2_contained_iter","graph_2_contained_iter","graph_2_contained_iter_mut_which_graph","graph_2_contained_iter_mut_which_graph","graph_2_contained_iter_mut_which_graph_with_index","graph_2_contained_iter_mut_which_graph_with_index","graph_2_contained_iter_neighbors_in_other_graph_mut","graph_2_contained_iter_neighbors_in_other_graph_mut","graph_2_mut","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","is_adjacent","is_adjacent","is_adjacent","is_connected","is_nothing","is_something","new","new","new","new","next","next","next","reuse","serialize","serialize","serialize","serialize","size","slice","slice","slice","to_owned","to_owned","to_owned","to_owned","to_owned","total_vertices","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","AddedEdge","ErEnsembleC","ErStepC","GError","Nothing","RemovedEdge","as_ref","at","at_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","cast","cast","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_trunc","cast_trunc","clone","clone","clone_into","clone_into","contained_iter_mut","contained_iter_neighbors_mut","contained_iter_neighbors_mut_with_index","conv","conv","deref","deref","deref_mut","deref_mut","deserialize","deserialize","dot","dot_from_indices","dot_string","dot_string_from_indices","dot_string_with_indices","dot_with_indices","drop","drop","fmt","fmt","from","from","get_contained","get_contained_mut","get_contained_unchecked","get_contained_unchecked_mut","graph","init","init","into","into","is_valid","m_step","make_connected","new","randomize","rng","serialize","serialize","set_target_connectivity","sort_adj","swap_rng","target_connectivity","to_owned","to_owned","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_from","try_from","try_into","try_into","type_id","type_id","undo_step","undo_step_quiet","valid_or_panic","valid_or_panic_msg","vzip","vzip","0","0","0","ErEnsembleM","ErStepM","as_ref","at","at_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","cast","cast","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_trunc","cast_trunc","clone","clone","clone_into","clone_into","contained_iter_mut","contained_iter_neighbors_mut","contained_iter_neighbors_mut_with_index","conv","conv","deref","deref","deref_mut","deref_mut","deserialize","deserialize","dot","dot_from_indices","dot_string","dot_string_from_indices","dot_string_with_indices","dot_with_indices","drop","drop","fmt","fmt","from","from","get_contained","get_contained_mut","get_contained_unchecked","get_contained_unchecked_mut","get_m","graph","init","init","into","into","m_step","new","randomize","rng","serialize","serialize","sort_adj","swap_rng","to_owned","to_owned","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_from","try_from","try_into","try_into","type_id","type_id","undo_step","undo_step_quiet","vzip","vzip","CountingNode","EmptyNode","borrow","borrow","borrow_mut","borrow_mut","cast","cast","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_trunc","cast_trunc","clone","clone","clone_into","clone_into","conv","conv","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","index","init","init","into","into","new_from_index","new_from_index","number","serialize","serialize","to_owned","to_owned","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Bfs","BfsFiltered","BfsMut","Dfs","DfsMut","DfsWithIndex","GenericGraph","add_edge","at","at_checked","at_mut","average_degree","bfs_filtered","bfs_index_depth","bfs_index_depth_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","clear_edges","clone","clone_into","clone_topology","cloned_subgraph","closeness_centrality","complete_graph","connected_components","connected_components_ids","contained_iter","contained_iter_mut","contained_iter_neighbors","contained_iter_neighbors_mut","contained_iter_neighbors_mut_with_index","contained_iter_neighbors_with_index","container","container_checked","container_iter","container_iter_neighbors","conv","conv","conv","conv","conv","conv","conv","count_long_ranging_edges","count_nodes_with_long_ranging_edges","degree","degree_histogram","degree_iter","degree_vec","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","dfs","dfs_mut","dfs_with_index","diameter","distance","dot_from_contained_index","dot_from_container_index","dot_from_indices","drop","drop","drop","drop","drop","drop","drop","edge_count","fmt","frac_long_ranging_edges","frac_nodes_wlre","from","from","from","from","from","from","from","from_vec","get_contained","get_contained_mut","get_contained_unchecked","get_contained_unchecked_mut","get_vertices","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_connected","is_handled","leaf_count","longest_shortest_path_from_index","new","next","next","next","next","next","next","q_core","remove_edge","reset_edge","reuse","rewire_edge","serialize","shuffle_adj","shuffle_adjs","size_hint","size_hint","size_hint","size_hint","size_hint","sort_adj","to_dot","to_dot_with_labels_from_contained","to_dot_with_labels_from_container","to_owned","transitivity","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vertex_biconnected_components","vertex_count","vertex_load","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Graph","NodeContainer","borrow","borrow_mut","cast","cast_ceil","cast_floor","cast_nearest","cast_trunc","clone","clone_into","complete_graph","contained","contained_mut","conv","degree","deref","deref_mut","deserialize","drop","edges","fmt","from","from","from_iter","get_adj_first","id","init","into","is_adjacent","neighbors","new","serialize","shuffle_adj","sort_adj","to_owned","try_cast","try_cast_ceil","try_cast_floor","try_cast_nearest","try_cast_trunc","try_conv","try_from","try_into","type_id","vzip","ContainedIter","ContainedIterMut","GenericIter","INContainedIterMut","IterWrapper","NContainedIter","NContainedIterMut","NContainerIter","NIContainedIter","SwIter","all","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","collect","conv","conv","conv","conv","conv","conv","conv","conv","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","fold","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","len","len","len","len","len","len","len","len","new_generic","new_sw","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","reduce","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","AtomicHistF32","AtomicHistF64","AtomicHistI128","AtomicHistI16","AtomicHistI32","AtomicHistI64","AtomicHistI8","AtomicHistIsize","AtomicHistU128","AtomicHistU16","AtomicHistU32","AtomicHistU64","AtomicHistU8","AtomicHistUsize","AtomicHistogram","AtomicHistogramFloat","AtomicHistogramInt","AtomicHistogramVal","Base10","BaseE","BinarySearch","BorderCreation","CastError","CheckRefineEvery0","ColorRGB","CubeHelix","CubeHelixParameter","Dimension","DimensionError","Empty","Empty","EmptyList","EmptySlice","EmptySlice","Entropic","EntropicEEH","EntropicEnergy","EntropicEnsemble","EntropicErrors","EntropicHist","EntropicSampling","EntropicSamplingAdaptive","EpsLatex","EstimatedStatistic","EstimatedStatistic","ExtremeInterval","FromValues","GlueErrors","GlueResult","Glued","GluedResult","GnuplotAxis","GnuplotPalette","GnuplotPointSettings","GnuplotSettings","GnuplotTerminal","HasRng","HasUnsignedVersion","HeatmapError","HeatmapF64","HeatmapF64Mean","HeatmapU","HeatmapUsize","HeatmapUsizeMean","HistBinCount","HistErrors","HistF32","HistF64","HistI128","HistI128Fast","HistI16","HistI16Fast","HistI32","HistI32Fast","HistI64","HistI64Fast","HistI8","HistI8Fast","HistIsize","HistIsizeFast","HistU128","HistU128Fast","HistU16","HistU16Fast","HistU32","HistU32Fast","HistU64","HistU64Fast","HistU8","HistU8Fast","HistUsize","HistUsizeFast","Histogram","HistogramCombine","HistogramFast","HistogramFloat","HistogramInt","HistogramIntervalDistance","HistogramPartition","HistogramVal","HistsizeError","InfinitBeta","InitFailed","IntervalOrder","IntervalWidthZero","InvalidBestof","InvalidBestof","InvalidLogDensity","InvalidLogF","InvalidLogFThreshold","InvalidMinMaxTrialSteps","InvalidMinMaxTrialSteps","InvalidState","InvalidVal","InvalidWangLandau","Labels","LeBytes","Left","LenMissmatch","LenMissmatch","LogBase","MarkovChain","MetF32","MetF64","MetI128","MetI16","MetI32","MetI64","MetI8","MetIsize","MetU128","MetU16","MetU32","MetU64","MetU8","MetUsize","Metropolis","MetropolisError","ModuloError","NAN","Negative","Negative","NoBins","NoOverlap","NonFiniteEncountered","NonNormal","NonNormalThreshold","None","NotEnoughStatistics","NotEnoughStatistics","NotInitialized","OutOfBounds","OutsideHist","Overflow","PDF","PaletteRGB","PresetHSV","PresetRGB","RGB","Rees","ReesWalker","Refine1T","RefineOriginal","ReplicaExchangeEntropicSampling","ReplicaExchangeWangLandau","ReplicaExchangeWangLandauBuilder","ReplicaGlued","Rewl","RewlBuilder","RewlBuilderErr","RewlCreationErrors","RewlWalker","Right","SeedError","SetInitialError","SimpleSample","ThresholdErrors","Underflow","Unsigned","UsizeCastError","WangLandau","WangLandau1T","WangLandauAdaptive","WangLandauEEH","WangLandauEnergy","WangLandauEnsemble","WangLandauErrors","WangLandauHist","WangLandauMode","XError","YError","Zero","acceptance_rate_markov","acceptance_rate_markov","add_color","add_extra","align","align","aligned","any_bin_zero","any_bin_zero","approximate_color_rgb","average_merged_and_aligned","average_merged_log_probability_and_align","average_merged_log_probability_and_align","base","best_of_steps","bin_count","bin_count","bin_count","bin_count","bin_count","bin_count","bin_count","bin_hits_iter","bin_hits_iter","bin_hits_iter","bin_hits_iter","bin_hits_iter","bin_iter","bin_iter","bin_iter","bin_iter","bin_iter","bins_hit","bins_not_hit","blue","bootstrap","bootstrap","bootstrap_copyable","borders","borders","borders","borders","borders","borders_clone","borders_clone","borders_clone","borders_clone","borders_clone","borders_clone","borders_clone","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","change_markov_chain","change_step_size_of_interval","change_step_size_of_interval","change_sweep_size_of_interval","change_sweep_size_of_interval","check_energy_fn","check_energy_fn","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","color","combine","combine","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","count","count","count","count","count_index","count_index","count_inside_heatmap","count_inside_heatmap","count_multiple","count_multiple_index","count_multiple_index","count_multiple_index","count_multiple_index","count_multiple_index","count_multiple_index","count_multiple_index","count_val","count_val","count_val","count_val","count_val","count_val","count_val","counter","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","derivative_glue_and_align","derivative_glue_and_align_ignore","derivative_merged_and_aligned","derivative_merged_log_prob_and_aligned","derivative_merged_log_prob_and_aligned","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","distance","distance","distance","distance","distance","distance","distance","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encapsulating_hist","encapsulating_hist","encapsulating_hist","energy","energy","energy","energy","energy","energy","energy","energy","energy","energy","energy","energy_clone","energy_copy","energy_copy","ensemble","ensemble","ensemble","ensemble","ensemble","ensemble","ensemble","ensemble","ensemble","ensemble_iter","ensemble_iter","ensemble_iter_mut","ensemble_iter_mut","ensemble_mut","ensemble_mut","ensemble_mut","ensemble_mut","ensemble_mut","ensemble_mut","ensemble_mut","ensembles","entropic_sampling","entropic_sampling","entropic_sampling","entropic_sampling_acc","entropic_sampling_acc","entropic_sampling_unsafe","entropic_sampling_unsafe","entropic_sampling_while","entropic_sampling_while","entropic_sampling_while_acc","entropic_sampling_while_acc","entropic_sampling_while_unsafe","entropic_sampling_while_unsafe","entropic_step","entropic_step","entropic_step_acc","entropic_step_acc","entropic_step_unsafe","entropic_step_unsafe","eq","eq","equal_range","estimate_statistics","estimate_statistics","examples","extra_slice","extra_slice_mut","finished_fraction","finished_rebuilding_statistics","finished_slice","first_border","first_border","first_border","first_border","first_border","first_border","first_border","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_hex","fmt_palette","fraction_accepted_current","fraction_accepted_current","fraction_accepted_total","fraction_accepted_total","fraction_accepted_total","fraction_accepted_total_entropic","fraction_of_statistics_gathered","fraction_rejected_total","fraction_rejected_total","frame","frame","frame_color","frame_color","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ensemble","from_ensemble_tuple","from_ensemble_vec","from_labels","from_le_bytes","from_slice","from_wl","from_wl_adaptive","from_wl_adaptive","gamma","get","get","get_bin_index","get_bin_index","get_bin_index","get_bin_index","get_bin_index","get_bin_index","get_bin_index","get_ensemble","get_ensemble","get_ensemble_mut","get_ensemble_mut","get_hist","get_hist","get_id_vec","get_legend","get_row","get_row","get_row_unchecked","get_size","get_step_size_of_interval","get_step_size_of_interval","get_sweep_size_of_interval","get_sweep_size_of_interval","get_title","get_unchecked","get_unchecked","glue","glue_entropic","glue_wl","glued","glued_log10_probability","gnuplot","gnuplot","gnuplot","gnuplot","gnuplot_quick","gnuplot_quick","gnuplot_quick","gnuplot_quick","greedy_build","greedy_choose_rng_build","green","heatmap","heatmap","heatmap","heatmap","heatmap","heatmap_index","heatmap_normalize_rows","heatmap_normalized","heatmap_normalized_columns","heatmap_normalized_rows","height","height","height_count_hist","height_hist","height_hist","hist","hist","hist","hist","hist","hist","hist","hist","hist","hist","hist","hist","hist","hist","hist","hist","hist","histogram","hists","hists","hists","hue","id","id","increment","increment","increment","increment","increment","increment_quiet","increment_quiet","increment_quiet","increment_quiet","increment_quiet","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init_greedy_heuristic","init_greedy_heuristic","init_interval_heuristik","init_interval_heuristik","init_mixed_heuristik","init_mixed_heuristik","interval_distance_overlap","interval_distance_overlap","interval_distance_overlap","interval_distance_overlap","interval_distance_overlap","interval_distance_overlap","interval_heuristik_build","interval_heuristik_choose_rng_build","interval_length","interval_length","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_gnuplot_palette","into_gnuplot_palette","into_heatmap_normalized","into_heatmap_normalized_columns","into_heatmap_normalized_columns","into_heatmap_normalized_rows","into_inner","into_rees","into_rees_with_extra","is_finished","is_finished","is_finished","is_finished","is_finished","is_initialized","is_initialized","is_inside","is_inside","is_inside","is_inside","is_inside","is_inside","is_inside","is_mode_1_t","is_mode_original","is_rebuilding_statistics","is_rebuilding_statistics","largest_log_f","left","left_compare","left_compare","left_compare","left_compare","left_list","legend","log10_density","log10_density","log10_density_refined","log10_vec","log_density","log_density","log_density","log_density","log_density","log_density","log_density","log_density","log_density_base","log_density_base","log_density_base10","log_density_base10","log_density_estimate","log_density_estimate","log_density_refined","log_density_refined","log_density_refined","log_f","log_f","log_f","log_f","log_f_threshold","log_f_threshold","log_f_threshold","log_f_vec","log_probability_and_align","log_probability_and_align_ignore","low_high","m_beta","m_step","m_step_acc","m_steps","m_steps_acc","m_steps_acc_quiet","m_steps_quiet","max_roundtrips","max_step_size","max_step_size","mean","mean","mean_iter","mean_iter","mean_slice","mean_slice","merged_log_prob","merged_log_prob_and_aligned","merged_log_prob_ignore","metropolis","metropolis","metropolis_efficient","metropolis_efficient_unsafe","metropolis_efficient_while","metropolis_efficient_while_unsafe","metropolis_unsafe","metropolis_while","metropolis_while_unsafe","min_roundtrips","min_step_size","min_step_size","mixed_heuristik_build","mode","mode","mode","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_from_array","new_from_m_beta","new_from_temperature","new_inclusive","new_inclusive","new_inclusive","new_unchecked","norm_log10_sum_to_1","normalize_columns","normalize_total","not_inside","not_inside","not_inside","not_inside","not_inside","not_inside","not_inside","num_intervals","num_intervals","num_walkers","overlapping_partition","overlapping_partition","overlapping_partition","overlapping_partition","palette","palette","proposed_replica_exchanges","proposed_replica_exchanges","randomize","range_inclusive","red","rees","rees_roundtrip_iter","refine","refine","refine_estimate","refine_estimate","rejected_markov_steps","rejected_markov_steps","replica_exchange_frac","replica_exchange_frac","replica_exchanges","replica_exchanges","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset_counter","reverse","rewl","rewl_roundtrip_iter","rgb_from_gray","right","rng","rng","rng","rng","rotation","roundtrip_iter","samples_per_trial","second_last_border","second_last_border","second_last_border","second_last_border","second_last_border","second_last_border","second_last_border","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_adjust_bestof_every","set_energy","set_initial_probability_guess","set_log_f_threshold","set_log_f_threshold","set_log_f_threshold","set_log_f_threshold","set_m_beta","set_step_goal","set_step_goal","set_step_size","set_temperature","simple_sample","simple_sample_vec","simulate_until_convergence","simulate_until_convergence","simulate_while","simulate_while","size","size","size","start_color","step_count","step_count","step_count","step_counter","step_counter","step_counter","step_counter","step_counter","step_counter","step_goal","step_goal","step_goal","step_goal","step_size","step_size","step_size","step_size","step_size_change","step_size_change","step_sizes","step_sizes_mut","step_threshold","steps_accepted","steps_rejected","steps_total","steps_total","swap_extra","swap_rng","swap_rng","swap_rng","swap_rng","sweep","sweep","sweep_size","sweep_size","sweep_size_change","sweep_size_change","sweep_sizes","sweep_sizes_mut","switch_base","terminal","terminal","title","title","to_array","to_hex","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total","total","total_entr_steps_accepted","total_entr_steps_rejected","total_misses","total_misses","total_steps","total_steps_accepted","total_steps_accepted","total_steps_accepted","total_steps_accepted","total_steps_accepted","total_steps_accepted","total_steps_accepted","total_steps_rejected","total_steps_rejected","total_steps_rejected","total_steps_rejected","total_steps_rejected","total_steps_rejected","total_steps_rejected","traits","transpose","transpose","transpose_inplace","transpose_inplace","try_add","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_greedy_build","try_greedy_choose_rng_build","try_interval_heuristik_build","try_interval_heuristik_choose_rng_build","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_mixed_heuristik_build","try_mixed_heuristik_choose_rng_build","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_step","undo_step_quiet","undo_steps","undo_steps_quiet","unpack_extra","vec_normalized","vec_normalized_columns","vec_normalized_rows","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","walkers","walkers","walkers_per_interval","walkers_per_interval","wang_landau","wang_landau_convergence","wang_landau_convergence","wang_landau_convergence_acc","wang_landau_convergence_acc","wang_landau_convergence_unsafe","wang_landau_convergence_unsafe","wang_landau_mode","wang_landau_step","wang_landau_step","wang_landau_step_acc","wang_landau_step_acc","wang_landau_step_unsafe","wang_landau_step_unsafe","wang_landau_while","wang_landau_while","wang_landau_while_acc","wang_landau_while_acc","wang_landau_while_unsafe","wang_landau_while_unsafe","width","width","width_count_hist","width_hist","width_hist","write","write","write_heatmap","write_hex","write_log","write_log","write_log","write_log","write_log","write_log","write_palette","write_rescaled","write_to","write_to","x_axis","x_axis","x_label","x_label","y_axis","y_axis","y_label","y_label","0","0","labels","max","min","tics","0","0","0","0","0","0","0","0","bootstrap","bootstrap_copyable","Entropic","EntropicEEH","EntropicEnergy","EntropicEnsemble","EntropicErrors","EntropicHist","EntropicSampling","EntropicSamplingAdaptive","EstimatedStatistic","InvalidBestof","InvalidLogDensity","InvalidMinMaxTrialSteps","InvalidWangLandau","NotEnoughStatistics","energy","ensemble","ensemble_mut","fraction_accepted_total","fraction_rejected_total","hist","is_finished","log_density","log_density_base","log_density_base10","step_counter","step_goal","steps_total","total_steps_accepted","total_steps_rejected","write_log","0","coin_flips","CoinFlip","CoinFlipMove","CoinFlipSequence","Head","Tail","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone","clone_into","clone_into","clone_into","conv","conv","conv","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","fmt","fmt","fmt","from","from","from","head_count","init","init","init","into","into","into","m_step","m_steps","m_steps_acc","max_heads_in_a_row","new","rng","serialize","serialize","serialize","steps_accepted","steps_rejected","swap_rng","to_owned","to_owned","to_owned","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_into","try_into","try_into","turn","type_id","type_id","type_id","undo_step","undo_step_quiet","undo_steps","undo_steps_quiet","update_head_count","vzip","vzip","vzip","Base10","BaseE","BinarySearch","BorderCreation","EmptyList","GlueErrors","GlueResult","LogBase","NoOverlap","OutOfBounds","ReplicaGlued","average_merged_and_aligned","borders","derivative","derivative_merged_and_aligned","glue_entropic","glue_wl","glued_log10_probability","left_list","log10_vec","norm_log10_sum_to_1","total_steps","total_steps_accepted","total_steps_rejected","0","derivative_merged","five_point_derivitive","ColorRGB","CubeHelix","CubeHelixParameter","Dimension","Empty","EpsLatex","FromValues","GnuplotAxis","GnuplotPalette","GnuplotPointSettings","GnuplotSettings","GnuplotTerminal","HeatmapError","HeatmapF64","HeatmapF64Mean","HeatmapU","HeatmapUsize","HeatmapUsizeMean","Labels","PDF","PaletteRGB","PresetHSV","PresetRGB","RGB","XError","YError","blue","color","frame","frame_color","green","heatmap_index","palette","red","size","terminal","title","x_axis","x_label","y_axis","y_label","labels","max","min","tics","0","0","0","0","0","0","AtomicHistF32","AtomicHistF64","AtomicHistI128","AtomicHistI16","AtomicHistI32","AtomicHistI64","AtomicHistI8","AtomicHistIsize","AtomicHistU128","AtomicHistU16","AtomicHistU32","AtomicHistU64","AtomicHistU8","AtomicHistUsize","AtomicHistogram","AtomicHistogramFloat","AtomicHistogramInt","AtomicHistogramVal","CastError","EmptySlice","HasUnsignedVersion","HistErrors","HistF32","HistF64","HistI128","HistI128Fast","HistI16","HistI16Fast","HistI32","HistI32Fast","HistI64","HistI64Fast","HistI8","HistI8Fast","HistIsize","HistIsizeFast","HistU128","HistU128Fast","HistU16","HistU16Fast","HistU32","HistU32Fast","HistU64","HistU64Fast","HistU8","HistU8Fast","HistUsize","HistUsizeFast","Histogram","HistogramCombine","HistogramFast","HistogramFloat","HistogramInt","HistogramIntervalDistance","HistogramPartition","HistogramVal","IntervalOrder","IntervalWidthZero","InvalidVal","LeBytes","ModuloError","NoBins","OutsideHist","Overflow","Underflow","Unsigned","UsizeCastError","align","any_bin_zero","any_bin_zero","bin_count","bin_count","borders_clone","borders_clone","count_index","count_index","count_multiple_index","count_multiple_index","count_val","count_val","distance","distance","encapsulating_hist","first_border","first_border","from_le_bytes","get_bin_index","get_bin_index","hist","hist","interval_distance_overlap","is_inside","is_inside","left_compare","not_inside","not_inside","overlapping_partition","reset","reset","second_last_border","second_last_border","to_le_bytes","InfinitBeta","InvalidState","MetF32","MetF64","MetI128","MetI16","MetI32","MetI64","MetI8","MetIsize","MetU128","MetU16","MetU32","MetU64","MetU8","MetUsize","Metropolis","MetropolisError","NAN","Rees","ReesWalker","ReplicaExchangeEntropicSampling","merged_log10_prob","merged_log10_probability_and_align","merged_log10_probability_and_align_ignore","merged_log_prob","merged_log_prob_ignore","merged_log_probability_and_align","merged_log_probability_and_align_ignore","Empty","EmptySlice","ExtremeInterval","Glued","GluedResult","HistBinCount","HistsizeError","Left","LenMissmatch","LenMissmatch","Negative","Negative","NonNormal","NonNormalThreshold","None","ReplicaExchangeWangLandau","ReplicaExchangeWangLandauBuilder","Rewl","RewlBuilder","RewlBuilderErr","RewlCreationErrors","RewlWalker","Right","SeedError","ThresholdErrors","Zero","derivative_glue_and_align","derivative_glue_and_align_ignore","log_probability_and_align","log_probability_and_align_ignore","merged_log10_prob","merged_log10_probability_and_align","merged_log10_probability_and_align_ignore","merged_log_prob","merged_log_probability_and_align","merged_log_probability_and_align_ignore","0","HasRng","MarkovChain","SimpleSample","m_step","m_step_acc","m_steps","m_steps_acc","m_steps_acc_quiet","m_steps_quiet","randomize","rng","simple_sample","simple_sample_vec","steps_accepted","steps_rejected","swap_rng","undo_step","undo_step_quiet","undo_steps","undo_steps_quiet","CheckRefineEvery0","DimensionError","EstimatedStatistic","InitFailed","InvalidBestof","InvalidLogF","InvalidLogFThreshold","InvalidMinMaxTrialSteps","NonFiniteEncountered","NotEnoughStatistics","NotInitialized","Refine1T","RefineOriginal","SetInitialError","WangLandau","WangLandau1T","WangLandauAdaptive","WangLandauEEH","WangLandauEnergy","WangLandauEnsemble","WangLandauErrors","WangLandauHist","WangLandauMode","energy","ensemble","ensemble_mut","fraction_accepted_total","fraction_rejected_total","hist","is_finished","log_density","log_density_base","log_density_base10","log_f","log_f_threshold","mode","set_log_f_threshold","step_counter","steps_total","total_steps_accepted","total_steps_rejected","write_log","0","AddedEdge","DogEnsemble","Error","LatinHypercubeSampling2D","Nothing","RemovedEdge","SpacialEnsemble","SpacialGraph","SpacialNodeContainer","SpacialStep","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone_into","clone_into","contained","contained_mut","conv","conv","conv","conv","degree","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","distance","distance","distance","dot_from_indices","dot_from_indices","drop","drop","drop","drop","edge_probability","fmt","fmt","from","from","from","from","get_adj_first","get_x","get_y","graph","id","init","init","init","init","into","into","into","into","into_iter","is_adjacent","len","m_step","m_steps_quiet","neighbors","new","new","new","new","next","randomize","randomize","serialize","serialize","shuffle_adj","sort_adj","to_owned","to_owned","try_cast","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","undo_step","undo_step_quiet","vzip","vzip","vzip","vzip","0","0","AddedEdge","ErStepC","ErStepM","Error","Nothing","RemovedEdge","SpacialStep","SwChangeState","SwStep","borrow","borrow_mut","cast","cast_ceil","cast_floor","cast_nearest","cast_trunc","clone","clone_into","conv","deref","deref_mut","deserialize","drop","fmt","from","init","into","serialize","to_owned","try_cast","try_cast_ceil","try_cast_floor","try_cast_nearest","try_cast_trunc","try_conv","try_from","try_into","type_id","vzip","0","0","BlockedByExistingEdge","GError","InvalidAdjecency","Nothing","Reset","Rewire","SwChangeState","SwEnsemble","as_ref","at","at_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","cast","cast","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_trunc","cast_trunc","clone","clone","clone_into","clone_into","contained_iter_mut","contained_iter_neighbors_mut","contained_iter_neighbors_mut","contained_iter_neighbors_mut_with_index","conv","conv","deref","deref","deref_mut","deref_mut","deserialize","deserialize","dot","dot_from_indices","dot_string","dot_string_from_indices","dot_string_with_indices","dot_with_indices","draw_edge","drop","drop","fmt","fmt","from","from","get_contained","get_contained_mut","get_contained_unchecked","get_contained_unchecked_mut","graph","init","init","into","into","is_nothing","is_nothing_or_blocked","is_valid","m_step","make_connected","new","new_with_distance","not_nothing_or_blocked","r_prob","randomize","rng","serialize","serialize","set_r_prob","sort_adj","swap_rng","to_owned","to_owned","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_from","try_from","try_into","try_into","type_id","type_id","undo_step","undo_step_quiet","vzip","vzip","0","0","0","1","1","2","2","SwContainer","SwEdge","SwEdgeIterNeighbors","SwGraph","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone_into","clone_into","contained","contained_mut","conv","conv","conv","count_long_ranging_edges","count_nodes_with_long_ranging_edges","count_root","degree","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","edges","fmt","fmt","frac_long_ranging_edges","frac_nodes_wlre","from","from","from","get_adj_first","id","init","init","init","into","into","into","into_iter","is_adjacent","is_at_root","is_long_ranging_root","is_root","iter_raw_edges","len","neighbors","neighbors_sw","new","next","next_back","nth","reset_edge","rewire_edge","serialize","serialize","shuffle_adj","size_hint","sort_adj","to","to_owned","to_owned","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","AdjContainer","AdjList","Contained","Dot","DotExtra","EdgeDoesNotExist","EdgeExists","GraphErrors","GraphIterators","GraphIteratorsMut","HasRng","IterWrapper","MarkovChain","MeasurableGraphQuantities","Node","SerdeStateConform","SimpleSample","WithGraph","at","at_mut","average_degree","bfs_index_depth","borrow","borrow_mut","cast","cast_ceil","cast_floor","cast_nearest","cast_trunc","clone","clone_into","connected_components","contained","contained_iter","contained_iter_mut","contained_iter_neighbors","contained_iter_neighbors_mut","contained_iter_neighbors_mut_with_index","contained_iter_neighbors_with_index","contained_mut","container_iter","container_iter_neighbors","conv","degree","degree","deref","deref_mut","deserialize","dfs","dfs_with_index","diameter","dot","dot","dot_from_contained","dot_from_contained","dot_from_contained_index","dot_from_container","dot_from_container","dot_from_container_index","dot_from_indices","dot_string","dot_string","dot_string_from_contained","dot_string_from_contained","dot_string_from_contained_index","dot_string_from_contained_index","dot_string_from_container","dot_string_from_container","dot_string_from_container_index","dot_string_from_container_index","dot_string_from_indices","dot_string_from_indices","dot_string_with_indices","dot_string_with_indices","dot_with_indices","dot_with_indices","drop","edge_count","edges","fmt","fmt","from","get_adj_first","get_contained","get_contained_mut","get_contained_unchecked","get_contained_unchecked_mut","graph","id","init","into","is_adjacent","is_connected","leaf_count","longest_shortest_path_from_index","m_step","m_step_acc","m_steps","m_steps_acc","m_steps_acc_quiet","m_steps_quiet","neighbors","new","new_from_index","q_core","randomize","rng","serialize","shuffle_adj","simple_sample","simple_sample_vec","sort_adj","sort_adj","steps_accepted","steps_rejected","swap_rng","to_owned","to_str","to_string","transitivity","try_cast","try_cast_ceil","try_cast_floor","try_cast_nearest","try_cast_trunc","try_conv","try_from","try_into","type_id","undo_step","undo_step_quiet","undo_steps","undo_steps_quiet","vertex_biconnected_components","vertex_count","vertex_load","vzip","ImpossibleEdgeRequest","ImpossibleRingRequest","SmallWorldWS","WS","WSContainer","WSCreationError","WSGraph","as_ref","at","at_mut","bfs_index_depth","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone","clone_into","clone_into","clone_into","contained","contained_iter","contained_iter_mut","contained_iter_neighbors","contained_iter_neighbors_mut","contained_iter_neighbors_mut_with_index","contained_iter_neighbors_with_index","contained_mut","container_iter","container_iter_neighbors","conv","conv","conv","degree","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","dfs","dfs_with_index","drop","drop","drop","fmt","fmt","fmt","from","from","from","get_adj_first","get_contained","get_contained_mut","get_contained_unchecked","get_contained_unchecked_mut","graph","id","init","init","init","into","into","into","is_adjacent","neighbor_distance","neighbor_distance","neighbors","new","new","new","randomize","rewire_prob","rewire_prob","rng","serialize","serialize","shuffle_adj","sort_adj","sort_adj","swap_rng","to_owned","to_owned","to_owned","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["net_ensemblesnet_ensembles::ConfigurationModelStep","","net_ensembles::UndoStepErrorCM","","","","net_ensembles::dot_constants","","","","","","","net_ensembles::dual_graphnet_ensembles::dual_graph::AdjSingle","","net_ensembles::dual_graph::WhichGraph","","net_ensembles::er_c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::er_c::ErStepC","","","net_ensembles::er_m","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::example_nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::generic_graphnet_ensembles::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::iternet_ensembles::iter::IterWrapper","","net_ensembles::samplingnet_ensembles::sampling::EntropicErrors","net_ensembles::sampling::GlueErrors","net_ensembles::sampling::GnuplotAxis","","","","net_ensembles::sampling::GnuplotPalette","","net_ensembles::sampling::GnuplotTerminal","","net_ensembles::sampling::HeatmapError","","net_ensembles::sampling::RewlBuilderErr","net_ensembles::sampling::WangLandauErrors","net_ensembles::sampling::bootstrap","","net_ensembles::sampling::entropic_sampling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::sampling::entropic_sampling::EntropicErrors","net_ensembles::sampling::examples","net_ensembles::sampling::examples::coin_flips","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::sampling::glue","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::sampling::glue::GlueErrors","net_ensembles::sampling::glue::derivative","","net_ensembles::sampling::heatmap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::sampling::heatmap::GnuplotAxis","","","","net_ensembles::sampling::heatmap::GnuplotPalette","","net_ensembles::sampling::heatmap::GnuplotTerminal","","net_ensembles::sampling::heatmap::HeatmapError","","net_ensembles::sampling::histogram","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::sampling::metropolis","","","","","","","","","","","","","","","","","","","net_ensembles::sampling::rees","","","","","","","","","","net_ensembles::sampling::rewl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::sampling::rewl::RewlBuilderErr","net_ensembles::sampling::traits","","","","","","","","","","","","","","","","","","","","net_ensembles::sampling::wang_landau","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::sampling::wang_landau::WangLandauErrors","net_ensembles::spacial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::spacial::SpacialStep","","net_ensembles::step_structs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::step_structs::SpacialStep","","net_ensembles::sw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::sw::SwChangeState","","","","","","","net_ensembles::sw_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net_ensembles::watts_strogatz","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Step did succeed and can be undone using thiscontains the …","Implements a Barabási-Albert Graph ensemble","Generate networks with a given degree distribution","Markov step of configuration model","","ERROR 404: Edge not found ;)","somehow, the existing of the edge is a problem","","","","step did not succeed","Generic graph implementation","","Error messages","","","","Could not add edge (usize, usize), because of GraphError","Could not remove edge (usize, usize), because of GraphError","Result of undoing a step via Markov Chain method of …","","","asserts, that a vector is a vaild degree distribution","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create ConfigurationModel from a generic graph and clones …","","","","","","","","","","","","","","","Get reference to the degree vector of the vertices, faster …","Use the degree vector of a generic graph","check if a vector (slice) is a vaild degree distribution","","","","","","","","","","","","","constants for dot options","You can chain/combine options with the <code>dot_options!</code> macro:","","","","","","Erdős-Rényi ensemble with target connectivity","Erdős-Rényi with constant number of edges","Example nodes implementing trait <code>Node</code>","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","create configuration model from a constant degree","create ConfigurationModel from a generic graph","create configuration model from a degree vector","create configuration model from a degree vector","Generic implementation for Topology","","","","","Topology","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Contains definitions of a few iterators. Not All of them …","Markov step","Initialize","Generate a new BA graph ensemble with a specified generic …","Generate a new BA graph ensemble with a specified source …","","Randomizes the Barabási-Albert (BA) graph","Randomizes the edges according to the configuration Model","","For sampling ensembles","","","","","","Sort adjecency lists","get reference to original graph, which is at the core of …","Spacial ensemble","The structs returned by the mc steps","Small-world ensemble","Topology for SwEnsemble","Swaps the degree vector for a new one and draws a new …","Swaps the degree_vec for a new one and draws a new network …","","","","","","You should <code>use net_ensembles::traits::*</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Undo a markcov step","Undo a markcov step","","","","","Watts-Strogatz small-world networks","","","","","","","Example options. You are free to use your own. Search for …","do not use margin","no overlapping nodes","dot option: ratio=“fill”","Din A4 size","activate splines","use transparent background","","","","","","","","","","Index which also stores for which graph the index is","","information is related to graph 1","information is related to graph 2","","","","","","Stores information T and the graph the information …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterate over all neighbors of the node corresponding to …","Iterate over all neighbors of the node corresponding to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Depth first search iterator starting at the node in …","","Depth first search iterator starting at the node in …","","Depth first search iterator starting at the node …","returns <code>None</code> <strong>if</strong> graph not connected <strong>or</strong> does not contain …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Note: This will first iterate over all neighbors from this …","Note: This will first iterate over all neighbors from this …","Note: This will first iterate over all neighbors from this …","Note: This will first iterate over all neighbors from this …","","","","","","","","","Note: This will first iterate over all neighbors from this …","Note: This will first iterate over all neighbors from this …","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","an edge was added","Implements Erdős-Rényi graph ensemble","Returned by markov steps","a GraphError occured and is wrapped here","nothing was changed","an edge was removed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>true</code> if <code>self</code> is not <code>GError</code> variant","Markov step","<strong>Experimental!</strong> Connect the connected components","Initialize","Randomizes the edges according to Er probabilities","Access RNG","","","set new value for target connectivityNote","Sort adjecency lists","Swap random number generator","returns target connectivity","","","","","","","","","","","","","","","","","","","","","Undo a markcov step","Undo a markov step","<code>panic!</code> if <code>self</code> is <code>GError</code> variant","<code>panic!(msg)</code> if <code>self</code> is <code>GError</code> variant","","","","","","Implements Erdős-Rényi graph ensemble","Storing the information about which edges were deleted or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Return total number of edges","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Markov step","Initialize","Randomizes self according to  model","Access RNG","","","Sort adjecency lists","Swap random number generator","","","","","","","","","","","","","","","","","","","","","undo a markov step, return result-stateif you want to undo …","undo a markov step, <strong>panic</strong> on invalid result statefor …","","","Example node that contains a <code>usize</code> which will, if not …","Use this, if you do not need to store extra information","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Contained data","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the index of the node","","","","","","","","","","","","","","","","","","","","","","","","","Breadth first search Iterator with <strong>index</strong> and <strong>depth</strong> of …","iterator returns tuple: <code>(index, node, depth)</code>iterator uses …","Breadth first search Iterator with <strong>index</strong> and <strong>depth</strong> of …","Depth first search Iterator","Depth first search iterator","Depth first search Iterator with <strong>index</strong> of corresponding …","Generic graph implementation","Adds edge between nodes <code>index1</code> and <code>index2</code>","For your calculations etc.","For your calculations etc.","For your calculations etc.","calculates the average degree of the graph","similar to self.bfs_index_depth, but allows for ignoring …","returns <code>Iterator</code>","returns <code>Iterator</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","removes all edges from the graph","","","Use the topology from another graph and create a new one …","Create a subgraph","","Efficiently create a complete graph with n nodes","compute sizes of all <em>connected components</em>","compute connected component ids","get iterator over additional information stored at each …","same as <code>contained_iter</code>, but mutable","iterate over additional information of neighbors of vertex …","iterate over mutable additional information of neighbors …","iterate over mutable additional information of neighbors …","iterate over additional information of neighbors of vertex …","get <code>AdjContainer</code> of vertex <code>index</code>","get <code>AdjContainer</code> of vertex <code>index</code>","get iterator over AdjContainer in order of the indices…","iterate over <code>AdjContainer</code> of neighbors of vertex <code>index</code>","","","","","","","","How many long ranging edges are there in the Graph?","How many nodes have long ranging edges?","returns number of vertices adjacent to vertex <code>index</code><code>None</code> if …","Get a histogram of the degrees","Iterator","get degree vector","","","","","","","","","","","","","","","","returns <code>Iterator</code>","returns <code>Iterator</code>","returns <code>Iterator</code>","returns <code>None</code> <strong>if</strong> graph not connected <strong>or</strong> does not contain …","Euclidean distance between two vertices","","","","","","","","","","","returns total number of edges in graph","","Fraction of long ranging edges in the Graph?","Fraction of nodes which have long ranging edges","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","create a new graph","Returns a reference to the element stored in the specified …","Returns a mutable reference to the element stored in the …","Returns a reference to the element stored in the specified …","Returns a mutable reference to the element stored in the …","Get internal vertice slice","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","resultcondition<code>None</code><strong>if</strong> graph does not contain any vertices…","At any state of the iterator, you can check if a given, …","Count number of leaves in the graph, i.e. vertices with …","calculate the size of the longest shortest path <strong>starting </strong>…","Create new graph with <code>size</code> nodes and no edges","","","","","","","definition","Removes edge between nodes <em>index1</em> and <em>index2</em>","Reset small-world edge to its root state","Efficiently reuse the iterator, now possibly starting at a …","Rewire edges","","Shuffles adjacency list","Shuffles all adjacency lists","","","","","","Sort adjecency lists","Creates String which contains the topology of the network …","Example","Same as <code>to_dot_with_labels_from_contained</code> but with access …","","Calculates transitivity of graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calculate sizes of all binode connected components","returns number of vertices present in graph","Closely related (most of the time equal) to betweeness","","","","","","","","Contains the topology and <strong>implements functions</strong> for …","Used for accessing neighbor information from graph","","","","","","","","","","Efficiently create a complete graph with n nodes","return reference to what the NodeContainer contains","return mut reference to what the NodeContainer contains","","count number of neighbors, i.e. number of edges incident …","","","","","","","","Returns the argument unchanged.","","","returns id of container","","Calls <code>U::from(self)</code>.","check if vertex with <code>other_id</code> is adjacent to self","returns iterator over indices of neighbors","Create new instance with id","","","Sorting adjecency lists","","","","","","","","","","","","Iterator over additional data stored at each vertex in …","same as ContainedIter but mutableIterator over mutable …","contains generic slice iter","same as NContainedIter but mutableIterator over mutable …","Wrapper for iterators","Iterator over additional information stored at vertices …","same as NContainedIter but mutableIterator over mutable …","Iterator over each vertex directly connected with start …","Iterator over additional information + indices stored at …","contains iter from sw implementation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Create new <code>IterWrapper</code> from generic slice iterator","Create new <code>IterWrapper</code> from <code>SwEdgeIterNeighbors</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Histogram for binning <code>f32</code> - alias for <code>HistogramFloat&lt;f32&gt;</code>","Histogram for binning <code>f64</code> - alias for <code>HistogramFloat&lt;f64&gt;</code>","Histogram for binning <code>i128</code> - alias for …","Histogram for binning <code>i16</code> - alias for …","Histogram for binning <code>i32</code> - alias for …","Histogram for binning <code>i64</code> - alias for …","Histogram for binning <code>i8</code> - alias for <code>AtomicHistogramIntiu8&gt;</code>","Histogram for binning <code>isize</code> - alias for …","Histogram for binning <code>u128</code> - alias for …","Histogram for binning <code>u16</code> - alias for …","Histogram for binning <code>u32</code> - alias for …","Histogram for binning <code>u64</code> - alias for …","Histogram for binning <code>u8</code> - alias for <code>AtomicHistogramInt&lt;u8&gt;</code>","Histogram for binning <code>usize</code> - alias for …","Implements histogram","Generic Histogram struct","Generic Histogram for integer types","trait used for mapping values of arbitrary type <code>T</code> to bins…","use base 10","use base e","Binary search failed - PartialOrd::partial_cmp returned …","<code>original_hist.borders_clone()</code> failed","Something went wrong wile casting!","check refine has to be at least 1","RGB value","Use a CubeHelix palette","Implements color palett from …","you tried to combine heatmaps of different Dimensions","Dimensions do not match!","Does not specify a terminal","Histogram vector needs to contain at least one entry.","Nothing to be glued, glue interval list was empty","Unable to perform operation on empty slice","You tried to pass an empty slice","Traits for quantities that all Entropic simulations have","Helper trait, so that you have to type less","trait to request the current energy from a Entropic …","trait to request a reference to the current (state of the) …","Error states, that entropic sampling, or the creation of …","trait to request the current histogram from a Entropic …","Entropic sampling made easy","Entropic sampling made easy","Use EpsLatex as terminal in gnuplot","Still Gathering Statistics, this is only an estimate!","Still Gathering Statistics, this is only an estimate!","Enum used internally","construct the labels","Possible errors that can occur during gluing together …","Glued together probability","Result of glueing","Result of glueing. See Glued","For labeling the gnuplot plots axis","defines presets for different color palettes","Defines gnuplot point","Settings for gnuplot","Options for choosing gnuplot Terminal","Access internal random number generator","Helper trait for efficient calculations in other …","Errors of Heatmap","Heatmap","Heatmap with mean of y-axis","Shorthand for HeatmapUsize","Heatmap","Heatmap with mean of y-axis","Each histogram needs to have <strong>at least</strong> two bins. Though …","Possible Errors of the traits <code>Histogram</code> and <code>HistogramVal</code>","Histogram for binning <code>f32</code> - alias for <code>HistogramFloat&lt;f32&gt;</code>","Histogram for binning <code>f64</code> - alias for <code>HistogramFloat&lt;f64&gt;</code>","Histogram for binning <code>i128</code> - alias for <code>HistogramInt&lt;i128&gt;</code>","Histogram for binning <code>i128</code> - alias for <code>HistogramFast&lt;i128&gt;</code>","Histogram for binning <code>i16</code> - alias for <code>HistogramInt&lt;i16&gt;</code>","Histogram for binning <code>i16</code> - alias for <code>HistogramFast&lt;i16&gt;</code>","Histogram for binning <code>i32</code> - alias for <code>HistogramInt&lt;i32&gt;</code>","Histogram for binning <code>i32</code> - alias for <code>HistogramFast&lt;i32&gt;</code>","Histogram for binning <code>i64</code> - alias for <code>HistogramInt&lt;i64&gt;</code>","Histogram for binning <code>i64</code> - alias for <code>HistogramFast&lt;i64&gt;</code>","Histogram for binning <code>i8</code> - alias for <code>HistogramIntiu8&gt;</code>","Histogram for binning <code>i8</code> - alias for <code>HistogramFastiu8&gt;</code>","Histogram for binning <code>isize</code> - alias for <code>HistogramInt&lt;isize&gt;</code>","Histogram for binning <code>isize</code> - alias for …","Histogram for binning <code>u128</code> - alias for <code>HistogramInt&lt;u128&gt;</code>","Histogram for binning <code>u128</code> - alias for <code>HistogramFast&lt;u128&gt;</code>","Histogram for binning <code>u16</code> - alias for <code>HistogramInt&lt;u16&gt;</code>","Histogram for binning <code>u16</code> - alias for <code>HistogramFast&lt;u16&gt;</code>","Histogram for binning <code>u32</code> - alias for <code>HistogramInt&lt;u32&gt;</code>","Histogram for binning <code>u32</code> - alias for <code>HistogramFast&lt;u32&gt;</code>","Histogram for binning <code>u64</code> - alias for <code>HistogramInt&lt;u64&gt;</code>","Histogram for binning <code>u64</code> - alias for <code>HistogramFast&lt;u64&gt;</code>","Histogram for binning <code>u8</code> - alias for <code>HistogramInt&lt;u8&gt;</code>","Histogram for binning <code>u8</code> - alias for <code>HistogramFast&lt;u8&gt;</code>","Histogram for binning <code>usize</code> - alias for <code>HistogramInt&lt;usize&gt;</code>","Histogram for binning <code>usize</code>- alias for <code>HistogramFast&lt;usize&gt;</code>","Implements histogram","Used to get a histogram, which contains the smaller …","Faster version of HistogramInt for Integers","Generic Histogram struct","Generic Histogram for integer types","Distance metric for how far a value is from a valid …","Your Interval is to large to sample in a resonable amound …","trait used for mapping values of arbitrary type <code>T</code> to bins…","histograms must have at least two bins - everything else …","m_beta cannot be infinitiy or minus infinity!","Step limit exceeded without finding valid starting point","Trait for comparing two intervals","Nothing can hit the bin! (left &gt;= right?)","bestof has to be at least 1 and at most the number of …","You are trying to have a <code>min_best_of_count</code> that is  larger …","Posible reasons","log_f has to fullfill 0.0 &lt; log_f &lt; 10.0","<code>log_f_threshold</code>can never be negative or zero! it also …","<code>trial_step_min &lt;= trial_step_max</code> has to be true","Invalid trial step. Is your max_step smaller than your …","Energy function for current state of ensemble returns None","Could be NAN, INFINITY or similar","source (<code>WangLandauAdaptive</code>) was in an invalid state","use labels ","Type returned by <code>self.to_le_bytes()</code>.  Depends on how many …","There is no interval that is “more left” then this one","The length of the histogram vector has to be equal to the …","Length of histogram vector and ensemble vector has to be …","Which LogBase is being used/should be used?","Create a markov chain by doing markov steps","short for <code>Metropolis&lt;E, R, S, Res, f32&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, f64&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i128&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i16&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i32&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i64&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i8&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, isize&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u128&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u16&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u32&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u64&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u8&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, usize&gt;</code>","Create a metropolis simulation","Errors encountered during Metropolis Algorithm","Cannot create requested interval with  bins, that all have …","Invalid nan encountered","No negative threshold value allowed","log_f_threshold must not be negative","A histogram without any bins does not make sense!","The intervals need to overlap, otherwise no gluing can …","All values inside the initial guess have to be finite","The threshold cannot be subnormal","The threshold for <code>log_f</code> needs to be a normal number.That …","None of the above","Still in the process of gathering statistics Not enough to …","Still in the process of gathering statistics Not enough to …","you have to call one of the","Glue interval and intervals to be glued do not match","Invalid value","Overflow occured,","Use pdf as gnuplot terminal","A color palette in RGB space","Use preset HSV palette","Use preset RGB palette, i.e., the  default palette of …","Define a palette in RGB space","Short for ReplicaExchangeEntropicSampling","Walker for Replica exchange entropic sampling","Use 1/T approachrefine each step by: …","Using original wang landau, i.e.,  refine every time when …","Struct used for entropic sampling with replica exchanges","Efficient replica exchange Wang landau","Use this to create a replica exchange wang landau …","Result of the gluing","Short for <code>ReplicaExchangeWangLandau</code>,  which you can look …","Short for <code>ReplicaExchangeWangLandauBuilder</code>","Errors","Errors encountered during the creation of a Rewl struct (<strong>R</strong>…","Walker for Replica exchange Wang Landau","There is no interval that is “more right” then this one","Unable to seed random number generator ","Possible errors when setting initial guess","For easy sampling of your ensemble","","Underflow occured","which unsigned type corresponds to this type?","Error while casting to usize","Traits for quantities that all Wang Landau simulations have","The 1/t Wang Landau approach comes from this paper","Adaptive WangLandau 1/t","Helper trait, so that you have to type less","trait to request the current energy from a WangLandau …","trait to request a reference to the current (state of the) …","List of possible errors","trait to request the current histogram from a WangLandau …","Look at the paper","An Error while calculating the index of the x coordinate","An Error while calculating the index of the y coordinate","The threshold is not allowed to be zero","rate/fraction of acceptance","rate/fraction of acceptance","add a color to the palette","Add extra information to your Replica Exchange entropic …","Get bin difference between histograms","","Get alignment slice","check if any bin was not hit yet","check if any bin was not hit yet","Calculate color from gray value.Gray value should be in …","Calculate the probability density function from …","Results of the simulation","Results of the simulation","Returns the current base of the contained logarithms","Currently used best of","How many bins the histogram contains","How many bins the histogram contains","","","","","","Iterate over all bins","Iterate over all bins","Iterator over all the bins","Iterate over all bins","Iterate over all bins","Iterator over all the bins","Iterator over all the bins","Iterator over all the bins","Iterator over all the bins","Iterator over all the bins","counts how many bins of the heatmap where hit at least once","counts how many bins of the heatmap where never hit","The blue part","Bootstrap resampling functions","returns reduced value + estimated error (as sqrt of …","Similar to bootstrap but for stuff that implements <code>Copy</code>. …","similar to <code>self.borders_clone</code> but does not allocate memory","similar to <code>self.borders_clone</code> but does not allocate memory","similar to <code>self.borders_clone</code> but does not allocate memory","similar to <code>self.borders_clone</code> but does not allocate memory","This are the bin borders","binning borders","binning borders","consider using <code>self.borders()</code>","","Creates a vector containing borders","","consider using <code>self.borders()</codehange, which markov chain is used for the metropolis …","Change step size for markov chain of walkers","Change step size for markov chain of walkers","Change sweep size for markov chain of walkers","Change sweep size for markov chain of walkers","Sanity check","Sanity check","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Choose the color for the point","Color of the point","“combine” heatmaps","“combine” heatmaps","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update heatmap","Update heatmap","update the heatmap","update the heatmap","<code>self.hist[index] += 1</code>, <code>Err()</code> if <code>index</code> out of bounds","<code>self.hist[index] += 1</code>, <code>Err()</code> if <code>index</code> out of bounds","Update Heatmap","Update Heatmap","update the heatmap","<code>self.hist[index] += count</code>, <code>Err()</code> if <code>index</code> out of bounds","<code>self.hist[index] += count</code>, <code>Err()</code> if <code>index</code> out of bounds","","","","Uses SeqCst","Uses SeqCst","count val. <code>Ok(index)</code>, if inside of hist, <code>Err(_)</code> if val is …","count val. <code>Ok(index)</code>, if inside of hist, <code>Err(_)</code> if val is …","","","","","","returns stored value for the <code>counter</code>, i.e., where to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Results of the simulation","TODO Documentation","Calculate the probability density function from …","Results of the simulation","Results of the simulation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calculates some sort of absolute distance to the nearest …","calculates some sort of absolute distance to the nearest …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a histogram, which encapsulates the histograms …","","Returns encapsulating Histogram","returns the last accepted <code>Energy</code> calculated <code>None</code> if no …","returns the last accepted <code>Energy</code> calculated <code>None</code> if no …","","","Energy of ensemble","Energy of ensemble","Energy of ensemble","Energy of ensemble","returns stored value for <code>current_energy</code>","Returns reference of current energy","Returns reference of current energy","Returns current energy","Returns current energy","Returns current energy","return reference to current state of ensemble","return reference to current state of ensemble","","","","Current state of the Ensemble","Current state of the Ensemble","","returns reference to ensemble","Iterator over ensembles","Iterator over ensembles","Mutable iterator over ensembles","Mutable iterator over ensembles","mutable reference to current state","returns mutable reference to ensemble","","","","","returns mutable reference to ensemble","Read access to the ensembles","For using entropic sampling after a wang landau simulation","Entropic sampling","Entropic sampling","Entropic sampling using an accumulating markov step","Entropic sampling using an accumulating markov step","Entropic sampling","Entropic sampling","Entropic sampling","Entropic sampling","Entropic sampling using an accumulating markov step","Entropic sampling using an accumulating markov step","Entropic sampling","Entropic sampling","Entropic step","Entropic step","Accumulating entropic step","Entropic sampling using an accumulating markov step","Entropic step","Entropic step","","","checks if the range of two Histograms is equal, i.e., if …","Estimate accept/reject statistics","Estimate accept/reject statistics","Contains examples","Read access to your extra information","Write access to your extra information","Fraction of finished intervals","Is the simulation has finished the process of rebuilding …","Is the interval in a valid starting configuration?","get the left most border (inclusive)","get the left most border (inclusive)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write hex representation to a fmt writer","write string to define this palette in gnuplot to fmt …","Fraction of steps accepted since the statistics were reset …","Fraction of steps accepted since the statistics were reset …","Calculate, which fraction of steps were accepted","Calculate, which fraction of steps were accepted","Fraction of steps accepted since the creation of <code>self</code>","Fraction of steps accepted since the creation of <code>self</code>","Tracks progress","Calculate, which fraction of steps were rejected","Calculate, which fraction of steps were rejected","Should there be a frame around the point ? This is good …","should the point have a frame?","Which color should the frame have?","Which color should the frame be?","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Create a builder to create a replica exchange wang landau …","Create a builder to create a replica exchange wang landau …","new rewl builder","Create new GnuplotAxis::Labels","from little endian. See implementation for integers in the …","Similar to <code>from_labels</code>","Creates Entropic from a <code>WangLandauAdaptive</code> state","Creates EntropicSamplingAdaptive from a <code>WangLandauAdaptive</code> …","Creates Entropic from a <code>WangLandauAdaptive</code> state","Builder pattern - set gamma","Returns value stored in the heatmap at specified  …","Returns value stored in the heatmap at specified  …","convert val to the respective histogram index","convert val to the respective histogram index","","None if not inside Hist covered zone","","None if not inside Hist covered zone","","read access to your ensembles","read access to your ensembles","mut access to your ensembles","mut access to your ensembles","read access to internal histogram","read access to internal histogram","Get Ids","Get entry for legend","row of the heatmap","row of the heatmap","row of the heatmap","Get the point size","Get step size for markov chain of walkers","Get step size for markov chain of walkers","Get sweep size for markov chain of walkers","Get sweep size for markov chain of walkers","currently set title","Returns value stored in the heatmap at specified  …","Returns value stored in the heatmap at specified  …","Glue together overlapping intervals of either entropic …","Combine multiple WangLandau intervals to get the …","Combine multiple WangLandau intervals to get the …","Returns Slice which represents the glued logarithmic …","probably the result you want, i.e., what you were …","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","The green part","Generate heatmaps. Create Gnuplot scripts to plot said …","Internal <code>HeatmapU</code>","Internal <code>HeatmapF64</code>","returns heatmap","returns heatmap","Get index of heatmap corresponding to a coordinate","Normalizes self","returns normalized heatmap","returns (column wise) normalized heatmap","returns (row wise) normalized heatmap","returns height of the heatmap","returns height of the heatmap","Returns reference to current height Histogram","Returns reference to current height Histogram","Returns reference to current height Histogram","returns current histogram","the created histogram","the created histogram","returns current histogram","","","","","","","","","Return current state of histogram","","Return current state of histogram","Reference to internal histogram","Reference to internal histogram","Traits for implementing histograms for Wang Landau or …","read access to the internal histograms used by the walkers","Read access to histograms","read access to the internal histograms used by the walkers","#Set hue intensity. Builder pattern Valid values are 0.0 &lt;…","Returns id of walker","Returns id of walker","Increment hit count of bin","Increment hit count","Increment hit count","Increment hit count","Increment hit count of bin","Increment hit count","Increment hit count","Increment hit count","Increment hit count","Increment hit count","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find a valid starting Point","Find a valid starting Point","Find a valid starting Point","Find a valid starting Point","Find a valid starting Point","Find a valid starting Point","Distance metric for how far a value is from a valid …","","","","","","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Returns the length of the interval","Returns the length of the interval","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts <code>self</code> into the corresponding enum of <code>GnuplotPallet</code>","Converts <code>self</code> into the corresponding enum of <code>GnuplotPallet</code>","returns normalized heatmap","returns (column wise) normalized heatmap","returns (column wise) normalized heatmap","returns (row wise) normalized heatmap","Returns internal ensemble, histogram and Rng","Convert into Rees","Convert into Rees","Checks wang landau threshold","Checks wang landau threshold","Is the simulation finished?","Checks threshold","is the simulation finished?","Check if <code>self</code> is initialized","Check if <code>self</code> is initialized","does a value correspond to a valid bin?","does a value correspond to a valid bin?","","","","","","true if self is <code>Refine1T</code> variantfalse otherwise","true if self is <code>RefineOriginal</code> variantfalse otherwise","Is the simulation in the process of rebuilding the …","Is the simulation in the process of rebuilding the …","returns largest value of factor log_f present in the …","Get left border, inclusive","Will compare leftest bin first. if they are equal: will …","","","","Index map","Change the legend entry","Current estimate of log10 of probability density","Old estimate of log10 of probability density","Current estimate of log10 of probability density","log10 of “probabilities” of the curves, you were …","Current (non normalized) estimate of ln(P(E))","Current (non normalized) estimate of ln(P(E))","","","","","Current non normalized estimate of the natural logarithm …","Old non normalized estimate of the natural logarithm of …","Current (non normalized) estimate of log_base(P(E))","Current (non normalized) estimate of log_base(P(E))","Current (non normalized) estimate of log10(P(E))","Current (non normalized) estimate of log10(P(E))","returns the (non normalized) log_density estimate …","returns the (non normalized) log_density estimate …","calculates the (non normalized) log_density estimate …","calculates the (non normalized) log_density estimate …","Current non normalized estimate of the natural logarithm …","get current value of log_f","","","Current (logarithm of) factor f","returns currently set threshold for log_f","","","Log_f factors of the walkers","Results of the simulation","Results of the simulation","Builder pattern - set low and high value","returns stored <code>m_beta</code> value (-β for metropolis)","Markov step","Accumulating markov step","Markov steps","Accumulating markov steps","Accumulating markov steps","Markov steps without return","Maximum of roundtrips","Largest possible markov step (<code>m_steps</code> of MarkovChain …","Largest possible markov step (<code>m_steps</code> of MarkovChain …","Get a mean vector","Get a mean vector","Iterate over the calculated mean","Iterate over the calculated mean","Internal slice for mean","Internal slice for mean","Result of the simulations!","Results of the simulation","Merge probability density of multiple rees simulations","For making a Metropolis simulation","Metropolis Simulation","Metropolis Simulation","Metropolis Simulation","Metropolis simulation","Metropolis simulation","Metropolis Simulation","Metropolis Simulation","Metropolis simulation","Minimum of roundtrips","Smallest possible markov step (<code>m_steps</code> of MarkovChain …","Smallest possible markov step (<code>m_steps</code> of MarkovChain …","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Returns current wang landau mode","","","Create a heatmap","Create a heatmap","New WangLandauAdaptive","Create a new WangLandau simulation","Create a new Historgram","Create a new histogram","Create a new interval","Create a new histogram","Create a new Historgram","Create a new Heatmap","Create new GnuplotAxis::FromValues","Create new, default, GnuplotSettings","Create a new color","Initialize Palette","Create a new instance of GnuplotPointSettings","Create a new Heatmap","Create color from an array","Create a new Metropolis struct - used for Metropolis …","Create a new Metropolis struct - used for Metropolis …","Create a new histogram","Create new histogram with inclusive borders","Create a new histogram","Create a new <code>ReplicaGlued&lt;Hist&gt;</code> instance without checking …","Normalize log10 probability density","Normalizes self","Normalizes self","opposite of <code>is_inside</code>","opposite of <code>is_inside</code>","","","","","","Get the number of intervals present","Get the number of intervals present","How many walkers are there in total?","partition the interval","","","","Builder pattern - set color palette","Color palette for heatmap","How many replica exchanges were proposed until now?","How many replica exchanges were proposed until now?","Randomizes self according to  model","Returns the range covered by the bins as a …","The red part","Entropic sampling using a replica exchange approach","Iterator over roundtrips done by REES","Refine the estimate of the probability density functions","Refine current probability density estimate","Calculates <code>self.log_density_refined</code> and uses that as …","Calculates <code>self.log_density_refined</code> and uses that as …","How many markov steps were rejected until now","How many markov steps were rejected until now","fraction of how many replica exchanges were accepted and …","fraction of how many replica exchanges were accepted and …","How many successful replica exchanges were performed until …","How many successful replica exchanges were performed until …","reset the histogram to zero","reset the histogram to zero","","","","","","Reset","Reset","resets the <code>counter</code> to 0","Builder pattern - set reverse","Replica exchange wang-landau","Iterate over the roundtrips done by the REWL","Calculate color from gray value. Gray value should be in …","Get right border, inclusive","Access RNG","","","","#Set rotation. Builder pattern Rotation in color space. …","Roundtrips","<code>samples_per_trial</code> - how often a specific step_size should …","get second last border from the rightshould be the same as …","get second last border from the rightshould be the same as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","How often to adjust <code>bestof_steps</code>?","set stored value for <code>current_energy</code>","Set the initial guess for the non-normalized probability …","Try to set the threshold. ","","","change the threshold of log_f","sets m_beta (minus beta). Is related to the temperature: …","Number of entropic steps to be performed","Number of entropic steps to be performed","change the <code>stepsize</code>returns err if you try to set stepsize …","sets m_beta according to m_beta = -1 / temperature","do the following <code>times</code> times:","do the following <code>times</code> times:","Perform the Replica exchange wang landau simulation","Perform the Replica exchange simulation","Perform the Replica exchange wang landau simulation","Perform the Replica exchange simulation","Builder pattern - set size of terminal","Choose the size of the point","Size of the terminal","Builder pattern - set start color","Number of entropic steps done until now","How many steps were performed until now?","How many entropic steps were performed until now?","Counter","Counter","","","Number of entropic steps done until now","Number of entropic steps done until now","What is the goal to reach?","Number of entropic steps to be performed","Number of entropic steps to be performed","Number of entropic steps to be performed","Smallest possible markov step (<code>m_steps</code> of MarkovChain …","return current <code>stepsize</code>","step size for markov steps","step size for markov steps","Change step sitze for markov steps","Change step sitze for markov steps","Access step sizes of individual intervals","Change step size of individual intervals","Return step threshold","Function called whenever the steps are accepted.","Function called whenever the steps are rejected.","Counter","Counter","Swap the extra vector","If you need to exchange the internal rng","","","","Sweep","Sweep","how many steps per sweep","how many steps per sweep","change how many steps per sweep are performed","change how many steps per sweep are performed","Accesss sweep size of individual intervals","Change sweep size of individual intervals","Change from Base 10 to Base E or the other way round","Builder pattern - set terminal","which terminal to use for gnuplot","Builder pattern - set title","title for gnuplot","convert color to array,","Turn into hex representation","to little endian. See implementation for integers in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","counts how often the heatmap was hit","counts how often the heatmap was hit","total number of entropic steps, that were accepted","total number of entropic steps, that were rejected","Counts how often the Heatmap was missed, i.e., you tried …","Counts how often the Heatmap was missed, i.e., you tried …","How many markov steps were performed in total?","How many steps were accepted until now?","How many steps were accepted until now?","","","","","How many markov steps were accepted in total?","How many steps were rejected until now?","How many steps were rejected until now?","","","","","How many markov steps were rejected in total?","Contains traits useful for sampling an ensemble like …","Use this to get a “flipped” heatmap","Use this to get a “flipped” heatmap","Use this to get a “flipped” heatmap","Use this to get a “flipped” heatmap","Add other histogram to selfses as stepsize: first entry of bestof. If bestof is …","","","","","","","","","","","","","","","","","","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","undo a markov step, return result-stateif you want to undo …","undo a markov, <strong>panic</strong> on invalid result statefor undoing …","Undo markov steps","Undo markov steps","Remove extra vector","returns Vector representing normalized heatmap","returns vector representing heatmap, normalized column wise","returns vector representing heatmap, normalized row wise","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Read access to internal rewl walkers","Returns internal walkers","Returns number of walkers per interval","Returns number of walkers per interval","Wang Landau Implementation","Wang Landau","Wang Landau","Wang Landau simulation","Wang Landau - efficient energy calculation","Wang Landau","Wang Landau","Which mode is this walker currently in?","Wang Landau Step","Wang Landau Step","Accumulating wang landau step","Wang Landau Step","Wang Landau Step","Wang Landau Step","Wang Landau","Wang Landau","Wang Landau Simulation","Wang Landau","Wang Landau","Wang Landau","returns width of the heatmap","returns width of the heatmap","Returns reference to current width Histogram","Returns reference to current width Histogram","Returns reference to current width Histogram","Write the result to a file","Write the ReplicaGlued in a human readable format","Write a heatmap with the given gnuplot Settings","Write hex representation to a io writer","Writes Information about the simulation to a file. E.g. …","Writes Information about the simulation to a file. E.g. …","","","","","write string to define this palette in gnuplot to io writer","Write the normalized probability density function","Write heatmap to file","Write heatmap to file","Set x_axis - See GnuplotAxis or try it out","how to format the labels of the x axis?","Builder pattern - set x_label","x label for gnuplot","Set y_axis - See GnuplotAxis or try it out","how to format the labels of the y axis?","Builder pattern - set y_label","y label for gnuplot","","","this are the labels","maximum value for axis labels","minimum value for axis labels","number of tics, should be at least 2","","","","","","","","","returns reduced value + estimated error (as sqrt of …","Similar to bootstrap but for stuff that implements <code>Copy</code>. …","Traits for quantities that all Entropic simulations have","Helper trait, so that you have to type less","trait to request the current energy from a Entropic …","trait to request a reference to the current (state of the) …","Error states, that entropic sampling, or the creation of …","trait to request the current histogram from a Entropic …","Entropic sampling made easy","Entropic sampling made easy","Still Gathering Statistics, this is only an estimate!","You are trying to have a <code>min_best_of_count</code> that is  larger …","Posible reasons","Invalid trial step. Is your max_step smaller than your …","source (<code>WangLandauAdaptive</code>) was in an invalid state","Still in the process of gathering statistics Not enough to …","returns the last accepted <code>Energy</code> calculated <code>None</code> if no …","return reference to current state of ensemble","returns mutable reference to ensemble","Calculate, which fraction of steps were accepted","Calculate, which fraction of steps were rejected","returns current histogram","Checks wang landau threshold","Current (non normalized) estimate of ln(P(E))","Current (non normalized) estimate of log_base(P(E))","Current (non normalized) estimate of log10(P(E))","Counter","What is the goal to reach?","Counter","How many steps were accepted until now?","How many steps were rejected until now?","Writes Information about the simulation to a file. E.g. …","","Example Coin flips","Result of flipping a coin","Result of markov Step","A sequence of Coin flips. Contains random Number generator","The result is Head","The result is Tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Count how often <code>Head</code> occurs in the Coin flip sequence","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform a markov step","Only implemented for testcases","Only implemented for testcases","Count many times <code>Head</code> occured in a row","Create new coin flip sequence","","","","","Only implemented for testcases","Only implemented for testcases","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Turn Coin around, i.e., invert CoinFlip","","","","","","Only implemented for testcases","Only implemented for testcases","Calculate the head count, if a previouse head count of the …","","","","use base 10","use base e","Binary search failed - PartialOrd::partial_cmp returned …","<code>original_hist.borders_clone()</code> failed","Nothing to be glued, glue interval list was empty","Possible errors that can occur during gluing together …","Glued together probability","Which LogBase is being used/should be used?","The intervals need to overlap, otherwise no gluing can …","Glue interval and intervals to be glued do not match","Result of the gluing","Calculate the probability density function from …","This are the bin borders","Module for numeric derivatives","Calculate the probability density function from …","Combine multiple WangLandau intervals to get the …","Combine multiple WangLandau intervals to get the …","probably the result you want, i.e., what you were …","Index map","log10 of “probabilities” of the curves, you were …","Normalize log10 probability density","How many markov steps were performed in total?","How many markov steps were accepted in total?","How many markov steps were rejected in total?","","Calculates the derivative of a Vector","five-point stencil derivative method ","RGB value","Use a CubeHelix palette","Implements color palett from …","you tried to combine heatmaps of different Dimensions","Does not specify a terminal","Use EpsLatex as terminal in gnuplot","construct the labels","For labeling the gnuplot plots axis","defines presets for different color palettes","Defines gnuplot point","Settings for gnuplot","Options for choosing gnuplot Terminal","Errors of Heatmap","Heatmap","Heatmap with mean of y-axis","Shorthand for HeatmapUsize","Heatmap","Heatmap with mean of y-axis","use labels ","Use pdf as gnuplot terminal","A color palette in RGB space","Use preset HSV palette","Use preset RGB palette, i.e., the  default palette of …","Define a palette in RGB space","An Error while calculating the index of the x coordinate","An Error while calculating the index of the y coordinate","The blue part","Color of the point","should the point have a frame?","Which color should the frame be?","The green part","Get index of heatmap corresponding to a coordinate","Color palette for heatmap","The red part","Size of the terminal","which terminal to use for gnuplot","title for gnuplot","how to format the labels of the x axis?","x label for gnuplot","how to format the labels of the y axis?","y label for gnuplot","this are the labels","maximum value for axis labels","minimum value for axis labels","number of tics, should be at least 2","","","","","","","Histogram for binning <code>f32</code> - alias for <code>HistogramFloat&lt;f32&gt;</code>","Histogram for binning <code>f64</code> - alias for <code>HistogramFloat&lt;f64&gt;</code>","Histogram for binning <code>i128</code> - alias for …","Histogram for binning <code>i16</code> - alias for …","Histogram for binning <code>i32</code> - alias for …","Histogram for binning <code>i64</code> - alias for …","Histogram for binning <code>i8</code> - alias for <code>AtomicHistogramIntiu8&gt;</code>","Histogram for binning <code>isize</code> - alias for …","Histogram for binning <code>u128</code> - alias for …","Histogram for binning <code>u16</code> - alias for …","Histogram for binning <code>u32</code> - alias for …","Histogram for binning <code>u64</code> - alias for …","Histogram for binning <code>u8</code> - alias for <code>AtomicHistogramInt&lt;u8&gt;</code>","Histogram for binning <code>usize</code> - alias for …","Implements histogram","Generic Histogram struct","Generic Histogram for integer types","trait used for mapping values of arbitrary type <code>T</code> to bins…","Something went wrong wile casting!","Unable to perform operation on empty slice","Helper trait for efficient calculations in other …","Possible Errors of the traits <code>Histogram</code> and <code>HistogramVal</code>","Histogram for binning <code>f32</code> - alias for <code>HistogramFloat&lt;f32&gt;</code>","Histogram for binning <code>f64</code> - alias for <code>HistogramFloat&lt;f64&gt;</code>","Histogram for binning <code>i128</code> - alias for <code>HistogramInt&lt;i128&gt;</code>","Histogram for binning <code>i128</code> - alias for <code>HistogramFast&lt;i128&gt;</code>","Histogram for binning <code>i16</code> - alias for <code>HistogramInt&lt;i16&gt;</code>","Histogram for binning <code>i16</code> - alias for <code>HistogramFast&lt;i16&gt;</code>","Histogram for binning <code>i32</code> - alias for <code>HistogramInt&lt;i32&gt;</code>","Histogram for binning <code>i32</code> - alias for <code>HistogramFast&lt;i32&gt;</code>","Histogram for binning <code>i64</code> - alias for <code>HistogramInt&lt;i64&gt;</code>","Histogram for binning <code>i64</code> - alias for <code>HistogramFast&lt;i64&gt;</code>","Histogram for binning <code>i8</code> - alias for <code>HistogramIntiu8&gt;</code>","Histogram for binning <code>i8</code> - alias for <code>HistogramFastiu8&gt;</code>","Histogram for binning <code>isize</code> - alias for <code>HistogramInt&lt;isize&gt;</code>","Histogram for binning <code>isize</code> - alias for …","Histogram for binning <code>u128</code> - alias for <code>HistogramInt&lt;u128&gt;</code>","Histogram for binning <code>u128</code> - alias for <code>HistogramFast&lt;u128&gt;</code>","Histogram for binning <code>u16</code> - alias for <code>HistogramInt&lt;u16&gt;</code>","Histogram for binning <code>u16</code> - alias for <code>HistogramFast&lt;u16&gt;</code>","Histogram for binning <code>u32</code> - alias for <code>HistogramInt&lt;u32&gt;</code>","Histogram for binning <code>u32</code> - alias for <code>HistogramFast&lt;u32&gt;</code>","Histogram for binning <code>u64</code> - alias for <code>HistogramInt&lt;u64&gt;</code>","Histogram for binning <code>u64</code> - alias for <code>HistogramFast&lt;u64&gt;</code>","Histogram for binning <code>u8</code> - alias for <code>HistogramInt&lt;u8&gt;</code>","Histogram for binning <code>u8</code> - alias for <code>HistogramFast&lt;u8&gt;</code>","Histogram for binning <code>usize</code> - alias for <code>HistogramInt&lt;usize&gt;</code>","Histogram for binning <code>usize</code>- alias for <code>HistogramFast&lt;usize&gt;</code>","Implements histogram","Used to get a histogram, which contains the smaller …","Faster version of HistogramInt for Integers","Generic Histogram struct","Generic Histogram for integer types","Distance metric for how far a value is from a valid …","Your Interval is to large to sample in a resonable amound …","trait used for mapping values of arbitrary type <code>T</code> to bins…","Trait for comparing two intervals","Nothing can hit the bin! (left &gt;= right?)","Could be NAN, INFINITY or similar","Type returned by <code>self.to_le_bytes()</code>.  Depends on how many …","Cannot create requested interval with  bins, that all have …","A histogram without any bins does not make sense!","Invalid value","Overflow occured,","Underflow occured","which unsigned type corresponds to this type?","Error while casting to usize","Get bin difference between histograms","check if any bin was not hit yet","check if any bin was not hit yet","How many bins the histogram contains","How many bins the histogram contains","binning borders","binning borders","<code>self.hist[index] += 1</code>, <code>Err()</code> if <code>index</code> out of bounds","<code>self.hist[index] += 1</code>, <code>Err()</code> if <code>index</code> out of bounds","<code>self.hist[index] += count</code>, <code>Err()</code> if <code>index</code> out of bounds","<code>self.hist[index] += count</code>, <code>Err()</code> if <code>index</code> out of bounds","count val. <code>Ok(index)</code>, if inside of hist, <code>Err(_)</code> if val is …","count val. <code>Ok(index)</code>, if inside of hist, <code>Err(_)</code> if val is …","calculates some sort of absolute distance to the nearest …","calculates some sort of absolute distance to the nearest …","Create a histogram, which encapsulates the histograms …","get the left most border (inclusive)","get the left most border (inclusive)","from little endian. See implementation for integers in the …","convert val to the respective histogram index","convert val to the respective histogram index","the created histogram","the created histogram","Distance metric for how far a value is from a valid …","does a value correspond to a valid bin?","does a value correspond to a valid bin?","Will compare leftest bin first. if they are equal: will …","opposite of <code>is_inside</code>","opposite of <code>is_inside</code>","partition the interval","reset the histogram to zero","reset the histogram to zero","get second last border from the rightshould be the same as …","get second last border from the rightshould be the same as …","to little endian. See implementation for integers in the …","m_beta cannot be infinitiy or minus infinity!","Energy function for current state of ensemble returns None","short for <code>Metropolis&lt;E, R, S, Res, f32&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, f64&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i128&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i16&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i32&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i64&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i8&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, isize&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u128&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u16&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u32&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u64&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u8&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, usize&gt;</code>","Create a metropolis simulation","Errors encountered during Metropolis Algorithm","Invalid nan encountered","Short for ReplicaExchangeEntropicSampling","Walker for Replica exchange entropic sampling","Struct used for entropic sampling with replica exchanges","Merge probability density of multiple rees simulations","Merge probability density of multiple rees simulations","Merge probability density of multiple rees simulations","Merge probability density of multiple rees simulations","Merge probability density of multiple rees simulations","Merge probability density of multiple rees simulations","Merge probability density of multiple rees simulations","Histogram vector needs to contain at least one entry.","You tried to pass an empty slice","Enum used internally","Result of glueing","Result of glueing. See Glued","Each histogram needs to have <strong>at least</strong> two bins. Though …","histograms must have at least two bins - everything else …","There is no interval that is “more left” then this one","The length of the histogram vector has to be equal to the …","Length of histogram vector and ensemble vector has to be …","No negative threshold value allowed","log_f_threshold must not be negative","The threshold cannot be subnormal","The threshold for <code>log_f</code> needs to be a normal number.That …","None of the above","Efficient replica exchange Wang landau","Use this to create a replica exchange wang landau …","Short for <code>ReplicaExchangeWangLandau</code>,  which you can look …","Short for <code>ReplicaExchangeWangLandauBuilder</code>","Errors","Errors encountered during the creation of a Rewl struct (<strong>R</strong>…","Walker for Replica exchange Wang Landau","There is no interval that is “more right” then this one","Unable to seed random number generator ","","The threshold is not allowed to be zero","Results of the simulation","TODO Documentation","Results of the simulation","Results of the simulation","Merge probability density of multiple rewl simulations","Results of the simulation","Results of the simulation","Merge probability density of multiple rewl simulations","Results of the simulation","Result of the simulation","","Access internal random number generator","Create a markov chain by doing markov steps","For easy sampling of your ensemble","Markov step","Accumulating markov step","Markov steps","Accumulating markov steps","Accumulating markov steps","Markov steps without return","Randomizes self according to  model","Access RNG","do the following <code>times</code> times:","do the following <code>times</code> times:","Function called whenever the steps are accepted.","Function called whenever the steps are rejected.","If you need to exchange the internal rng","undo a markov step, return result-stateif you want to undo …","undo a markov, <strong>panic</strong> on invalid result statefor undoing …","Undo markov steps","Undo markov steps","check refine has to be at least 1","Dimensions do not match!","Still Gathering Statistics, this is only an estimate!","Step limit exceeded without finding valid starting point","bestof has to be at least 1 and at most the number of …","log_f has to fullfill 0.0 &lt; log_f &lt; 10.0","<code>log_f_threshold</code>can never be negative or zero! it also …","<code>trial_step_min &lt;= trial_step_max</code> has to be true","All values inside the initial guess have to be finite","Still in the process of gathering statistics Not enough to …","you have to call one of the","Use 1/T approachrefine each step by: …","Using original wang landau, i.e.,  refine every time when …","Possible errors when setting initial guess","Traits for quantities that all Wang Landau simulations have","The 1/t Wang Landau approach comes from this paper","Adaptive WangLandau 1/t","Helper trait, so that you have to type less","trait to request the current energy from a WangLandau …","trait to request a reference to the current (state of the) …","List of possible errors","trait to request the current histogram from a WangLandau …","Look at the paper","returns the last accepted <code>Energy</code> calculated <code>None</code> if no …","return reference to current state of ensemble","mutable reference to current state","Calculate, which fraction of steps were accepted","Calculate, which fraction of steps were rejected","returns current histogram","Checks wang landau threshold","Current (non normalized) estimate of ln(P(E))","Current (non normalized) estimate of log_base(P(E))","Current (non normalized) estimate of log10(P(E))","get current value of log_f","returns currently set threshold for log_f","Returns current wang landau mode","Try to set the threshold. ","Counter","Counter","How many steps were accepted until now?","How many steps were rejected until now?","Writes Information about the simulation to a file. E.g. …","","an edge was added","","an error occured. Did you try to remove steps in the wrong …","","nothing was changed","an edge was removed","Implements a special Ensemble","Type definiton for convinience. This is used to implement  …","Used for accessing neighbor information from graph","Returned by markov steps","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","return reference to what the NodeContainer contains","return mut reference to what the NodeContainer contains","","","","","count number of neighbors, i.e. number of edges incident …","","","","","","","","","","","Euclidean distance between two vertices","Calculates the distance between two nodes","Euclidean distance between two vertices","","","","","","","Calculates probability","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get x coordinate","Get y coordinate","","returns id of container","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","check if vertex with <code>other_id</code> is adjacent to self","","","","returns iterator over indices of neighbors","","","Create new instance with id","Generate a new Spacial ensemble with ","","","Randomizes the edges according to Er probabilities","","","","Sorting adjecency lists","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","panics if <code>step</code> is error, or cannot be undone The latter …","","","","","","","an edge was added","","","an error occured. Did you try to remove steps in the wrong …","nothing was changed","an edge was removed","Returned by markov steps","","returned by mc step of small world ensemble","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Can not add edge twice","A GraphError occurred","ERROR adjecency list invalid?","Nothing happend","old edge: (Reset.0, Reset.1), new edge (Reset.0, Reset.2)","old edge: (Rewire.0, Rewire.1), new edge (Rewire.0, …","Returned by markov steps","Implements small-world graph ensemble","","","","","","","","","","","","","","","","","","","","","","","","retuns <code>GenericGraph::contained_iter_neighbors_mut</code>otherwise …","","","","","","","","","","","","","","","","","draws random edge <code>(i0, i1)</code>edge rooted at <code>i0</code>uniform …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","checks if self is <code>Nothing</code> variant","checks if self is <code>Nothing</code> or <code>BlockedByExistingEdge</code>","valid states:","Markov step","<strong>Experimental!</strong> Connect the connected components","Initialize","Initialize","result is equal to <code>!self.is_nothing_or_blocked()</code>","returns rewiring probability","Randomizes the edges according to small-world model","Access RNG","","","set new value for rewiring probabilityNote","Sort adjecency lists","Swap random number generator","","","","","","","","","","","","","","","","","","","","","Undo a markov step","Undo a Monte Carlo step","","","","","","","","","","Used for accessing neighbor information from graph","Edge of small world network","Iterator over indices stored in adjecency list","specific <code>GenericGraph</code> used for small-world ensemble","","","","","","","","","","","","","","","","","","","","","","","","","","return reference to what the AdjContainer contains","return mut reference to what the AdjContainer contains","","","","How many long ranging edges are there in the Graph?","How many nodes have long ranging edges?","Count how many root edges are contained","count number of neighbors, i.e. number of edges incident …","","","","","","","","","","","","","","","Fraction of long ranging edges in the Graph?","Fraction of nodes which have long ranging edges","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","returns <code>Some(first element from the adjecency List)</code> or <code>None</code>","returns id of container","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","check if vertex with <code>other_id</code> is adjacent to self","Is the edge at its root position?","checks root edge it it is long ranging","Is the edge a root edge?","Iterate over the actual edges used underneath. You will …","","returns iterator over indices of neighbors","returns iterator over indices of neighbors","Create new instance with id","","","","Reset small-world edge to its root state","Rewire edges","","","Shuffles adjacency list","","Sorting adjacency lists","Where does the edge point to, i.e., to which node does it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines methods all adjecency containers should have such …","Get the adjacency list of a AdjContainer","Trait for types that have an underlying graph with nodes …","Trait, which enables you to write a dot file","Trait, which enables you to write a dot file","ERROR 404: Edge not found ;)","somehow, the existing of the edge is a problem","Error messages","Collection of Graph iterators","Collection mut Graph iterators","Access internal random number generator","","Create a markov chain by doing markov steps","Trait for measuring topological properties of a Graph","What every node should be able to do","intermediate trait used for trait boundsif feature “…","For easy sampling of your ensemble","unify graph ensembles in a trait","access additional information at index","mutable access to additional information at index","calculates the average degree of the graph","returns <code>Iterator</code>","","","","","","","","","","compute sizes of all <em>connected components</em>","return reference to what the AdjContainer contains","get iterator over additional information stored at each …","get iterator over mutable additional information stored at …","iterate over additional information of neighbors of vertex …","iterate over mutable additional information of neighbors …","iterate over mutable additional information of neighbors …","iterate over additional information of neighbors of vertex …","return mut reference to what the AdjContainer contains","get iterator over AdjContainer in order of the indices…","iterate over additional information of neighbors of vertex …","","count number of neighbors, i.e. number of edges incident …","returns number of vertices adjacent to vertex <code>index</code><code>None</code> if …","","","","returns <code>Iterator</code>","returns <code>Iterator</code>","returns <code>None</code> <strong>if</strong> graph not connected <strong>or</strong> does not contain …","create dot file with empty labelsdefault implementation …","create dot file with empty labelsdefault implementation …","create a dot representationyou can use <code>T</code> (usually …","create a dot representationyou can use <code>T</code> (usually …","create a dot representationyou can use the indices and <code>T</code> …","create a dot representationyou can use the information of …","create a dot representationyou can use the information of …","create a dot representationyou can use the indices and the …","use function <code>f</code> to create labels depending on the indexfor …","same as <code>self.dot()</code>, but returns a String instead","same as <code>self.dot()</code>, but returns a String instead","same as <code>self.dot_from_contained</code> but returns String","same as <code>self.dot_from_contained</code> but returns String","same as <code>self.dot_from_contained</code> but returns String instead","same as <code>self.dot_from_contained</code> but returns String instead","same as <code>self.dot_from_container</code> but returns String instead","same as <code>self.dot_from_container</code> but returns String instead","same as <code>self.dot_string_from_container_index</code> but returns …","same as <code>self.dot_string_from_container_index</code> but returns …","same as <code>self.dot_from_indices</code> but returns String instead","same as <code>self.dot_from_indices</code> but returns String instead","same as <code>self.dot_with_indices</code> but returns String instead","same as <code>self.dot_with_indices</code> but returns String instead","use index as labels for the nodesdefault implementation …","use index as labels for the nodesdefault implementation …","","returns total number of edges in graph","Intended for all AdjContainer, which store all their  …","","","Returns the argument unchanged.","returns <code>Some(first element from the adjecency List)</code> or <code>None</code>","Returns a reference to the element stored in the specified …","Returns a mutable reference to the element stored in the …","For a save alternative see get_contained","Returns a mutable reference to the element stored in the …","returns reference to the underlying topology aka, the …","returns id of container","","Calls <code>U::from(self)</code>.","check if vertex with <code>other_id</code> is adjacent to self","resultcondition<code>None</code><strong>if</strong> graph does not contain any vertices…","Count number of leaves in the graph, i.e. vertices with …","calculate the size of the longest shortest path <strong>starting </strong>…","Markov step","Accumulating markov step","Markov steps","Accumulating markov steps","Accumulating markov steps","Markov steps without return","returns iterator over indices of neighbors","Create new instance with id","how to construct a blank object","definition","Randomizes self according to  model","Access RNG","","shuffle adjacency list","do the following <code>times</code> times:","do the following <code>times</code> times:","Sorting adjacency lists","sorts Adjecaency List","Function called whenever the steps are accepted.","Function called whenever the steps are rejected.","If you need to exchange the internal rng","","get error message as <code>&amp;str</code>, for printing etc.","","Calculates transitivity of graph","","","","","","","","","","undo a markov step, return result-stateif you want to undo …","undo a markov, <strong>panic</strong> on invalid result statefor undoing …","Undo markov steps","Undo markov steps","calculate sizes of all binode connected components","returns number of vertices present in graph","Closely related (most of the time equal) to betweeness","","Something went wrong during the rewireing. This should not …","It is impossible to create the initial ring structure. You …","Implements small-world graph ensemble","short for SmallWorldWS","Used for accessing neighbor information from a graph","Error variants","Specific GenericGraph used for watts-strogatz small World …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns neigbor distance of the initial ring","Returns neigbor distance of the initial ring","","Initialize a WS - a small-world ensemble","","Initialize a WS - a small-world ensemble","","retunrs rewire probability the ensemble is set to","retunrs rewire probability the ensemble is set to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[6,0,0,0,0,46,46,0,0,0,6,0,0,0,0,0,0,7,7,0,1,3,3,1,3,1,3,1,1,3,3,6,7,1,3,6,7,1,3,6,7,1,3,6,7,1,3,6,7,1,3,6,7,1,3,6,7,1,3,6,7,3,1,3,6,7,1,3,1,3,1,3,1,3,6,7,3,3,3,1,3,6,7,1,3,6,7,1,3,6,7,0,0,1,3,6,7,0,0,0,0,1,3,6,7,1,3,6,7,3,3,3,3,0,3,3,3,3,0,1,3,1,3,6,7,1,3,6,7,0,3,1,1,1,0,1,3,3,0,1,3,6,7,1,3,1,0,0,0,0,3,3,3,1,3,6,7,0,1,3,6,7,1,3,6,7,1,3,6,7,1,3,6,7,1,3,6,7,1,3,6,7,1,3,6,7,1,3,6,7,1,3,6,7,3,3,1,3,6,7,0,135,135,136,137,136,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,29,29,24,0,26,0,26,0,138,23,25,26,23,23,23,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,23,29,25,26,24,23,29,25,26,24,23,23,33,30,34,23,29,25,26,24,23,23,33,30,34,23,29,29,25,26,24,33,30,34,23,29,29,25,26,24,23,29,25,26,23,23,23,23,23,23,23,33,30,34,23,29,25,26,24,29,29,24,33,30,34,23,29,25,26,24,23,32,23,32,23,32,23,32,23,32,23,23,23,32,23,32,23,32,23,32,23,23,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,29,33,30,34,138,25,26,23,26,26,138,23,25,26,33,30,34,34,23,29,25,26,23,138,25,26,23,29,25,26,24,23,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,33,30,34,23,29,25,26,24,139,140,141,142,36,0,0,36,36,36,35,35,35,36,35,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,35,35,35,36,35,36,35,36,35,36,35,35,35,35,35,35,35,36,35,36,35,36,35,35,35,35,35,35,36,35,36,35,36,35,35,35,35,35,36,35,35,35,35,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,35,35,36,36,36,35,143,144,145,0,0,41,41,41,42,41,41,42,41,42,41,42,41,42,41,42,41,42,41,42,41,42,41,41,41,41,42,41,42,41,42,41,42,41,41,41,41,41,41,41,42,41,42,41,42,41,41,41,41,41,41,41,42,41,42,41,41,41,41,41,42,41,41,41,42,41,42,41,42,41,42,41,42,41,42,41,42,41,42,41,42,41,42,41,41,41,42,41,0,0,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,45,44,45,44,45,44,45,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,58,59,60,49,50,48,8,8,8,8,8,8,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,8,8,8,8,8,8,8,8,8,58,59,60,49,50,48,8,8,8,8,8,58,59,60,49,50,48,8,8,8,8,8,8,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,48,8,8,8,58,59,60,49,50,48,8,8,8,48,8,8,8,8,58,60,49,50,48,8,8,8,8,8,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,58,59,60,49,50,48,8,8,8,8,58,59,60,49,50,48,8,0,0,9,9,9,9,9,9,9,9,9,2,9,9,9,9,9,9,9,9,9,9,2,9,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,11,0,0,0,0,0,0,11,11,11,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,11,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,10,11,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,11,51,55,52,53,12,13,10,146,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,76,109,109,72,87,0,95,0,91,90,96,110,109,72,102,0,0,0,0,0,0,0,0,96,87,98,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,101,87,0,72,87,98,98,90,87,87,98,101,72,98,92,148,103,102,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,101,104,110,72,109,90,104,110,103,87,98,87,109,72,72,96,0,95,95,95,0,0,88,88,0,0,0,0,0,0,0,0,0,103,110,0,0,0,72,148,72,0,0,0,0,0,0,0,0,0,91,91,104,66,67,68,70,149,73,74,150,151,75,0,77,70,74,78,150,151,79,80,73,81,82,79,80,73,81,82,79,80,73,81,82,83,83,69,0,0,0,79,80,81,82,100,152,153,79,80,73,81,82,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,84,77,70,77,70,77,70,86,87,88,89,90,72,79,80,73,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,76,74,101,84,102,66,103,104,105,67,86,87,88,89,90,72,79,80,73,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,76,74,101,84,102,66,103,104,105,67,94,94,83,97,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,83,97,150,151,106,107,83,150,151,79,80,73,81,82,152,153,79,80,73,81,82,84,93,75,69,94,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,0,0,0,77,70,86,87,88,89,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,76,74,101,84,102,66,77,103,104,105,70,67,152,153,79,80,73,81,82,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,149,73,74,154,155,86,89,78,78,99,99,84,66,67,66,66,67,156,157,86,89,78,78,99,99,84,77,70,77,70,156,157,86,89,78,99,84,105,0,78,99,78,99,78,99,78,99,78,99,78,99,78,99,78,99,78,99,88,72,73,86,78,0,70,70,105,86,105,152,153,79,80,73,81,82,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,101,102,66,77,103,104,105,110,70,67,69,68,86,78,158,159,99,78,86,158,159,94,94,94,94,106,107,86,87,88,89,90,72,79,79,80,80,73,81,81,82,82,83,83,91,92,93,75,69,68,94,95,95,95,96,97,97,98,78,99,100,109,109,76,74,101,84,102,66,77,103,104,105,110,70,70,67,67,105,105,105,92,148,92,99,78,99,75,83,97,152,153,79,80,73,81,82,77,70,77,70,77,70,77,94,83,97,97,94,77,70,77,70,93,83,97,0,0,0,74,100,106,107,83,97,106,107,83,97,105,105,69,0,106,107,83,97,0,97,83,83,83,83,97,97,83,97,160,150,151,161,86,89,79,80,73,81,82,78,78,99,99,66,67,0,77,105,70,75,66,67,79,80,73,81,82,79,80,73,81,82,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,86,89,86,89,86,89,162,79,80,73,81,82,105,105,79,82,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,75,68,83,106,83,83,89,77,77,158,159,77,70,67,86,89,152,153,79,80,73,81,82,88,88,86,78,77,73,163,80,73,81,100,94,66,67,67,100,158,159,86,89,78,99,66,67,158,159,158,159,78,99,78,99,67,158,86,89,66,158,86,89,77,0,0,75,84,164,164,164,164,164,164,77,86,78,106,107,106,107,106,107,70,70,0,0,84,84,84,84,84,84,84,84,77,86,78,105,158,86,89,106,107,86,89,79,80,73,81,82,83,92,93,69,68,94,97,69,84,84,80,73,81,74,0,97,97,152,153,79,80,73,81,82,77,70,70,165,80,73,81,93,93,66,67,166,73,69,0,70,70,67,78,99,66,67,66,67,66,67,150,151,79,80,73,81,82,83,97,84,75,0,70,75,73,167,78,99,84,75,77,86,152,153,79,80,73,81,82,86,87,88,89,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,76,74,101,84,102,66,77,103,104,105,70,67,78,84,89,158,86,89,77,84,78,99,84,84,166,166,77,70,77,70,93,94,93,75,78,66,67,158,159,86,89,78,99,159,78,78,99,99,84,66,67,66,67,105,105,67,164,164,158,159,70,167,78,99,84,77,70,66,67,66,67,105,105,74,93,93,93,93,69,69,148,86,87,88,89,90,72,79,80,73,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,76,74,101,84,102,66,103,104,105,67,83,97,78,78,83,97,100,158,159,86,89,78,99,100,158,159,86,89,78,99,100,0,83,97,83,97,73,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,78,99,99,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,105,105,105,105,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,105,105,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,164,164,164,164,70,83,83,83,106,107,86,87,88,89,90,72,79,80,73,81,82,83,91,92,93,75,69,68,94,95,96,97,98,78,99,100,109,76,74,101,84,102,66,77,103,104,105,110,70,67,77,70,77,70,0,86,89,86,89,86,89,66,86,89,86,89,86,89,86,89,86,89,86,89,83,97,97,83,97,100,74,93,69,158,159,86,89,78,99,68,74,83,97,93,93,93,93,93,93,93,93,168,169,170,171,171,171,172,173,174,175,176,177,178,179,0,0,0,0,0,0,0,0,0,0,98,98,98,98,98,98,155,157,157,159,159,161,159,159,159,159,159,159,159,159,159,159,168,0,0,0,0,116,116,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,116,117,118,116,117,118,118,116,117,118,116,117,118,118,118,118,118,118,118,116,117,118,118,118,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,117,118,116,116,117,118,118,118,118,118,118,116,117,118,76,76,109,109,109,0,0,0,109,109,0,0,100,0,0,0,0,100,100,100,0,100,100,100,169,0,0,0,95,0,91,96,96,92,0,0,0,0,0,0,0,0,0,0,0,92,96,0,95,95,95,91,91,69,94,94,94,69,0,93,69,93,93,93,93,93,93,93,170,171,171,171,172,173,174,175,176,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,72,148,72,72,72,72,72,148,72,149,150,151,150,151,152,153,150,151,150,151,152,153,152,153,149,152,153,148,152,153,150,151,162,152,153,163,152,153,165,150,151,152,153,148,101,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,0,0,0,110,102,0,0,0,110,102,103,102,110,104,110,104,110,103,0,0,0,0,0,0,0,103,110,0,104,0,0,0,0,0,0,0,0,0,0,178,0,0,0,164,164,164,164,164,164,166,167,166,166,164,164,167,164,164,164,164,87,90,87,87,87,90,87,87,90,87,87,88,88,0,0,0,0,0,0,0,0,0,0,154,156,156,158,158,160,158,158,158,158,158,158,158,158,158,158,158,158,158,179,125,0,125,0,125,125,0,0,0,0,119,122,124,61,119,122,124,61,119,122,124,61,119,122,124,61,119,122,124,61,119,122,124,61,119,122,124,61,119,61,119,61,119,61,61,122,124,61,119,61,122,124,61,119,122,124,61,119,61,119,120,61,119,122,119,122,124,61,119,119,61,119,122,124,61,119,61,61,61,122,61,122,124,61,119,122,124,61,119,124,61,124,119,119,61,122,124,61,119,124,122,119,61,119,61,61,61,119,122,124,61,119,122,124,61,119,122,124,61,119,122,124,61,119,122,124,61,119,122,124,61,119,122,124,61,119,122,124,61,119,122,124,61,119,119,119,122,124,61,119,180,181,125,0,0,125,125,125,0,0,0,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,180,181,62,62,62,62,62,62,0,0,126,126,126,62,126,126,62,126,62,126,62,126,62,126,62,126,62,126,62,126,62,126,126,126,126,126,62,126,62,126,62,126,62,126,126,126,126,126,126,126,126,62,126,62,126,62,126,126,126,126,126,126,62,126,62,126,62,62,62,126,126,126,126,62,126,126,126,62,126,126,126,126,62,126,62,126,62,126,62,126,62,126,62,126,62,126,62,126,62,126,62,126,126,126,62,126,182,183,184,182,183,182,183,0,0,0,0,65,128,56,65,128,56,65,128,56,65,128,56,65,128,56,65,128,56,65,128,56,128,56,128,56,56,56,65,128,56,127,127,56,56,65,128,56,65,128,56,128,56,65,128,56,56,128,56,127,127,65,128,56,56,56,65,128,56,65,128,56,65,56,128,128,128,56,65,56,56,56,65,65,65,127,127,128,56,56,65,56,128,128,56,65,128,56,65,128,56,65,128,56,65,128,56,65,128,56,65,128,56,65,128,56,65,128,56,65,128,56,65,128,56,0,0,0,0,0,46,46,0,0,0,0,0,0,0,0,0,0,0,185,185,186,187,46,46,46,46,46,46,46,46,46,186,188,187,189,187,189,189,187,188,187,187,46,188,186,46,46,46,187,187,186,190,190,191,191,191,191,191,191,190,190,190,191,191,191,191,191,191,191,191,190,190,190,190,190,190,46,186,192,46,46,46,188,193,193,193,193,185,188,46,46,188,186,186,186,164,164,164,164,164,164,188,188,43,186,166,167,46,188,166,166,188,185,164,164,167,46,46,46,186,46,46,46,46,46,46,46,46,46,164,164,164,164,186,186,186,46,132,132,0,0,0,0,0,129,129,129,129,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132,131,129,129,129,129,129,129,131,129,129,131,129,132,131,131,129,132,131,129,132,131,129,129,129,131,129,132,131,129,132,131,129,132,131,129,129,129,129,129,131,131,129,132,131,129,132,131,133,129,131,133,131,129,129,133,129,129,131,129,131,131,129,129,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132,131,129,132],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,2],[[]],[[1,4]],[[3,4]],[[1,4]],[[3,4]],[1,2],[[]],[[]],[3,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[1,[5,5]]],[[1,[5,5]]]],[[[3,[5,5]]],[[3,[5,5]]]],[6,6],[7,7],[8,3],[[]],[[]],[[]],[[]],[1,[[10,[9]]]],[3,[[10,[9]]]],[[1,4],[[12,[9,11]]]],[[3,4],[[12,[9,11]]]],[[1,4],[[13,[9]]]],[[3,4],[[13,[9]]]],[[]],[[]],[[]],[[]],[3,14],[[3,8]],[[],15],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[16,[1]]]],[[],[[16,[3]]]],[[],[[16,[6]]]],[[],[[16,[7]]]],0,0,[4],[4],[4],[4],0,0,0,0,[[[1,[17,17]],18],19],[[[3,[17,17]],18],19],[[6,18],19],[[7,18],19],[[]],[[]],[[]],[[]],[[4,4],[[20,[3]]]],[8,3],[[[14,[4]]],[[20,[3]]]],[[[14,[4]]],3],0,[[3,4],20],[[3,4],20],[[3,4]],[[3,4]],0,[1,2],[3,2],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],0,[3,6],[[4,4,4],1],[[4,4],1],[[4,4],1],0,[1],[3],[3],0,[1,16],[3,16],[6,16],[7,16],[1],[3],[1,2],0,0,0,0,[[3,[14,[4]]],[[14,[4]]]],[[3,[14,[4]]],[[14,[4]]]],[3],[[]],[[]],[[]],[[]],0,[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[],22],[[],22],[[3,6],[[16,[7]]]],[[3,6]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[4,15],[[23,4,4],[[16,[24]]]],[[25,4],15],[[26,4],15],[23],[23],[[23,27],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[5,5,5,5,5]]],[[23,[5,5,5,5,5]]]],[[[29,[5]]],[[29,[5]]]],[25,25],[26,26],[24,24],[[]],[[]],[[]],[[]],[[]],[[23,4],28],[[23,4],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[23,4],4],[[23,4],4],[4],[4],[4],[4],[4],[29],[4],[4],[4],[4],[4],[4],[4],[4],[29],[4],[4],[4],[[],[[16,[23]]]],[[],[[16,[29]]]],[[],[[16,[25]]]],[[],[[16,[26]]]],[[23,4],30],[[23,4],28],[[23,4],30],[[23,4],28],[[23,27],30],[[23,27],28],[23,[[20,[4]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[[29,[31]],29],15],[[[29,[17]],18],19],[[24,18],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,8],[[32,4],28],[[[23,[26]],4],28],[[32,4],28],[[[23,[26]],4],28],[[32,4],28],[[[23,[26]],4],28],[[32,4],28],[[[23,[26]],4],28],[[32,4],28],[[[23,[26]],4],28],[23,8],[23,8],[[32,4],28],[[[23,[26]],4],28],[[32,4],28],[[[23,[26]],4],28],[[32,4],28],[[[23,[26]],4],28],[[32,4],28],[[[23,[26]],4],28],[23,8],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29],[[]],[[]],[[]],[4,15],[[25,4],15],[[26,4],15],[23,15],[26,15],[26,15],[[]],[[8,8],23],[[],25],[[],26],[33,20],[30,20],[34,20],[[34,27]],[23,16],[29,16],[25,16],[26,16],[23],[[]],[25],[26],[[]],[[]],[[]],[[]],[[]],[23,4],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[35,2],[[35,4]],[[35,4]],[[]],[[]],[35,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,36],[[[35,[5,5]]],[[35,[5,5]]]],[[]],[[]],[35,[[10,[9]]]],[[35,4],[[12,[9,11]]]],[[35,4],[[13,[9]]]],[[]],[[]],[4],[4],[4],[4],[[],[[16,[36]]]],[[],[[16,[35]]]],[35,[[16,[37]]]],[35,[[16,[37]]]],[35,38],[35,38],[35,38],[35,[[16,[37]]]],[4],[4],[[36,18],19],[[[35,[17,17]],18],19],[[]],[[]],[[35,4],20],[[35,4],20],[[35,4]],[[35,4]],[35,2],[[],4],[[],4],[[]],[[]],[36,15],[35,36],[35],[[4,39],35],[35],[35],[36,16],[35,16],[[35,39]],[35],[35],[35,39],[[]],[[]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[35,36],36],[[35,36]],[36],[[36,40]],[[]],[[]],0,0,0,0,0,[41,2],[[41,4]],[[41,4]],[[]],[41,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,42],[[[41,[[0,[5,43]],5]]],[[41,[[0,[5,43]],5]]]],[[]],[[]],[41,[[10,[9]]]],[[41,4],[[12,[9,11]]]],[[41,4],[[13,[9]]]],[[]],[[]],[4],[4],[4],[4],[[],[[16,[42]]]],[[],[[16,[[41,[43]]]]]],[41,[[16,[37]]]],[41,[[16,[37]]]],[41,38],[41,38],[41,38],[41,[[16,[37]]]],[4],[4],[[42,18],19],[[[41,[[0,[17,43]],17]],18],19],[[]],[[]],[[41,4],20],[[41,4],20],[[41,4]],[[41,4]],[41,4],[41,2],[[],4],[[],4],[[]],[[]],[41,42],[[4,4],41],[41],[41],[42,16],[[[41,[43]]],16],[41],[41],[[]],[[]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[41,42],42],[[41,42]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,44],[45,45],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[[],[[16,[44]]]],[[],[[16,[45]]]],[4],[4],[[44,18],19],[[45,18],19],[[]],[[]],0,[[],4],[[],4],[[]],[[]],[4,44],[4,45],[45,4],[44,16],[45,16],[[]],[[]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[]],[[]],0,0,0,0,0,0,0,[[8,4,4],[[16,[46]]]],[[8,4]],[[8,4],20],[[8,4]],[8,47],[[8,4],[[20,[48]]]],[[8,4],49],[[8,4],50],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[[[8,[5,5]]],[[8,[5,5]]]],[[]],[8,[[8,[9]]]],[[8,[14,[4]]],[[20,[2]]]],[8,[[14,[39]]]],[4,[[8,[9]]]],[8,[[14,[4]]]],[8],[8,51],[8,10],[[8,4],[[52,[11]]]],[[8,4],[[12,[11]]]],[[8,4],13],[[8,4],53],[[8,4]],[[8,4],20],[8,54],[[8,4],[[55,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[56]]],4],[[[8,[56]]],4],[[8,4],[[20,[4]]]],[8,57],[8,28],[8,[[14,[4]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[16,[8]]]],[[8,4],58],[[8,4],59],[[8,4],60],[8,[[20,[4]]]],[[[8,[61]],4,4],[[20,[39]]]],[8,[[16,[37]]]],[8,[[16,[37]]]],[8,[[16,[37]]]],[4],[4],[4],[4],[4],[4],[4],[8,4],[[[8,[17,17]],18],19],[[[8,[56]]],39],[[[8,[56]]],39],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,8],[[8,4],20],[[8,4],20],[[8,4]],[[8,4]],[8],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,[[20,[15]]]],[[48,4],15],[8,4],[[8,4],[[20,[4]]]],[4,8],[58,20],[59,20],[60,20],[49,20],[50,20],[48,20],[[8,4],[[20,[4]]]],[[8,4,4],[[16,[46]]]],[[[8,[56]],4,4],62],[[48,4],[[16,[48,48]]]],[[[8,[56]],4,4,4],62],[8,16],[[8,4]],[8],[58],[60],[49],[50],[48],[8],[8,38],[8,38],[8,38],[[]],[8,39],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[8,15],[[14,[4]]]],[8,4],[[8,15],[[14,[39]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[5]]],[[9,[5]]]],[[]],[4,2],[9],[9],[[]],[9,4],[4],[4],[[],[[16,[9]]]],[4],[9],[[[9,[17]],18],19],[8,[[2,[43]]]],[[]],[63,2],[9,[[20,[4]]]],[9,4],[[],4],[[]],[[9,4],15],[9,11],[4,9],[9,16],[9],[9],[[]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,[11,15],[11,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,64],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,4],[51,4],[55,4],[52,4],[53,4],[12,4],[13,4],[10,4],[[[54,[4]]],11],[65,11],[11,20],[51,20],[55,20],[52,20],[53,20],[12,20],[13,20],[10,20],[11,20],[51,20],[55,20],[52,20],[53,20],[12,20],[13,20],[10,20],[[11,4],20],[[51,4],20],[[55,4],20],[[52,4],20],[[53,4],20],[[12,4],20],[[13,4],20],[[10,4],20],[[10,4],20],[11,20],[11],[51],[55],[52],[53],[12],[13],[10],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[66,39],[67,39],[[68,69]],[[70,[14,[71]]],[[16,[70]]]],[[],[[16,[4,72]]]],[73,[[16,[4,72]]]],[74],[[],15],[[],15],[[75,47],69],[[[14,[[14,[39,71]],71]],[14,[71]],76],[[16,[74,72]]]],[77,[[16,[74,72]]]],[70,[[16,[74,72]]]],[74,76],[78,14],[[],4],[[],4],[79,4],[80,4],[73,4],[81,4],[82,4],[79,28],[80,28],[73,28],[81,28],[82,28],[79,28],[80,28],[73,28],[81,28],[82,28],[83,4],[83,4],0,0,[4],[4],[79,14],[80,14],[81],[82],0,[[],[[16,[[14,[71]],72]]]],[[],[[16,[[14,[71]],72]]]],[79,[[16,[[14,[71]],72]]]],[80,[[16,[[14,[71]],72]]]],[73,[[16,[[14,[71]],72]]]],[81,[[16,[[14,[71]],72]]]],[82,[[16,[[14,[71]],72]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[84,84],[[77,4,4],16],[[70,4,4],16],[[77,4,85],16],[[70,4,85],16],[77,15],[70,15],[86,86],[87,87],[88,88],[89,89],[90,90],[72,72],[79,79],[80,80],[73,73],[83,83],[91,91],[92,92],[93,93],[75,75],[69,69],[68,68],[94,94],[95,95],[96,96],[97,97],[98,98],[78,78],[99,99],[100,100],[76,76],[74,74],[101,101],[84,84],[102,102],[66,66],[103,103],[104,104],[105,105],[67,67],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[94,69],94],0,[[83,83],[[16,[91]]]],[[97,97],[[16,[91]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[106,[[16,[91]]]],[[107,39],[[16,[91]]]],[83,[[16,[91]]]],[[97,39],[[16,[91]]]],[4,[[16,[72]]]],[4,[[16,[72]]]],[106,[[16,[91]]]],[[107,39],[[16,[91]]]],[83,[[16,[4,91]]]],[[4,4],[[16,[72]]]],[[4,4],[[16,[72]]]],[[79,4,4],[[16,[72]]]],[[80,4,4],[[16,[72]]]],[[73,4,4],[[16,[72]]]],[[81,4,4],[[16,[72]]]],[[82,4,4],[[16,[72]]]],[[],[[16,[4,72]]]],[[],[[16,[4,72]]]],[79,[[16,[4,72]]]],[80,[[16,[4,72]]]],[73,[[16,[4,72]]]],[81,[[16,[4,72]]]],[82,[[16,[4,72]]]],[84,4],[[],93],[[],75],[[],69],[[],94],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[16,[74,72]]]],[[],[[16,[74,72]]]],[[[14,[[14,[39,71]],71]],[14,[71]],76],[[16,[74,72]]]],[77,[[16,[74,72]]]],[70,[[16,[74,72]]]],[[],[[16,[86]]]],[[],[[16,[87]]]],[[],[[16,[88]]]],[[],[[16,[89]]]],[[],[[16,[72]]]],[[],[[16,[79]]]],[[],[[16,[80]]]],[[],[[16,[73]]]],[[],[[16,[81]]]],[[],[[16,[82]]]],[[],[[16,[83]]]],[[],[[16,[91]]]],[[],[[16,[92]]]],[[],[[16,[93]]]],[[],[[16,[75]]]],[[],[[16,[69]]]],[[],[[16,[68]]]],[[],[[16,[94]]]],[[],[[16,[95]]]],[[],[[16,[96]]]],[[],[[16,[97]]]],[[],[[16,[98]]]],[[],[[16,[78]]]],[[],[[16,[99]]]],[[],[[16,[76]]]],[[],[[16,[74]]]],[[],[[16,[101]]]],[[],[[16,[84]]]],[[],[[16,[102]]]],[[],[[16,[66]]]],[[],[[16,[77]]]],[[],[[16,[103]]]],[[],[[16,[104]]]],[[],[[16,[105]]]],[[],[[16,[70]]]],[[],[[16,[67]]]],[[],39],[[],39],[79,39],[80,39],[73,39],[81,39],[82,39],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[16,[72]]]],[[],[[16,[73,72]]]],[74],[[],20],[[]],[86,20],[89,20],[78],[78],[99],[99],[84],[66],[67],[66],[66],[67],[[]],[[]],[86],[89],[78],[78],[99],[99],[84],[77,28],[70,28],[77,28],[70,28],[[]],[[]],[86],[89],[78],[99],[84],[105],0,[78],[99],[78],[99],[78],[99],[78],[99],[78],[99],[78],[99],[78],[99],[78],[99],[78],[99],[[88,88],15],[[72,72],15],[[73,73],15],[86,[[16,[[14,[39,71]],87]]]],[78,[[16,[[14,[39,71]],87]]]],0,[70],[70],[105,39],[86,15],[105],[[]],[[]],[79],[80],[73],[81],[82],[[86,18],[[16,[108]]]],[[87,18],[[16,[108]]]],[[88,18],[[16,[108]]]],[[89,18],[[16,[108]]]],[[90,18],[[16,[108]]]],[[72,18],[[16,[108]]]],[[79,18],[[16,[108]]]],[[80,18],[[16,[108]]]],[[73,18],[[16,[108]]]],[[81,18],[[16,[108]]]],[[82,18],[[16,[108]]]],[[83,18],[[16,[108]]]],[[91,18],[[16,[108]]]],[[92,18],[[16,[108]]]],[[93,18],[[16,[108]]]],[[75,18],[[16,[108]]]],[[69,18],[[16,[108]]]],[[68,18],[[16,[108]]]],[[94,18],[[16,[108]]]],[[95,18],[[16,[108]]]],[[96,18],[[16,[108]]]],[[97,18],[[16,[108]]]],[[98,18],[[16,[108]]]],[[78,18],[[16,[108]]]],[[99,18],[[16,[108]]]],[[100,18],[[16,[108]]]],[[109,18],[[16,[108]]]],[[76,18],[[16,[108]]]],[[101,18],[[16,[108]]]],[[102,18],[[16,[108]]]],[[66,18],[[16,[108]]]],[[77,18],[[16,[108]]]],[[103,18],[[16,[108]]]],[[104,18],[[16,[108]]]],[[105,18],[[16,[108]]]],[[110,18],[[16,[108]]]],[[70,18],[[16,[108]]]],[[67,18],[[16,[108]]]],[69,[[16,[108]]]],[68,[[16,[108]]]],[86,39],[78,39],[[],39],[[],39],[99,39],[78,39],[86,39],[[],39],[[],39],[[94,15],94],0,[[94,69],94],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[82,79],[[]],[[]],[81,80],[[]],[80,81],[[]],[79,82],[[]],[[]],[106,83],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[75,95],[68,95],[[]],[[]],[83,97],[[]],[[]],[[]],[[]],[72,109],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[77,70],[[]],[66,67],[[[14,[71]],4,85,85,39],[[16,[105,110]]]],[[[14,[71]],4,85,85,39],[[16,[105,110]]]],[[[14,[71]],[14,[71]],4,85,85,39],[[16,[105,110]]]],[[[14,[38,71]]],92],[[]],[[],92],[89,[[16,[99,98]]]],[86,[[16,[78,98]]]],[86,[[16,[99,98]]]],[[75,47],75],[[83,4,4],[[20,[4]]]],[[97,4,4],[[20,[39]]]],[[],[[16,[4,72]]]],[[],[[16,[4,72]]]],[79,[[16,[4,72]]]],[80,[[16,[4,72]]]],[73,[[16,[4,72]]]],[81,[[16,[4,72]]]],[82,[[16,[4,72]]]],[[77,4],[[20,[111]]]],[[70,4],[[20,[111]]]],[[77,4],20],[[70,4],20],[[77,4],20],[[70,4],20],[77,[[14,[4,71]]]],[94,40],[[83,4],20],[[97,4],20],[[97,4]],[94,47],[[77,4],[[20,[4]]]],[[70,4],[[20,[4]]]],[[77,4],[[20,[85]]]],[[70,4],[[20,[85]]]],[93,40],[[83,4,4],4],[[97,4,4],39],0,[[],[[16,[100,109]]]],[[],[[16,[100,109]]]],[74],0,[106,[[16,[37]]]],[107,[[16,[37]]]],[83,[[16,[37]]]],[97,[[16,[37]]]],[106,[[16,[37]]]],[107,[[16,[37]]]],[83,[[16,[37]]]],[97,[[16,[37]]]],[105,77],[105,77],0,0,[106,83],[107,97],[83,14],[97,14],[[4,4,4],4],[97],[83,97],[83,97],[83,97],[83,4],[97,4],[97],[83],[97],[[]],[[],14],[[]],[[]],[86],[89],[79,14],[80,14],[73,14],[81],[82],[78],[78],[99],[99],[66],[67],0,[77,[[14,[71]]]],[105],[70,[[14,[71]]]],[[75,47],75],[66,4],[67,4],[79,[[16,[4,72]]]],[80,[[16,[4,72]]]],[73,[[16,[4,72]]]],[81,[[16,[4,72]]]],[82,[[16,[4,72]]]],[79],[80],[73],[81],[82],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[86,[20,[112]]],[[16,[87]]]],[[89,[20,[112]]],[[16,[87]]]],[[86,85,[20,[112]]],[[16,[87]]]],[[89,85,[20,[112]]],[[16,[87]]]],[[86,85,[20,[112]]],[[16,[87]]]],[[89,85,[20,[112]]],[[16,[87]]]],[85,4],[[79,85],4],[[80,85],4],[[73,85],4],[[81,85],4],[[82,85],4],[[105,85],77],[[105,85],77],[79],[82],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[75,95],[68,95],[83,97],[106,107],[83,97],[83,97],[89],[77,70],[[77,[14,[71]]],[[16,[70]]]],[[],15],[[],15],[77,15],[70,15],[67,15],[86,15],[89,15],[[],15],[[],15],[79,15],[80,15],[73,15],[81,15],[82,15],[88,15],[88,15],[86,15],[78,15],[77,39],[73],[[],113],[[80,80],113],[[73,73],113],[[81,81],113],0,[94,94],[66,[[14,[39,71]]]],[67,[[14,[39,71]]]],[67,[[14,[39,71]]]],0,[[],14],[[],[[14,[39,71]]]],[86,14],[89,14],[78,[[14,[39,71]]]],[99,[[14,[39,71]]]],[66],[67],[39,[[14,[39,71]]]],[39,[[14,[39,71]]]],[[],[[14,[39,71]]]],[[],[[14,[39,71]]]],[78,14],[99,14],[78,[[14,[39,71]]]],[99,[[14,[39,71]]]],[67,[[14,[39,71]]]],[[],39],[86,39],[89,39],[66,39],[[],39],[86,39],[89,39],[77,[[14,[39,71]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],[[75,47,47],75],[84,39],[[]],[[]],[[4,14]],[[4,14]],[4],[4],[77,4],[86,4],[78,4],[106,[[14,[39,71]]]],[107,[[14,[39,71]]]],[106,28],[107,28],[106],[107],[70,[[16,[72]]]],[70,[[16,[72]]]],[[],[[16,[72]]]],0,[[84,4]],[[84,4]],[[84,4]],[84],[84],[[84,4]],[84],[84],[77,4],[86,4],[78,4],[[105,85,85,85],77],[[],88],[86,88],[89,88],[[],106],[[],107],[[39,4,4,4,4,39,4],[[16,[86,87]]]],[[39,4,4],[[16,[89,87]]]],[4,[[16,[79,72]]]],[4,[[16,[80,72]]]],[[],[[16,[73,72]]]],[4,[[16,[81,72]]]],[4,[[16,[82,72]]]],[[],83],[[39,39,4],92],[[],93],[[114,114,114],69],[[[14,[69,71]]],[[20,[68]]]],[[],94],[[],97],[[],69],[[39,4],[[16,[84,101]]]],[[39,4],[[16,[84,101]]]],[4,[[16,[80,72]]]],[[],[[16,[73,72]]]],[4,[[16,[81,72]]]],[[[14,[39,71]],[14,[[14,[39,71]],71]],76,[14,[4,71]]],74],[[]],[97],[97],[[],15],[[],15],[79,15],[80,15],[73,15],[81,15],[82,15],[77,85],[70,4],[70,4],[[4,4],[[16,[[14,[71]],72]]]],[[80,4,4],[[16,[[14,[80,71]],72]]]],[[73,4,4],[[16,[[14,[73,71]],72]]]],[[81,4,4],[[16,[[14,[81,71]],72]]]],[[93,95],93],0,[66,112],[67,112],[[]],[73,115],0,0,[70,28],[70],[67],[78,[[14,[39,71]]]],[99,[[14,[39,71]]]],[66,112],[67,112],[66,39],[67,39],[66,4],[67,112],[[]],[[]],[79],[80],[73],[81],[82],[83],[97],[84],[[75,15],75],0,[70,28],[[75,47]],[73],[[]],[78],[99],[84],[[75,47],75],[77,28],[86,4],[[]],[[]],[79],[80],[73],[81],[82],[86,16],[87,16],[88,16],[89,16],[72,16],[79,16],[80,16],[73,16],[81,16],[82,16],[83,16],[91,16],[92,16],[93,16],[75,16],[69,16],[68,16],[94,16],[95,16],[96,16],[97,16],[98,16],[78,16],[99,16],[76,16],[74,16],[101,16],[84,16],[102,16],[66,16],[77,16],[103,16],[104,16],[105,16],[70,16],[67,16],[[78,4]],[84,16],[[89,[14,[39,71]],39],[[16,[89,90]]]],[39,[[16,[39,87]]]],[[86,39],[[16,[39,87]]]],[[89,39],[[16,[39,87]]]],[[77,39],[[16,[39,104]]]],[[84,39]],[[78,4]],[[99,4]],[[84,4],16],[[84,39]],[4],[4,[[14,[71]]]],[77],[70],[77],[70],[93,93],[[94,47],94],0,[[75,47],75],[78,4],[66,112],[67,112],[[],4],[[],4],[86,4],[89,4],[78,4],[99,4],[[],4],[78,4],[78,4],[99,4],[99,4],[84,4],[66,4],[67,4],[[66,4]],[[67,4]],[105],[105],[67,112],[[]],[[]],[[],4],[[],4],[[70,[14,[71]]],16],[[]],[78],[99],[84],[77],[70],[66,85],[67,85],[[66,85]],[[67,85]],[105],[105],[74],[[93,96],93],0,[93,93],0,[69],[69,38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[83,4],[97,4],[78,4],[78,4],[83,4],[97,4],0,[[],4],[[],4],[86,4],[89,4],[78,4],[99,4],0,[[],4],[[],4],[86,4],[89,4],[78,4],[99,4],0,0,[83,83],[97,97],[83,83],[97,97],[[73,73],16],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[86,[[16,[78]]]],[86,[[16,[99]]]],[[],16],[89,[[16,[99]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[105,[[16,[77,105]]]],[105,[[16,[77,105]]]],[[105,85],[[16,[77,105]]]],[[105,85],[[16,[77,105]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[105,85,85,85],[[16,[77,105]]]],[[105,85,85,85],[[16,[77,105]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[14],[[]],[70],[83,[[14,[39,71]]]],[83,[[14,[39,71]]]],[83,[[14,[39,71]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[77,14],[70],[77,85],[70,85],0,[86],[89],[86],[89],[86],[89],[66,88],[86],[89],[86],[89],[86],[89],[86],[89],[86],[89],[86],[89],[83,4],[97,4],[97],[83],[97],[100,[[16,[37]]]],[[[74,[73]]],[[16,[37]]]],[[93,4,4],[[16,[37]]]],[69,[[16,[37]]]],[[],[[16,[37]]]],[[],[[16,[37]]]],[86,[[16,[37]]]],[89,[[16,[37]]]],[78,[[16,[37]]]],[99,[[16,[37]]]],[68,[[16,[37]]]],[[[74,[73]],39,39],[[16,[37]]]],[83,[[16,[37]]]],[97,[[16,[37]]]],[[93,92],93],0,[93,93],0,[[93,92],93],0,[93,93],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[4],[4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[],39],[[],39],[[]],[[],15],[[],[[14,[39,71]]]],[39,[[14,[39,71]]]],[[],[[14,[39,71]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],[[16,[37]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[116,116],[117,117],[118,118],[[]],[[]],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[[],[[16,[116]]]],[[],[[16,[117]]]],[[],[[16,[118]]]],[4],[4],[4],[[116,116],15],[[116,18],[[16,[108]]]],[[117,18],[[16,[108]]]],[[118,18],[[16,[108]]]],[[]],[[]],[[]],[118,4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[118,117],[[118,4,14]],[[118,4,14]],[118,4],[4,118],[118],[116,16],[117,16],[118,16],[118],[118],[118],[[]],[[]],[[]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[116],[[],22],[[],22],[[],22],[[118,117]],[[118,117]],[[118,14]],[118],[[118,117,4]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[[14,[[14,[39,71]],71]],[14,[71]],76],[[16,[74,72]]]],0,0,[[[14,[[14,[39,71]],71]],[14,[71]],76],[[16,[74,72]]]],[[],[[16,[100,109]]]],[[],[[16,[100,109]]]],0,0,0,[[]],0,0,0,0,[[],[[14,[39,71]]]],[[],[[14,[39,71]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[4,4,4],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[16,[4,72]]]],[[],15],[[],15],[[],4],[[],4],[[],[[16,[[14,[71]],72]]]],[[],[[16,[[14,[71]],72]]]],[4,[[16,[72]]]],[4,[[16,[72]]]],[[4,4],[[16,[72]]]],[[4,4],[[16,[72]]]],[[],[[16,[4,72]]]],[[],[[16,[4,72]]]],[[],39],[[],39],[[],[[16,[72]]]],[[]],[[]],[[]],[[],[[16,[4,72]]]],[[],[[16,[4,72]]]],[[],14],[[]],[85,4],[[],15],[[],15],[[],113],[[],15],[[],15],[[4,4],[[16,[[14,[71]],72]]]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[16,[72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[16,[74,72]]]],[[],[[16,[74,72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],[[],[[16,[72]]]],0,0,0,0,[[]],[[]],[[4,14]],[[4,14]],[4],[4],[[]],[[]],[4],[4,[[14,[71]]]],[[]],[[]],[[]],[[]],[[]],[14],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],20],[[]],[[]],[[],39],[[],39],[[]],[[],15],[[],14],[39,[[14,[39,71]]]],[[],[[14,[39,71]]]],[[],39],[[],39],[[],88],[39,[[16,[39,87]]]],[[],4],[[],4],[[],4],[[],4],[[],[[16,[37]]]],0,0,0,0,0,0,0,0,0,0,0,[119,120],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[61,[5]]],[[61,[5]]]],[[[119,[5,5]]],[[119,[5,5]]]],[[]],[[]],[[[61,[[0,[43,121]]]]]],[[[61,[[0,[43,121]]]]]],[[]],[[]],[[]],[[]],[[[61,[[0,[43,121]]]]],4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[16,[61]]]],[[],[[16,[119]]]],[[120,4,4],[[20,[39]]]],[[61,61],39],[[119,4,4],[[20,[39]]]],[122,[[16,[37]]]],[119,[[16,[37]]]],[4],[4],[4],[4],[[119,4,4],[[20,[39]]]],[[[61,[17]],18],19],[[[119,[17,17]],18],19],[[]],[[]],[[]],[[]],[[[61,[[0,[43,121]]]]],[[20,[4]]]],[61,39],[61,39],[122,120],[[[61,[[0,[43,121]]]]],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[[61,[[0,[43,121]]]],4],15],[[[124,[123]]],4],[119,125],[[119,4]],[[[61,[[0,[43,121]]]]],11],[[4,39,39,4],122],[4,124],[[4,[0,[43,121]]],[[61,[[0,[43,121]]]]]],[[4,39,39],119],[124,20],[122],[119],[61,16],[119,16],[[[61,[[0,[43,121]]]]]],[[[61,[[0,[43,121]]]]]],[[]],[[]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[],22],[[],22],[[119,125],125],[[119,125]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[125,125],[[]],[[]],[4],[4],[[],[[16,[125]]]],[4],[[125,18],19],[[]],[[],4],[[]],[125,16],[[]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,[126,127],[[126,4]],[[126,4]],[[]],[126,127],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[62,62],[[[126,[[0,[5,43]],5]]],[[126,[[0,[5,43]],5]]]],[[]],[[]],[126,[[10,[56]]]],[[126,4],[[12,[56,11]]]],[[126,4],[[12,[56,11]]]],[[126,4],[[13,[56]]]],[[]],[[]],[4],[4],[4],[4],[[],[[16,[62]]]],[[],[[16,[[126,[43]]]]]],[126,[[16,[37]]]],[126,[[16,[37]]]],[126,38],[126,38],[126,38],[126,[[16,[37]]]],[126],[4],[4],[[62,18],19],[[[126,[[0,[17,43]],17]],18],19],[[]],[[]],[[126,4],20],[[126,4],20],[[126,4]],[[126,4]],[126,127],[[],4],[[],4],[[]],[[]],[62,15],[62,15],[62,15],[126,62],[126],[[4,39],126],[[4,85,39],[[16,[126,46]]]],[62,15],[126,39],[126],[126],[62,16],[[[126,[43]]],16],[[126,39]],[126],[126],[[]],[[]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[126,62],62],[[126,62]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[128,128],[[[56,[[0,[5,43]]]]],[[56,[[0,[5,43]]]]]],[[]],[[]],[56],[56],[[]],[[]],[[]],[127,4],[127,4],[[[56,[[0,[43,121]]]]],4],[56,4],[4],[4],[4],[4],[4],[4],[[],[[16,[128]]]],[[],[[16,[[56,[43]]]]]],[4],[4],[4],[56],[[128,18],19],[[[56,[[0,[17,43]]]],18],19],[127,39],[127,39],[[]],[[]],[[]],[56,[[20,[4]]]],[56,4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[56,4],15],[128,15],[128,15],[128,15],[[[56,[[0,[43,121]]]]],[[54,[128]]]],[65,4],[56,11],[[[56,[[0,[43,121]]]]],65],[4,56],[65,20],[65,20],[[65,4],20],[[127,4,4],62],[[127,4,4,4],62],[128,16],[[[56,[43]]],16],[56],[65],[56],[128,4],[[]],[[]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[],22],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[4],[4],[[],47],[4,49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,46],[[]],[[],[[14,[4]]]],[[]],[[],51],[[],10],[4,[[52,[11]]]],[4,[[12,[11]]]],[4,13],[4,53],[[]],[[],54],[4,[[55,[11]]]],[[]],[[],4],[4,[[20,[4]]]],[4],[4],[[],[[16,[46]]]],[4,58],[4,60],[[],[[20,[4]]]],[[],[[16,[37]]]],[[],[[16,[37]]]],[[],[[16,[37]]]],[[],[[16,[37]]]],[[],[[16,[37]]]],[[],[[16,[37]]]],[[],[[16,[37]]]],[[],[[16,[37]]]],[[],[[16,[37]]]],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],[[16,[37]]]],[[],[[16,[37]]]],[4],[[],4],[[]],[[46,18],19],[[46,18],19],[[]],[[],[[20,[4]]]],[4,20],[4,20],[4],[4],[[]],[[],4],[[],4],[[]],[4,15],[[],[[20,[15]]]],[[],4],[4,[[20,[4]]]],[[]],[[]],[[4,14]],[[4,14]],[4],[4],[[],11],[4],[4],[4,[[20,[4]]]],[[]],[[]],[46,16],[[]],[4],[4,[[14,[71]]]],[[]],[[]],[[]],[[]],[[]],[[]],[46,40],[[],38],[[],39],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],22],[[]],[[]],[14],[[]],[15,[[14,[4]]]],[[],4],[15,[[14,[39]]]],[[]],0,0,0,0,0,0,0,[129,130],[[129,4]],[[129,4]],[[129,4],[[49,[131]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[131,[5]]],[[131,[5]]]],[[[129,[5,5]]],[[129,[5,5]]]],[132,132],[[]],[[]],[[]],[131],[129,[[51,[131]]]],[129,[[10,[131]]]],[[129,4],[[52,[131,11]]]],[[129,4],[[12,[131,11]]]],[[129,4],[[13,[131]]]],[[129,4],[[53,[131]]]],[131],[129,[[54,[131]]]],[[129,4],[[55,[131,11]]]],[[]],[[]],[[]],[131,4],[4],[4],[4],[4],[4],[4],[[],[[16,[131]]]],[[],[[16,[129]]]],[[129,4],[[58,[131]]]],[[129,4],[[60,[131]]]],[4],[4],[4],[[[131,[17]],18],19],[[[129,[17,17]],18],19],[[132,18],19],[[]],[[]],[[]],[131,[[20,[4]]]],[[129,4],20],[[129,4],20],[[129,4]],[[129,4]],[129,130],[131,4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[131,4],15],[133,85],[129,85],[131,11],[[134,85,39],[[16,[133,132]]]],[4,131],[[134,85,39],[[16,[129,132]]]],[129],[133,39],[129,39],[129],[131,16],[129,16],[131],[131],[129],[129],[[]],[[]],[[]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],[[16,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[],22],[[]],[[]],[[]]],"p":[[3,"BAensemble"],[6,"Graph"],[3,"ConfigurationModel"],[15,"usize"],[8,"Clone"],[4,"ConfigurationModelStep"],[4,"UndoStepErrorCM"],[3,"GenericGraph"],[3,"NodeContainer"],[3,"ContainedIterMut"],[4,"IterWrapper"],[3,"NContainedIterMut"],[3,"INContainedIterMut"],[3,"Vec"],[15,"bool"],[4,"Result"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Error"],[3,"TypeId"],[3,"DualGraph"],[4,"AddEdgeError"],[3,"Adj"],[4,"AdjSingle"],[6,"DualIndex"],[8,"Iterator"],[4,"WhichGraph"],[3,"DfsDualContained"],[8,"PartialEq"],[6,"SingleDualGraph"],[3,"DfsDualIndex"],[3,"BfsDualIndex"],[3,"ErEnsembleC"],[4,"ErStepC"],[3,"Error"],[3,"String"],[15,"f64"],[15,"str"],[3,"ErEnsembleM"],[3,"ErStepM"],[8,"Node"],[3,"EmptyNode"],[3,"CountingNode"],[4,"GraphErrors"],[15,"f32"],[3,"BfsFiltered"],[3,"Bfs"],[3,"BfsMut"],[3,"ContainedIter"],[3,"NContainedIter"],[3,"NIContainedIter"],[3,"Iter"],[3,"NContainerIter"],[3,"SwContainer"],[6,"HistUsizeFast"],[3,"Dfs"],[3,"DfsMut"],[3,"DfsWithIndex"],[3,"SpacialNodeContainer"],[4,"SwChangeState"],[8,"IntoIterator"],[8,"FromIterator"],[3,"SwEdgeIterNeighbors"],[3,"RewlWalker"],[3,"ReesWalker"],[3,"PaletteRGB"],[3,"ColorRGB"],[3,"ReplicaExchangeEntropicSampling"],[3,"Global"],[4,"HistErrors"],[3,"HistogramFast"],[3,"ReplicaGlued"],[3,"CubeHelixParameter"],[4,"LogBase"],[3,"ReplicaExchangeWangLandau"],[3,"EntropicSamplingAdaptive"],[3,"HistogramFloat"],[3,"HistogramInt"],[3,"AtomicHistogramInt"],[3,"AtomicHistogramFloat"],[3,"HeatmapUsize"],[3,"Metropolis"],[3,"NonZeroUsize"],[3,"WangLandauAdaptive"],[4,"WangLandauErrors"],[4,"WangLandauMode"],[3,"WangLandau1T"],[4,"SetInitialError"],[4,"HeatmapError"],[4,"GnuplotAxis"],[3,"GnuplotSettings"],[3,"GnuplotPointSettings"],[4,"GnuplotPalette"],[4,"GnuplotTerminal"],[3,"HeatmapF64"],[4,"EntropicErrors"],[3,"EntropicSampling"],[3,"GlueResult"],[4,"MetropolisError"],[4,"RewlCreationErrors"],[4,"ExtremeInterval"],[4,"ThresholdErrors"],[3,"ReplicaExchangeWangLandauBuilder"],[3,"HeatmapUsizeMean"],[3,"HeatmapF64Mean"],[3,"Error"],[4,"GlueErrors"],[4,"RewlBuilderErr"],[3,"RwLockReadGuard"],[15,"u64"],[4,"Ordering"],[15,"u8"],[3,"RangeInclusive"],[4,"CoinFlip"],[3,"CoinFlipMove"],[3,"CoinFlipSequence"],[3,"SpacialEnsemble"],[6,"SpacialGraph"],[8,"SerdeStateConform"],[3,"DogEnsemble"],[8,"Rng"],[3,"LatinHypercubeSampling2D"],[4,"SpacialStep"],[3,"SwEnsemble"],[6,"SwGraph"],[3,"SwEdge"],[3,"SmallWorldWS"],[6,"WSGraph"],[3,"WSContainer"],[4,"WSCreationError"],[6,"WS"],[15,"u32"],[13,"Added"],[13,"UnableToAddEdge"],[13,"UnableToRemoveEdge"],[8,"AdjTrait"],[13,"Nothing"],[13,"Something"],[13,"Graph1"],[13,"Graph2"],[13,"AddedEdge"],[13,"RemovedEdge"],[13,"GError"],[13,"GenericIter"],[13,"SwIter"],[8,"HasUnsignedVersion"],[8,"HistogramCombine"],[8,"Histogram"],[8,"AtomicHistogram"],[8,"HistogramVal"],[8,"AtomicHistogramVal"],[8,"WangLandauEnergy"],[8,"EntropicEnergy"],[8,"WangLandauEnsemble"],[8,"EntropicEnsemble"],[8,"WangLandau"],[8,"Entropic"],[8,"WangLandauHist"],[8,"EntropicHist"],[8,"HistogramIntervalDistance"],[8,"IntervalOrder"],[8,"MarkovChain"],[8,"HistogramPartition"],[8,"SimpleSample"],[8,"HasRng"],[13,"EstimatedStatistic"],[13,"BorderCreation"],[13,"Labels"],[13,"FromValues"],[13,"CubeHelix"],[13,"RGB"],[13,"EpsLatex"],[13,"PDF"],[13,"XError"],[13,"YError"],[13,"SeedError"],[13,"EstimatedStatistic"],[13,"AddedEdge"],[13,"RemovedEdge"],[13,"Rewire"],[13,"Reset"],[13,"GError"],[8,"WithGraph"],[8,"MeasurableGraphQuantities"],[8,"GraphIterators"],[8,"AdjContainer"],[8,"GraphIteratorsMut"],[8,"Dot"],[8,"DotExtra"],[8,"AdjList"],[8,"Contained"]]},\
"sampling":{"doc":"For sampling ensembles","t":[0,0,0,0,0,0,0,0,0,0,0,5,5,8,8,8,8,4,8,3,3,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,0,4,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,4,3,4,13,13,3,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,12,11,11,11,11,11,11,11,11,12,12,11,5,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,3,13,3,13,13,13,13,4,4,3,3,4,4,3,3,6,3,3,13,13,3,13,13,13,13,13,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,3,3,8,13,13,8,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,3,3,3,8,8,8,8,13,13,16,13,13,13,13,13,16,13,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,6,6,13,13,13,13,13,13,13,13,13,13,3,3,6,6,4,4,3,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,8,8,10,11,11,11,11,11,10,10,11,11,11,11,10,10,10,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,4,8,3,3,8,8,8,4,8,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12],"n":["bootstrap","entropic_sampling","examples","glue","heatmap","histogram","metropolis","rees","rewl","traits","wang_landau","bootstrap","bootstrap_copyable","Entropic","EntropicEEH","EntropicEnergy","EntropicEnsemble","EntropicErrors","EntropicHist","EntropicSampling","EntropicSamplingAdaptive","EstimatedStatistic","InvalidBestof","InvalidLogDensity","InvalidMinMaxTrialSteps","InvalidWangLandau","NotEnoughStatistics","best_of_steps","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone","clone_into","clone_into","clone_into","conv","conv","conv","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","energy","energy","energy","energy","energy","ensemble","ensemble","ensemble","ensemble","ensemble","ensemble_mut","ensemble_mut","ensemble_mut","entropic_sampling","entropic_sampling","entropic_sampling_acc","entropic_sampling_acc","entropic_sampling_unsafe","entropic_sampling_unsafe","entropic_sampling_while","entropic_sampling_while","entropic_sampling_while_acc","entropic_sampling_while_acc","entropic_sampling_while_unsafe","entropic_sampling_while_unsafe","entropic_step","entropic_step","entropic_step_acc","entropic_step_acc","entropic_step_unsafe","entropic_step_unsafe","estimate_statistics","fmt","fmt","fmt","fraction_accepted_current","fraction_accepted_total","fraction_accepted_total","fraction_accepted_total","fraction_accepted_total_entropic","fraction_rejected_total","fraction_rejected_total","from","from","from","from_wl","from_wl_adaptive","from_wl_adaptive","hist","hist","hist","hist","hist","init","init","init","into","into","into","is_finished","is_finished","is_rebuilding_statistics","log_density","log_density","log_density","log_density_base","log_density_base","log_density_base10","log_density_base10","log_density_estimate","log_density_estimate","log_density_refined","log_density_refined","max_step_size","min_step_size","refine_estimate","refine_estimate","rng","rng","serialize","serialize","serialize","set_adjust_bestof_every","set_step_goal","set_step_goal","step_count","step_counter","step_counter","step_counter","step_goal","step_goal","step_goal","step_goal","step_size","steps_total","steps_total","swap_rng","swap_rng","to_owned","to_owned","to_owned","total_entr_steps_accepted","total_entr_steps_rejected","total_steps_accepted","total_steps_accepted","total_steps_accepted","total_steps_rejected","total_steps_rejected","total_steps_rejected","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write_log","write_log","write_log","0","coin_flips","CoinFlip","CoinFlipMove","CoinFlipSequence","Head","Tail","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone","clone_into","clone_into","clone_into","conv","conv","conv","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","fmt","fmt","fmt","from","from","from","head_count","init","init","init","into","into","into","m_step","m_steps","m_steps_acc","max_heads_in_a_row","new","rng","serialize","serialize","serialize","steps_accepted","steps_rejected","swap_rng","to_owned","to_owned","to_owned","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_into","try_into","try_into","turn","type_id","type_id","type_id","undo_step","undo_step_quiet","undo_steps","undo_steps_quiet","update_head_count","vzip","vzip","vzip","Base10","BaseE","BinarySearch","BorderCreation","EmptyList","GlueErrors","GlueResult","LogBase","NoOverlap","OutOfBounds","ReplicaGlued","aligned","average_merged_and_aligned","base","borders","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone","clone_into","clone_into","clone_into","conv","conv","conv","conv","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","derivative","derivative_merged_and_aligned","deserialize","deserialize","drop","drop","drop","drop","encapsulating_hist","fmt","fmt","fmt","from","from","from","from","from","glue_entropic","glue_wl","glued","glued_log10_probability","init","init","init","init","into","into","into","into","left_list","log10_vec","new_unchecked","norm_log10_sum_to_1","serialize","serialize","switch_base","to_owned","to_owned","to_owned","total_steps","total_steps_accepted","total_steps_rejected","try_cast","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write","write","write_rescaled","0","derivative_merged","five_point_derivitive","ColorRGB","CubeHelix","CubeHelixParameter","Dimension","Empty","EpsLatex","FromValues","GnuplotAxis","GnuplotPalette","GnuplotPointSettings","GnuplotSettings","GnuplotTerminal","HeatmapError","HeatmapF64","HeatmapF64Mean","HeatmapU","HeatmapUsize","HeatmapUsizeMean","Labels","PDF","PaletteRGB","PresetHSV","PresetRGB","RGB","XError","YError","add_color","approximate_color_rgb","bins_hit","bins_not_hit","blue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","color","combine","combine","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","conv","count","count","count","count","count_inside_heatmap","count_inside_heatmap","count_multiple","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_hex","fmt_palette","frame","frame","frame_color","frame_color","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_labels","from_slice","gamma","get","get","get_legend","get_row","get_row","get_row_unchecked","get_size","get_title","get_unchecked","get_unchecked","gnuplot","gnuplot","gnuplot","gnuplot","gnuplot_quick","gnuplot_quick","gnuplot_quick","gnuplot_quick","green","heatmap","heatmap","heatmap","heatmap","heatmap_index","heatmap_normalize_rows","heatmap_normalized","heatmap_normalized_columns","heatmap_normalized_rows","height","height","height_count_hist","height_hist","height_hist","hue","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into_gnuplot_palette","into_gnuplot_palette","into_heatmap_normalized","into_heatmap_normalized_columns","into_heatmap_normalized_columns","into_heatmap_normalized_rows","legend","low_high","mean","mean","mean_iter","mean_iter","mean_slice","mean_slice","new","new","new","new","new","new","new","new","new","new_from_array","normalize_columns","normalize_total","palette","palette","red","reset","reset","reverse","rgb_from_gray","rotation","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","size","size","size","start_color","terminal","terminal","title","title","to_array","to_hex","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total","total","total_misses","total_misses","transpose","transpose","transpose_inplace","transpose_inplace","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec_normalized","vec_normalized_columns","vec_normalized_rows","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","width","width","width_count_hist","width_hist","width_hist","write_heatmap","write_hex","write_palette","write_to","write_to","x_axis","x_axis","x_label","x_label","y_axis","y_axis","y_label","y_label","labels","max","min","tics","0","0","0","0","0","0","AtomicHistF32","AtomicHistF64","AtomicHistI128","AtomicHistI16","AtomicHistI32","AtomicHistI64","AtomicHistI8","AtomicHistIsize","AtomicHistU128","AtomicHistU16","AtomicHistU32","AtomicHistU64","AtomicHistU8","AtomicHistUsize","AtomicHistogram","AtomicHistogramFloat","AtomicHistogramInt","AtomicHistogramVal","CastError","EmptySlice","HasUnsignedVersion","HistErrors","HistF32","HistF64","HistI128","HistI128Fast","HistI16","HistI16Fast","HistI32","HistI32Fast","HistI64","HistI64Fast","HistI8","HistI8Fast","HistIsize","HistIsizeFast","HistU128","HistU128Fast","HistU16","HistU16Fast","HistU32","HistU32Fast","HistU64","HistU64Fast","HistU8","HistU8Fast","HistUsize","HistUsizeFast","Histogram","HistogramCombine","HistogramFast","HistogramFloat","HistogramInt","HistogramIntervalDistance","HistogramPartition","HistogramVal","IntervalOrder","IntervalWidthZero","InvalidVal","LeBytes","ModuloError","NoBins","OutsideHist","Overflow","Underflow","Unsigned","UsizeCastError","align","align","any_bin_zero","any_bin_zero","any_bin_zero","any_bin_zero","bin_count","bin_count","bin_count","bin_count","bin_count","bin_count","bin_count","bin_count","bin_count","bin_hits_iter","bin_hits_iter","bin_hits_iter","bin_hits_iter","bin_hits_iter","bin_iter","bin_iter","bin_iter","bin_iter","bin_iter","borders","borders","borders","borders","borders_clone","borders_clone","borders_clone","borders_clone","borders_clone","borders_clone","borders_clone","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","conv","conv","conv","conv","conv","conv","count_index","count_index","count_index","count_index","count_multiple_index","count_multiple_index","count_multiple_index","count_multiple_index","count_multiple_index","count_multiple_index","count_multiple_index","count_val","count_val","count_val","count_val","count_val","count_val","count_val","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","distance","distance","distance","distance","distance","distance","distance","drop","drop","drop","drop","drop","drop","encapsulating_hist","encapsulating_hist","eq","equal_range","first_border","first_border","first_border","first_border","first_border","first_border","first_border","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_le_bytes","get_bin_index","get_bin_index","get_bin_index","get_bin_index","get_bin_index","get_bin_index","get_bin_index","hist","hist","hist","hist","hist","hist","hist","increment","increment","increment","increment","increment","increment_quiet","increment_quiet","increment_quiet","increment_quiet","increment_quiet","init","init","init","init","init","init","interval_distance_overlap","interval_distance_overlap","interval_distance_overlap","interval_distance_overlap","interval_distance_overlap","interval_distance_overlap","interval_length","interval_length","into","into","into","into","into","into","is_inside","is_inside","is_inside","is_inside","is_inside","is_inside","is_inside","left","left_compare","left_compare","left_compare","left_compare","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","not_inside","not_inside","not_inside","not_inside","not_inside","not_inside","not_inside","overlapping_partition","overlapping_partition","overlapping_partition","overlapping_partition","range_inclusive","reset","reset","reset","reset","reset","reset","reset","right","second_last_border","second_last_border","second_last_border","second_last_border","second_last_border","second_last_border","second_last_border","serialize","serialize","serialize","serialize","serialize","serialize","to_le_bytes","to_owned","to_owned","to_owned","to_owned","try_add","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","InfinitBeta","InvalidState","MetF32","MetF64","MetI128","MetI16","MetI32","MetI64","MetI8","MetIsize","MetU128","MetU16","MetU32","MetU64","MetU8","MetUsize","Metropolis","MetropolisError","NAN","borrow","borrow","borrow_mut","borrow_mut","cast","cast","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_trunc","cast_trunc","change_markov_chain","clone","clone","clone_into","clone_into","conv","conv","counter","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","energy","ensemble","ensemble_mut","fmt","from","from","init","init","into","into","m_beta","metropolis","metropolis_efficient","metropolis_efficient_unsafe","metropolis_efficient_while","metropolis_efficient_while_unsafe","metropolis_unsafe","metropolis_while","metropolis_while_unsafe","new_from_m_beta","new_from_temperature","reset_counter","rng","serialize","serialize","set_energy","set_m_beta","set_step_size","set_temperature","step_size","swap_rng","to_owned","to_owned","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Rees","ReesWalker","ReplicaExchangeEntropicSampling","acceptance_rate_markov","add_extra","add_extra","average_merged_log_probability_and_align","average_merged_log_probability_and_align","borrow","borrow","borrow_mut","borrow_mut","cast","cast","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_trunc","cast_trunc","change_step_size_of_interval","change_step_size_of_interval","change_sweep_size_of_interval","change_sweep_size_of_interval","check_energy_fn","check_energy_fn","clone","clone_into","conv","conv","deref","deref","deref_mut","deref_mut","derivative_merged_log_prob_and_aligned","derivative_merged_log_prob_and_aligned","deserialize","deserialize","drop","drop","energy","energy_copy","ensemble_iter","ensemble_iter","ensemble_iter_mut","ensemble_iter_mut","extra_slice","extra_slice","extra_slice_mut","extra_slice_mut","fmt","fmt","from","from","from","from","get_ensemble","get_ensemble","get_ensemble_mut","get_ensemble_mut","get_hist","get_hist","get_step_size_of_interval","get_step_size_of_interval","get_sweep_size_of_interval","get_sweep_size_of_interval","hist","hists","hists","id","init","init","into","into","is_finished","is_finished","is_finished","log10_density","log10_density_refined","log_density","log_density_refined","merged_log10_prob","merged_log10_probability_and_align","merged_log10_probability_and_align_ignore","merged_log_prob","merged_log_prob","merged_log_prob","merged_log_prob_and_aligned","merged_log_prob_and_aligned","merged_log_prob_ignore","merged_log_probability_and_align","merged_log_probability_and_align_ignore","num_intervals","num_intervals","num_walkers","num_walkers","proposed_replica_exchanges","rees_roundtrip_iter","rees_roundtrip_iter","refine","refine","refine","rejected_markov_steps","replica_exchange_frac","replica_exchanges","rewl_roundtrip_iter","rewl_roundtrip_iter","serialize","serialize","simulate_until_convergence","simulate_until_convergence","simulate_while","simulate_while","step_count","step_size","step_size_change","step_threshold","swap_extra","swap_extra","sweep","sweep","sweep_size","sweep_size_change","to_owned","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_from","try_from","try_into","try_into","type_id","type_id","unpack_extra","unpack_extra","vzip","vzip","walkers","walkers","walkers_per_interval","walkers_per_interval","Empty","EmptySlice","ExtremeInterval","Glued","GluedResult","HistBinCount","HistsizeError","Left","LenMissmatch","LenMissmatch","Negative","Negative","NonNormal","NonNormalThreshold","None","ReplicaExchangeWangLandau","ReplicaExchangeWangLandauBuilder","Rewl","RewlBuilder","RewlBuilderErr","RewlCreationErrors","RewlWalker","Right","SeedError","ThresholdErrors","Zero","acceptance_rate_markov","average_merged_log_probability_and_align","average_merged_log_probability_and_align","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","change_step_size_of_interval","change_step_size_of_interval","change_sweep_size_of_interval","change_sweep_size_of_interval","check_energy_fn","check_energy_fn","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","conv","conv","conv","conv","conv","conv","conv","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","derivative_glue_and_align","derivative_glue_and_align_ignore","derivative_merged_log_prob_and_aligned","derivative_merged_log_prob_and_aligned","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","energy","energy_clone","energy_copy","ensemble_iter","ensemble_iter","ensemble_iter_mut","ensemble_iter_mut","ensembles","ensembles","finished_fraction","finished_fraction","finished_slice","finished_slice","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_ensemble","from_ensemble","from_ensemble_tuple","from_ensemble_tuple","from_ensemble_vec","from_ensemble_vec","get_ensemble","get_ensemble","get_ensemble_mut","get_ensemble_mut","get_hist","get_hist","get_id_vec","get_id_vec","get_step_size_of_interval","get_step_size_of_interval","get_sweep_size_of_interval","get_sweep_size_of_interval","greedy_build","greedy_build","greedy_choose_rng_build","greedy_choose_rng_build","hist","hists","hists","hists","hists","id","init","init","init","init","init","init","init","interval_heuristik_build","interval_heuristik_build","interval_heuristik_choose_rng_build","interval_heuristik_choose_rng_build","into","into","into","into","into","into","into","into_rees","into_rees","into_rees_with_extra","into_rees_with_extra","is_finished","is_finished","largest_log_f","largest_log_f","log10_density","log_density","log_f","log_f_vec","log_f_vec","log_probability_and_align","log_probability_and_align_ignore","max_roundtrips","max_roundtrips","merged_log10_prob","merged_log10_probability_and_align","merged_log10_probability_and_align_ignore","merged_log_prob","merged_log_probability_and_align","merged_log_probability_and_align_ignore","min_roundtrips","min_roundtrips","mixed_heuristik_build","mixed_heuristik_build","num_intervals","num_intervals","proposed_replica_exchanges","rejected_markov_steps","replica_exchange_frac","replica_exchanges","roundtrip_iter","roundtrip_iter","serialize","serialize","serialize","serialize","serialize","serialize","set_log_f_threshold","set_log_f_threshold","simulate_until_convergence","simulate_until_convergence","simulate_while","simulate_while","step_count","step_size","step_size_change","step_sizes","step_sizes","step_sizes_mut","step_sizes_mut","sweep","sweep","sweep_size","sweep_size_change","sweep_sizes","sweep_sizes","sweep_sizes_mut","sweep_sizes_mut","to_owned","to_owned","to_owned","to_owned","to_owned","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_greedy_build","try_greedy_build","try_greedy_choose_rng_build","try_greedy_choose_rng_build","try_interval_heuristik_build","try_interval_heuristik_build","try_interval_heuristik_choose_rng_build","try_interval_heuristik_choose_rng_build","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_mixed_heuristik_build","try_mixed_heuristik_build","try_mixed_heuristik_choose_rng_build","try_mixed_heuristik_choose_rng_build","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","walkers","walkers","walkers_per_interval","walkers_per_interval","wang_landau_mode","0","HasRng","MarkovChain","SimpleSample","m_step","m_step_acc","m_steps","m_steps_acc","m_steps_acc_quiet","m_steps_quiet","randomize","rng","simple_sample","simple_sample_vec","steps_accepted","steps_rejected","swap_rng","undo_step","undo_step_quiet","undo_steps","undo_steps_quiet","CheckRefineEvery0","DimensionError","EstimatedStatistic","InitFailed","InvalidBestof","InvalidLogF","InvalidLogFThreshold","InvalidMinMaxTrialSteps","NonFiniteEncountered","NotEnoughStatistics","NotInitialized","Refine1T","RefineOriginal","SetInitialError","WangLandau","WangLandau1T","WangLandauAdaptive","WangLandauEEH","WangLandauEnergy","WangLandauEnsemble","WangLandauErrors","WangLandauHist","WangLandauMode","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_ceil","cast_floor","cast_floor","cast_floor","cast_floor","cast_floor","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_nearest","cast_trunc","cast_trunc","cast_trunc","cast_trunc","cast_trunc","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","conv","conv","conv","conv","conv","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","energy","energy","energy","ensemble","ensemble","ensemble","ensemble_mut","ensemble_mut","ensemble_mut","eq","estimate_statistics","finished_rebuilding_statistics","fmt","fmt","fmt","fmt","fmt","fraction_accepted_current","fraction_accepted_total","fraction_accepted_total","fraction_of_statistics_gathered","fraction_rejected_total","fraction_rejected_total","from","from","from","from","from","hist","hist","hist","init","init","init","init","init","init_greedy_heuristic","init_greedy_heuristic","init_interval_heuristik","init_interval_heuristik","init_mixed_heuristik","init_mixed_heuristik","into","into","into","into","into","into_inner","is_finished","is_finished","is_initialized","is_initialized","is_mode_1_t","is_mode_original","is_rebuilding_statistics","log_density","log_density","log_density","log_density_base","log_density_base","log_density_base10","log_density_base10","log_f","log_f","log_f","log_f_threshold","log_f_threshold","log_f_threshold","max_step_size","min_step_size","mode","mode","mode","new","new","samples_per_trial","serialize","serialize","serialize","serialize","set_initial_probability_guess","set_log_f_threshold","set_log_f_threshold","set_log_f_threshold","step_counter","step_counter","step_counter","steps_total","steps_total","to_owned","to_owned","to_owned","to_owned","to_owned","total_steps_accepted","total_steps_accepted","total_steps_accepted","total_steps_rejected","total_steps_rejected","total_steps_rejected","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_ceil","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_floor","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_nearest","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_cast_trunc","try_conv","try_conv","try_conv","try_conv","try_conv","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","wang_landau_convergence","wang_landau_convergence","wang_landau_convergence_acc","wang_landau_convergence_acc","wang_landau_convergence_unsafe","wang_landau_convergence_unsafe","wang_landau_step","wang_landau_step","wang_landau_step_acc","wang_landau_step_acc","wang_landau_step_unsafe","wang_landau_step_unsafe","wang_landau_while","wang_landau_while","wang_landau_while_acc","wang_landau_while_acc","wang_landau_while_unsafe","wang_landau_while_unsafe","write_log","write_log","write_log","0"],"q":["sampling","","","","","","","","","","","sampling::bootstrap","","sampling::entropic_samplingsampling::entropic_sampling::EntropicErrors","sampling::examples","sampling::examples::coin_flips","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sampling::glue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sampling::glue::GlueErrors","sampling::glue::derivative","","sampling::heatmapsampling::heatmap::GnuplotAxis","","","","sampling::heatmap::GnuplotPalette","","sampling::heatmap::GnuplotTerminal","","sampling::heatmap::HeatmapError","","sampling::histogramsampling::metropolis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sampling::rees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sampling::rewl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sampling::rewl::RewlBuilderErr","sampling::traits","","","","","","","","","","","","","","","","","","","","sampling::wang_landausampling::wang_landau::WangLandauErrors"],"d":["Bootstrap resampling functions","For using entropic sampling after a wang landau simulation","Contains examples","Glue together overlapping intervals of either entropic …","Generate heatmaps. Create Gnuplot scripts to plot said …","Traits for implementing histograms for Wang Landau or …","For making a Metropolis simulation","Entropic sampling using a replica exchange approach","Replica exchange wang-landau","Contains traits useful for sampling an ensemble like …","Wang Landau Implementation","returns reduced value + estimated error (as sqrt of …","Similar to bootstrap but for stuff that implements <code>Copy</code>. …","Traits for quantities that all Entropic simulations have","Helper trait, so that you have to type less","trait to request the current energy from a Entropic …","trait to request a reference to the current (state of the) …","Error states, that entropic sampling, or the creation of …","trait to request the current histogram from a Entropic …","Entropic sampling made easy","Entropic sampling made easy","Still Gathering Statistics, this is only an estimate!","You are trying to have a <code>min_best_of_count</code> that is  larger …","Posible reasons","Invalid trial step. Is your max_step smaller than your …","source (<code>WangLandauAdaptive</code>) was in an invalid state","Still in the process of gathering statistics Not enough to …","Currently used best of","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","returns the last accepted <code>Energy</code> calculated <code>None</code> if no …","Energy of ensemble","Energy of ensemble","Energy of ensemble","Energy of ensemble","return reference to current state of ensemble","","Current state of the Ensemble","Current state of the Ensemble","","returns mutable reference to ensemble","","","Entropic sampling","Entropic sampling","Entropic sampling using an accumulating markov step","Entropic sampling using an accumulating markov step","Entropic sampling","Entropic sampling","Entropic sampling","Entropic sampling","Entropic sampling using an accumulating markov step","Entropic sampling using an accumulating markov step","Entropic sampling","Entropic sampling","Entropic step","Entropic step","Accumulating entropic step","Entropic sampling using an accumulating markov step","Entropic step","Entropic step","Estimate accept/reject statistics","","","","Fraction of steps accepted since the statistics were reset …","Calculate, which fraction of steps were accepted","Calculate, which fraction of steps were accepted","Fraction of steps accepted since the creation of <code>self</code>","Fraction of steps accepted since the creation of <code>self</code>","Calculate, which fraction of steps were rejected","Calculate, which fraction of steps were rejected","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates Entropic from a <code>WangLandauAdaptive</code> state","Creates EntropicSamplingAdaptive from a <code>WangLandauAdaptive</code> …","Creates Entropic from a <code>WangLandauAdaptive</code> state","returns current histogram","Return current state of histogram","","Return current state of histogram","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks wang landau threshold","Checks wang landau threshold","Is the simulation in the process of rebuilding the …","Current (non normalized) estimate of ln(P(E))","","","Current (non normalized) estimate of log_base(P(E))","Current (non normalized) estimate of log_base(P(E))","Current (non normalized) estimate of log10(P(E))","Current (non normalized) estimate of log10(P(E))","returns the (non normalized) log_density estimate …","returns the (non normalized) log_density estimate …","calculates the (non normalized) log_density estimate …","calculates the (non normalized) log_density estimate …","Largest possible markov step (<code>m_steps</code> of MarkovChain …","Smallest possible markov step (<code>m_steps</code> of MarkovChain …","Calculates <code>self.log_density_refined</code> and uses that as …","Calculates <code>self.log_density_refined</code> and uses that as …","","","","","","How often to adjust <code>bestof_steps</code>?","Number of entropic steps to be performed","Number of entropic steps to be performed","Number of entropic steps done until now","Counter","Number of entropic steps done until now","Number of entropic steps done until now","What is the goal to reach?","Number of entropic steps to be performed","Number of entropic steps to be performed","Number of entropic steps to be performed","Smallest possible markov step (<code>m_steps</code> of MarkovChain …","Counter","Counter","","","","","","total number of entropic steps, that were accepted","total number of entropic steps, that were rejected","How many steps were accepted until now?","","","How many steps were rejected until now?","","","","","","","","","","","","","","","","","","","","","","","","Uses as stepsize: first entry of bestof. If bestof is …","","","","","","","","","","","","Writes Information about the simulation to a file. E.g. …","","","","Example Coin flips","Result of flipping a coin","Result of markov Step","A sequence of Coin flips. Contains random Number generator","The result is Head","The result is Tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Count how often <code>Head</code> occurs in the Coin flip sequence","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform a markov step","Only implemented for testcases","Only implemented for testcases","Count many times <code>Head</code> occured in a row","Create new coin flip sequence","","","","","Only implemented for testcases","Only implemented for testcases","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Turn Coin around, i.e., invert CoinFlip","","","","","","Only implemented for testcases","Only implemented for testcases","Calculate the head count, if a previouse head count of the …","","","","use base 10","use base e","Binary search failed - PartialOrd::partial_cmp returned …","<code>original_hist.borders_clone()</code> failed","Nothing to be glued, glue interval list was empty","Possible errors that can occur during gluing together …","Glued together probability","Which LogBase is being used/should be used?","The intervals need to overlap, otherwise no gluing can …","Glue interval and intervals to be glued do not match","Result of the gluing","Get alignment slice","Calculate the probability density function from …","Returns the current base of the contained logarithms","This are the bin borders","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Module for numeric derivatives","Calculate the probability density function from …","","","","","","","Returns encapsulating Histogram","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Combine multiple WangLandau intervals to get the …","Combine multiple WangLandau intervals to get the …","Returns Slice which represents the glued logarithmic …","probably the result you want, i.e., what you were …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Index map","log10 of “probabilities” of the curves, you were …","Create a new <code>ReplicaGlued&lt;Hist&gt;</code> instance without checking …","Normalize log10 probability density","","","Change from Base 10 to Base E or the other way round","","","","How many markov steps were performed in total?","How many markov steps were accepted in total?","How many markov steps were rejected in total?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write the result to a file","Write the ReplicaGlued in a human readable format","Write the normalized probability density function","","Calculates the derivative of a Vector","five-point stencil derivative method ","RGB value","Use a CubeHelix palette","Implements color palett from …","you tried to combine heatmaps of different Dimensions","Does not specify a terminal","Use EpsLatex as terminal in gnuplot","construct the labels","For labeling the gnuplot plots axis","defines presets for different color palettes","Defines gnuplot point","Settings for gnuplot","Options for choosing gnuplot Terminal","Errors of Heatmap","Heatmap","Heatmap with mean of y-axis","Shorthand for HeatmapUsize","Heatmap","Heatmap with mean of y-axis","use labels ","Use pdf as gnuplot terminal","A color palette in RGB space","Use preset HSV palette","Use preset RGB palette, i.e., the  default palette of …","Define a palette in RGB space","An Error while calculating the index of the x coordinate","An Error while calculating the index of the y coordinate","add a color to the palette","Calculate color from gray value.Gray value should be in …","counts how many bins of the heatmap where hit at least once","counts how many bins of the heatmap where never hit","The blue part","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Choose the color for the point","Color of the point","“combine” heatmaps","“combine” heatmaps","","","","","","","","","","","","","","Update heatmap","Update heatmap","update the heatmap","update the heatmap","Update Heatmap","Update Heatmap","update the heatmap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write hex representation to a fmt writer","write string to define this palette in gnuplot to fmt …","Should there be a frame around the point ? This is good …","should the point have a frame?","Which color should the frame have?","Which color should the frame be?","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Create new GnuplotAxis::Labels","Similar to <code>from_labels</code>","Builder pattern - set gamma","Returns value stored in the heatmap at specified  …","Returns value stored in the heatmap at specified  …","Get entry for legend","row of the heatmap","row of the heatmap","row of the heatmap","Get the point size","currently set title","Returns value stored in the heatmap at specified  …","Returns value stored in the heatmap at specified  …","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","Create a gnuplot script to plot your heatmap","The green part","Internal <code>HeatmapU</code>","Internal <code>HeatmapF64</code>","returns heatmap","returns heatmap","Get index of heatmap corresponding to a coordinate","Normalizes self","returns normalized heatmap","returns (column wise) normalized heatmap","returns (row wise) normalized heatmap","returns height of the heatmap","returns height of the heatmap","Returns reference to current height Histogram","Returns reference to current height Histogram","Returns reference to current height Histogram","#Set hue intensity. Builder pattern Valid values are 0.0 &lt;…","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts <code>self</code> into the corresponding enum of <code>GnuplotPallet</code>","Converts <code>self</code> into the corresponding enum of <code>GnuplotPallet</code>","returns normalized heatmap","returns (column wise) normalized heatmap","returns (column wise) normalized heatmap","returns (row wise) normalized heatmap","Change the legend entry","Builder pattern - set low and high value","Get a mean vector","Get a mean vector","Iterate over the calculated mean","Iterate over the calculated mean","Internal slice for mean","Internal slice for mean","Create a heatmap","Create a heatmap","Create a new Heatmap","Create new GnuplotAxis::FromValues","Create new, default, GnuplotSettings","Create a new color","Initialize Palette","Create a new instance of GnuplotPointSettings","Create a new Heatmap","Create color from an array","Normalizes self","Normalizes self","Builder pattern - set color palette","Color palette for heatmap","The red part","Reset","Reset","Builder pattern - set reverse","Calculate color from gray value. Gray value should be in …","#Set rotation. Builder pattern Rotation in color space. …","","","","","","","","","","","","Builder pattern - set size of terminal","Choose the size of the point","Size of the terminal","Builder pattern - set start color","Builder pattern - set terminal","which terminal to use for gnuplot","Builder pattern - set title","title for gnuplot","convert color to array,","Turn into hex representation","","","","","","","","","","","","counts how often the heatmap was hit","counts how often the heatmap was hit","Counts how often the Heatmap was missed, i.e., you tried …","Counts how often the Heatmap was missed, i.e., you tried …","Use this to get a “flipped” heatmap","Use this to get a “flipped” heatmap","Use this to get a “flipped” heatmap","Use this to get a “flipped” heatmap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","returns Vector representing normalized heatmap","returns vector representing heatmap, normalized column wise","returns vector representing heatmap, normalized row wise","","","","","","","","","","","","","","returns width of the heatmap","returns width of the heatmap","Returns reference to current width Histogram","Returns reference to current width Histogram","Returns reference to current width Histogram","Write a heatmap with the given gnuplot Settings","Write hex representation to a io writer","write string to define this palette in gnuplot to io writer","Write heatmap to file","Write heatmap to file","Set x_axis - See GnuplotAxis or try it out","how to format the labels of the x axis?","Builder pattern - set x_label","x label for gnuplot","Set y_axis - See GnuplotAxis or try it out","how to format the labels of the y axis?","Builder pattern - set y_label","y label for gnuplot","this are the labels","maximum value for axis labels","minimum value for axis labels","number of tics, should be at least 2","","","","","","","Histogram for binning <code>f32</code> - alias for <code>HistogramFloat&lt;f32&gt;</code>","Histogram for binning <code>f64</code> - alias for <code>HistogramFloat&lt;f64&gt;</code>","Histogram for binning <code>i128</code> - alias for …","Histogram for binning <code>i16</code> - alias for …","Histogram for binning <code>i32</code> - alias for …","Histogram for binning <code>i64</code> - alias for …","Histogram for binning <code>i8</code> - alias for <code>AtomicHistogramIntiu8&gt;</code>","Histogram for binning <code>isize</code> - alias for …","Histogram for binning <code>u128</code> - alias for …","Histogram for binning <code>u16</code> - alias for …","Histogram for binning <code>u32</code> - alias for …","Histogram for binning <code>u64</code> - alias for …","Histogram for binning <code>u8</code> - alias for <code>AtomicHistogramInt&lt;u8&gt;</code>","Histogram for binning <code>usize</code> - alias for …","Implements histogram","Generic Histogram struct","Generic Histogram for integer types","trait used for mapping values of arbitrary type <code>T</code> to bins…","Something went wrong wile casting!","Unable to perform operation on empty slice","Helper trait for efficient calculations in other …","Possible Errors of the traits <code>Histogram</code> and <code>HistogramVal</code>","Histogram for binning <code>f32</code> - alias for <code>HistogramFloat&lt;f32&gt;</code>","Histogram for binning <code>f64</code> - alias for <code>HistogramFloat&lt;f64&gt;</code>","Histogram for binning <code>i128</code> - alias for <code>HistogramInt&lt;i128&gt;</code>","Histogram for binning <code>i128</code> - alias for <code>HistogramFast&lt;i128&gt;</code>","Histogram for binning <code>i16</code> - alias for <code>HistogramInt&lt;i16&gt;</code>","Histogram for binning <code>i16</code> - alias for <code>HistogramFast&lt;i16&gt;</code>","Histogram for binning <code>i32</code> - alias for <code>HistogramInt&lt;i32&gt;</code>","Histogram for binning <code>i32</code> - alias for <code>HistogramFast&lt;i32&gt;</code>","Histogram for binning <code>i64</code> - alias for <code>HistogramInt&lt;i64&gt;</code>","Histogram for binning <code>i64</code> - alias for <code>HistogramFast&lt;i64&gt;</code>","Histogram for binning <code>i8</code> - alias for <code>HistogramIntiu8&gt;</code>","Histogram for binning <code>i8</code> - alias for <code>HistogramFastiu8&gt;</code>","Histogram for binning <code>isize</code> - alias for <code>HistogramInt&lt;isize&gt;</code>","Histogram for binning <code>isize</code> - alias for …","Histogram for binning <code>u128</code> - alias for <code>HistogramInt&lt;u128&gt;</code>","Histogram for binning <code>u128</code> - alias for <code>HistogramFast&lt;u128&gt;</code>","Histogram for binning <code>u16</code> - alias for <code>HistogramInt&lt;u16&gt;</code>","Histogram for binning <code>u16</code> - alias for <code>HistogramFast&lt;u16&gt;</code>","Histogram for binning <code>u32</code> - alias for <code>HistogramInt&lt;u32&gt;</code>","Histogram for binning <code>u32</code> - alias for <code>HistogramFast&lt;u32&gt;</code>","Histogram for binning <code>u64</code> - alias for <code>HistogramInt&lt;u64&gt;</code>","Histogram for binning <code>u64</code> - alias for <code>HistogramFast&lt;u64&gt;</code>","Histogram for binning <code>u8</code> - alias for <code>HistogramInt&lt;u8&gt;</code>","Histogram for binning <code>u8</code> - alias for <code>HistogramFast&lt;u8&gt;</code>","Histogram for binning <code>usize</code> - alias for <code>HistogramInt&lt;usize&gt;</code>","Histogram for binning <code>usize</code>- alias for <code>HistogramFast&lt;usize&gt;</code>","Implements histogram","Used to get a histogram, which contains the smaller …","Faster version of HistogramInt for Integers","Generic Histogram struct","Generic Histogram for integer types","Distance metric for how far a value is from a valid …","Your Interval is to large to sample in a resonable amound …","trait used for mapping values of arbitrary type <code>T</code> to bins…","Trait for comparing two intervals","Nothing can hit the bin! (left &gt;= right?)","Could be NAN, INFINITY or similar","Type returned by <code>self.to_le_bytes()</code>.  Depends on how many …","Cannot create requested interval with  bins, that all have …","A histogram without any bins does not make sense!","Invalid value","Overflow occured,","Underflow occured","which unsigned type corresponds to this type?","Error while casting to usize","Get bin difference between histograms","","check if any bin was not hit yet","check if any bin was not hit yet","check if any bin was not hit yet","check if any bin was not hit yet","How many bins the histogram contains","How many bins the histogram contains","How many bins the histogram contains","How many bins the histogram contains","","","","","","Iterate over all bins","Iterate over all bins","Iterator over all the bins","Iterate over all bins","Iterate over all bins","Iterator over all the bins","Iterator over all the bins","Iterator over all the bins","Iterator over all the bins","Iterator over all the bins","similar to <code>self.borders_clone</code> but does not allocate memory","similar to <code>self.borders_clone</code> but does not allocate memory","similar to <code>self.borders_clone</code> but does not allocate memory","similar to <code>self.borders_clone</code> but does not allocate memory","binning borders","binning borders","consider using <code>self.borders()</code>","","Creates a vector containing borders","","consider using <code>self.borders()</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>self.hist[index] += 1</code>, <code>Err()</code> if <code>index</code> out of bounds","<code>self.hist[index] += 1</code>, <code>Err()</code> if <code>index</code> out of bounds","<code>self.hist[index] += 1</code>, <code>Err()</code> if <code>index</code> out of bounds","<code>self.hist[index] += 1</code>, <code>Err()</code> if <code>index</code> out of bounds","<code>self.hist[index] += count</code>, <code>Err()</code> if <code>index</code> out of bounds","<code>self.hist[index] += count</code>, <code>Err()</code> if <code>index</code> out of bounds","","","","Uses SeqCst","Uses SeqCst","count val. <code>Ok(index)</code>, if inside of hist, <code>Err(_)</code> if val is …","count val. <code>Ok(index)</code>, if inside of hist, <code>Err(_)</code> if val is …","","","","","","","","","","","","","","","","","","","","","","","","calculates some sort of absolute distance to the nearest …","calculates some sort of absolute distance to the nearest …","","","","","","","","","","","","Create a histogram, which encapsulates the histograms …","","","checks if the range of two Histograms is equal, i.e., if …","get the left most border (inclusive)","get the left most border (inclusive)","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","from little endian. See implementation for integers in the …","convert val to the respective histogram index","convert val to the respective histogram index","","None if not inside Hist covered zone","","None if not inside Hist covered zone","","the created histogram","the created histogram","","","","","","Increment hit count of bin","Increment hit count","Increment hit count","Increment hit count","Increment hit count of bin","Increment hit count","Increment hit count","Increment hit count","Increment hit count","Increment hit count","","","","","","","Distance metric for how far a value is from a valid …","","","","","","Returns the length of the interval","Returns the length of the interval","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","does a value correspond to a valid bin?","does a value correspond to a valid bin?","","","","","","Get left border, inclusive","Will compare leftest bin first. if they are equal: will …","","","","Create a new Historgram","Create a new histogram","Create a new interval","Create a new histogram","Create a new Historgram","Create a new histogram","Create new histogram with inclusive borders","Create a new histogram","opposite of <code>is_inside</code>","opposite of <code>is_inside</code>","","","","","","partition the interval","","","","Returns the range covered by the bins as a …","reset the histogram to zero","reset the histogram to zero","","","","","","Get right border, inclusive","get second last border from the rightshould be the same as …","get second last border from the rightshould be the same as …","","","","","","","","","","","","to little endian. See implementation for integers in the …","","","","","Add other histogram to self","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m_beta cannot be infinitiy or minus infinity!","Energy function for current state of ensemble returns None","short for <code>Metropolis&lt;E, R, S, Res, f32&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, f64&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i128&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i16&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i32&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i64&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, i8&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, isize&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u128&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u16&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u32&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u64&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, u8&gt;</code>","short for <code>Metropolis&lt;E, R, S, Res, usize&gt;</code>","Create a metropolis simulation","Errors encountered during Metropolis Algorithm","Invalid nan encountered","","","","","","","","","","","","","","","Change, which markov chain is used for the metropolis …","","","","","","","returns stored value for the <code>counter</code>, i.e., where to …","","","","","","","","","returns stored value for <code>current_energy</code>","returns reference to ensemble","returns mutable reference to ensemble","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns stored <code>m_beta</code> value (-β for metropolis)","Metropolis Simulation","Metropolis Simulation","Metropolis Simulation","Metropolis simulation","Metropolis simulation","Metropolis Simulation","Metropolis Simulation","Metropolis simulation","Create a new Metropolis struct - used for Metropolis …","Create a new Metropolis struct - used for Metropolis …","resets the <code>counter</code> to 0","","","","set stored value for <code>current_energy</code>","sets m_beta (minus beta). Is related to the temperature: …","change the <code>stepsize</code>returns err if you try to set stepsize …","sets m_beta according to m_beta = -1 / temperature","return current <code>stepsize</code>","","","","","","","","","","","","","","","","","","","","","","","","Short for ReplicaExchangeEntropicSampling","Walker for Replica exchange entropic sampling","Struct used for entropic sampling with replica exchanges","rate/fraction of acceptance","Add extra information to your Replica Exchange entropic …","Add extra information to your Replica Exchange entropic …","Results of the simulation","Results of the simulation","","","","","","","","","","","","","","","Change step size for markov chain of walkers","Change step size for markov chain of walkers","Change sweep size for markov chain of walkers","Change sweep size for markov chain of walkers","Sanity check","Sanity check","","","","","","","","","Results of the simulation","Results of the simulation","","","","","Returns reference of current energy","Returns current energy","Iterator over ensembles","Iterator over ensembles","Mutable iterator over ensembles","Mutable iterator over ensembles","Read access to your extra information","Read access to your extra information","Write access to your extra information","Write access to your extra information","","","","Returns the argument unchanged.","Returns the argument unchanged.","","read access to your ensembles","read access to your ensembles","mut access to your ensembles","mut access to your ensembles","read access to internal histogram","read access to internal histogram","Get step size for markov chain of walkers","Get step size for markov chain of walkers","Get sweep size for markov chain of walkers","Get sweep size for markov chain of walkers","Reference to internal histogram","read access to the internal histograms used by the walkers","read access to the internal histograms used by the walkers","Returns id of walker","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks threshold","Checks threshold","is the simulation finished?","Old estimate of log10 of probability density","Current estimate of log10 of probability density","Old non normalized estimate of the natural logarithm of …","Current non normalized estimate of the natural logarithm …","Merge probability density of multiple rees simulations","Merge probability density of multiple rees simulations","Merge probability density of multiple rees simulations","Merge probability density of multiple rees simulations","Result of the simulations!","Result of the simulations!","Results of the simulation","Results of the simulation","Merge probability density of multiple rees simulations","Merge probability density of multiple rees simulations","Merge probability density of multiple rees simulations","Get the number of intervals present","Get the number of intervals present","How many walkers are there in total?","How many walkers are there in total?","How many replica exchanges were proposed until now?","Iterator over roundtrips done by REES","Iterator over roundtrips done by REES","Refine the estimate of the probability density functions","Refine the estimate of the probability density functions","Refine current probability density estimate","How many markov steps were rejected until now","fraction of how many replica exchanges were accepted and …","How many successful replica exchanges were performed until …","Iterate over the roundtrips done by the REWL","Iterate over the roundtrips done by the REWL","","","Perform the Replica exchange simulation","Perform the Replica exchange simulation","Perform the Replica exchange simulation","Perform the Replica exchange simulation","How many entropic steps were performed until now?","step size for markov steps","Change step sitze for markov steps","Return step threshold","Swap the extra vector","Swap the extra vector","Sweep","Sweep","how many steps per sweep","change how many steps per sweep are performed","","","","","","","","","","","","","","","","","","","","Remove extra vector","Remove extra vector","","","Returns internal walkers","Returns internal walkers","Returns number of walkers per interval","Returns number of walkers per interval","Histogram vector needs to contain at least one entry.","You tried to pass an empty slice","Enum used internally","Result of glueing","Result of glueing. See Glued","Each histogram needs to have <strong>at least</strong> two bins. Though …","histograms must have at least two bins - everything else …","There is no interval that is “more left” then this one","The length of the histogram vector has to be equal to the …","Length of histogram vector and ensemble vector has to be …","No negative threshold value allowed","log_f_threshold must not be negative","The threshold cannot be subnormal","The threshold for <code>log_f</code> needs to be a normal number.That …","None of the above","Efficient replica exchange Wang landau","Use this to create a replica exchange wang landau …","Short for <code>ReplicaExchangeWangLandau</code>,  which you can look …","Short for <code>ReplicaExchangeWangLandauBuilder</code>","Errors","Errors encountered during the creation of a Rewl struct (<strong>R</strong>…","Walker for Replica exchange Wang Landau","There is no interval that is “more right” then this one","Unable to seed random number generator ","","The threshold is not allowed to be zero","rate/fraction of acceptance","Results of the simulation","Results of the simulation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Change step size for markov chain of walkers","Change step size for markov chain of walkers","Change sweep size for markov chain of walkers","Change sweep size for markov chain of walkers","Sanity check","Sanity check","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Results of the simulation","TODO Documentation","Results of the simulation","Results of the simulation","","","","","","","","","","","","","","Returns reference of current energy","Returns current energy","Returns current energy","Iterator over ensembles","Iterator over ensembles","Mutable iterator over ensembles","Mutable iterator over ensembles","Read access to the ensembles","Read access to the ensembles","Fraction of finished intervals","Fraction of finished intervals","Is the interval in a valid starting configuration?","Is the interval in a valid starting configuration?","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a builder to create a replica exchange wang landau …","Create a builder to create a replica exchange wang landau …","Create a builder to create a replica exchange wang landau …","Create a builder to create a replica exchange wang landau …","new rewl builder","new rewl builder","read access to your ensembles","read access to your ensembles","mut access to your ensembles","mut access to your ensembles","read access to internal histogram","read access to internal histogram","Get Ids","Get Ids","Get step size for markov chain of walkers","Get step size for markov chain of walkers","Get sweep size for markov chain of walkers","Get sweep size for markov chain of walkers","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Reference to internal histogram","read access to the internal histograms used by the walkers","Read access to histograms","read access to the internal histograms used by the walkers","Read access to histograms","Returns id of walker","","","","","","","","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into Rees","Convert into Rees","Convert into Rees","Convert into Rees","Is the simulation finished?","Is the simulation finished?","returns largest value of factor log_f present in the …","returns largest value of factor log_f present in the …","Current estimate of log10 of probability density","Current non normalized estimate of the natural logarithm …","Current (logarithm of) factor f","Log_f factors of the walkers","Log_f factors of the walkers","Results of the simulation","Results of the simulation","Maximum of roundtrips","Maximum of roundtrips","Merge probability density of multiple rewl simulations","Results of the simulation","Results of the simulation","Merge probability density of multiple rewl simulations","Results of the simulation","Result of the simulation","Minimum of roundtrips","Minimum of roundtrips","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Get the number of intervals present","Get the number of intervals present","How many replica exchanges were proposed until now?","How many markov steps were rejected until now","fraction of how many replica exchanges were accepted and …","How many successful replica exchanges were performed until …","Roundtrips","Roundtrips","","","","","","","change the threshold of log_f","change the threshold of log_f","Perform the Replica exchange wang landau simulation","Perform the Replica exchange wang landau simulation","Perform the Replica exchange wang landau simulation","Perform the Replica exchange wang landau simulation","How many steps were performed until now?","step size for markov steps","Change step sitze for markov steps","Access step sizes of individual intervals","Access step sizes of individual intervals","Change step size of individual intervals","Change step size of individual intervals","Sweep","Sweep","how many steps per sweep","change how many steps per sweep are performed","Accesss sweep size of individual intervals","Accesss sweep size of individual intervals","Change sweep size of individual intervals","Change sweep size of individual intervals","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","","","","","","","","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","Create <code>Rewl</code>, i.e., Replica exchange wang landau simulation","","","","","","","","","","","","","","","Read access to internal rewl walkers","Read access to internal rewl walkers","Returns number of walkers per interval","Returns number of walkers per interval","Which mode is this walker currently in?","","Access internal random number generator","Create a markov chain by doing markov steps","For easy sampling of your ensemble","Markov step","Accumulating markov step","Markov steps","Accumulating markov steps","Accumulating markov steps","Markov steps without return","Randomizes self according to  model","Access RNG","do the following <code>times</code> times:","do the following <code>times</code> times:","Function called whenever the steps are accepted.","Function called whenever the steps are rejected.","If you need to exchange the internal rng","undo a markov step, return result-stateif you want to undo …","undo a markov, <strong>panic</strong> on invalid result statefor undoing …","Undo markov steps","Undo markov steps","check refine has to be at least 1","Dimensions do not match!","Still Gathering Statistics, this is only an estimate!","Step limit exceeded without finding valid starting point","bestof has to be at least 1 and at most the number of …","log_f has to fullfill 0.0 &lt; log_f &lt; 10.0","<code>log_f_threshold</code>can never be negative or zero! it also …","<code>trial_step_min &lt;= trial_step_max</code> has to be true","All values inside the initial guess have to be finite","Still in the process of gathering statistics Not enough to …","you have to call one of the","Use 1/T approachrefine each step by: …","Using original wang landau, i.e.,  refine every time when …","Possible errors when setting initial guess","Traits for quantities that all Wang Landau simulations have","The 1/t Wang Landau approach comes from this paper","Adaptive WangLandau 1/t","Helper trait, so that you have to type less","trait to request the current energy from a WangLandau …","trait to request a reference to the current (state of the) …","List of possible errors","trait to request the current histogram from a WangLandau …","Look at the paper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","returns the last accepted <code>Energy</code> calculated <code>None</code> if no …","","","return reference to current state of ensemble","","","mutable reference to current state","","","","Estimate accept/reject statistics","Is the simulation has finished the process of rebuilding …","","","","","","Fraction of steps accepted since the statistics were reset …","Calculate, which fraction of steps were accepted","Calculate, which fraction of steps were accepted","Tracks progress","Calculate, which fraction of steps were rejected","Calculate, which fraction of steps were rejected","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","returns current histogram","","","","","","","","Find a valid starting Point","Find a valid starting Point","Find a valid starting Point","Find a valid starting Point","Find a valid starting Point","Find a valid starting Point","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns internal ensemble, histogram and Rng","Checks wang landau threshold","Checks wang landau threshold","Check if <code>self</code> is initialized","Check if <code>self</code> is initialized","true if self is <code>Refine1T</code> variantfalse otherwise","true if self is <code>RefineOriginal</code> variantfalse otherwise","Is the simulation in the process of rebuilding the …","Current (non normalized) estimate of ln(P(E))","","","Current (non normalized) estimate of log_base(P(E))","Current (non normalized) estimate of log_base(P(E))","Current (non normalized) estimate of log10(P(E))","Current (non normalized) estimate of log10(P(E))","get current value of log_f","","","returns currently set threshold for log_f","","","Largest possible markov step (<code>m_steps</code> of MarkovChain …","Smallest possible markov step (<code>m_steps</code> of MarkovChain …","Returns current wang landau mode","","","New WangLandauAdaptive","Create a new WangLandau simulation","<code>samples_per_trial</code> - how often a specific step_size should …","","","","","Set the initial guess for the non-normalized probability …","Try to set the threshold. ","","","Counter","","","Counter","Counter","","","","","","How many steps were accepted until now?","","","How many steps were rejected until now?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wang Landau","Wang Landau","Wang Landau simulation","Wang Landau - efficient energy calculation","Wang Landau","Wang Landau","Wang Landau Step","Wang Landau Step","Accumulating wang landau step","Wang Landau Step","Wang Landau Step","Wang Landau Step","Wang Landau","Wang Landau","Wang Landau Simulation","Wang Landau","Wang Landau","Wang Landau","Writes Information about the simulation to a file. E.g. …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,2,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,80,2,2,6,6,81,2,2,6,6,81,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,4,2,6,2,82,82,6,2,82,82,4,2,6,6,2,6,83,2,2,6,6,4,2,6,4,2,6,82,82,2,82,2,6,82,82,82,82,2,6,2,6,2,2,2,6,2,6,4,2,6,2,2,6,2,82,2,6,82,2,2,6,6,82,82,2,6,4,2,6,2,2,82,2,6,82,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,6,4,2,2,6,6,6,4,2,6,4,2,6,4,2,6,82,2,6,84,0,0,0,0,20,20,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,20,21,22,20,21,22,22,20,21,22,20,21,22,22,22,22,22,22,22,20,21,22,22,22,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,20,21,22,22,22,22,22,22,20,21,22,24,24,27,27,27,0,0,0,27,27,0,23,0,23,26,26,27,24,23,26,27,24,23,26,27,24,23,26,27,24,23,26,27,24,23,26,27,24,23,26,27,24,23,26,24,23,26,24,23,26,27,24,23,26,27,24,23,26,27,24,23,0,0,24,23,26,27,24,23,23,26,27,24,26,27,27,24,23,0,0,23,26,26,27,24,23,26,27,24,23,26,26,23,0,24,23,23,26,24,23,26,26,26,26,27,24,23,26,27,24,23,26,27,24,23,26,27,24,23,26,27,24,23,26,27,24,23,26,27,24,23,26,27,24,23,26,27,24,23,26,27,24,23,26,23,23,85,0,0,0,39,0,35,40,40,36,0,0,0,0,0,0,0,0,0,0,0,36,40,0,39,39,39,35,35,30,32,34,34,31,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,34,35,36,37,32,31,30,38,39,40,41,34,35,36,37,32,31,30,38,39,40,41,38,38,34,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,41,42,43,34,37,32,31,38,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,34,35,36,37,32,31,30,38,39,40,41,31,30,38,38,38,38,46,42,43,34,35,36,37,32,31,30,38,39,39,39,40,41,41,36,36,32,34,41,38,34,41,41,38,37,34,41,42,43,34,41,42,43,34,41,31,42,43,34,41,0,41,34,34,34,34,41,41,34,41,32,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,32,30,34,42,34,34,38,32,42,43,42,43,42,43,42,43,34,36,37,31,30,38,41,31,41,41,37,37,31,34,41,32,32,32,34,35,36,37,32,31,30,38,39,40,41,37,38,37,32,37,37,37,37,31,31,34,35,36,37,32,31,30,38,39,40,41,34,41,34,41,34,41,34,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,42,43,34,35,36,37,32,31,30,38,39,40,41,34,34,34,42,43,34,35,36,37,32,31,30,38,39,40,41,34,41,41,34,41,37,31,30,34,41,37,37,37,37,37,37,37,37,86,87,87,87,88,89,90,91,92,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,25,94,25,25,25,25,25,94,25,95,29,96,96,97,97,96,96,97,97,53,54,29,55,56,53,54,29,55,56,53,54,29,55,56,53,54,55,56,98,99,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,25,53,54,29,25,53,54,29,55,56,96,96,97,97,96,97,53,54,29,55,56,98,99,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,98,99,53,54,29,55,56,25,53,54,29,55,56,95,29,25,29,98,99,53,54,29,55,56,25,53,54,29,55,56,25,53,53,54,54,29,55,55,56,56,94,98,99,53,54,29,55,56,96,97,53,54,29,55,56,53,54,29,55,56,53,54,29,55,56,25,53,54,29,55,56,100,53,54,29,55,56,53,56,25,53,54,29,55,56,98,99,53,54,29,55,56,29,101,54,29,55,53,54,29,55,56,54,29,55,98,99,53,54,29,55,56,102,54,29,55,29,96,97,53,54,29,55,56,29,98,99,53,54,29,55,56,25,53,54,29,55,56,94,25,53,54,29,29,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,25,53,54,29,55,56,62,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,61,62,61,62,61,62,61,62,61,62,61,62,61,61,62,61,62,61,62,61,61,62,61,62,61,62,61,62,61,61,61,61,62,62,61,62,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,0,0,0,63,64,65,64,65,65,63,65,63,65,63,65,63,65,63,65,63,65,63,64,65,64,65,64,65,63,63,65,63,65,63,65,63,64,65,65,63,65,63,63,63,64,65,64,65,64,65,64,65,65,63,64,65,63,63,64,65,64,65,64,65,64,65,64,65,63,64,65,63,65,63,65,63,64,65,63,63,63,63,63,0,0,0,0,64,65,64,65,0,0,0,64,65,64,65,63,64,65,64,65,63,63,63,63,64,65,65,63,64,65,64,65,63,63,63,63,64,65,64,65,63,63,63,65,63,65,63,65,63,65,63,65,63,65,63,65,63,65,63,65,63,64,65,65,63,64,65,64,65,77,72,0,0,0,77,72,73,72,77,74,77,74,77,73,0,0,0,0,0,0,0,73,77,0,74,67,66,71,72,67,71,73,74,75,77,72,67,71,73,74,75,77,72,67,71,73,74,75,77,72,67,71,73,74,75,77,72,67,71,73,74,75,77,72,67,71,73,74,75,77,72,67,71,73,74,75,77,66,71,66,71,66,71,72,67,73,74,75,72,67,73,74,75,72,67,71,73,74,75,77,72,67,71,73,74,75,77,72,67,71,73,74,75,77,0,0,66,71,72,67,71,73,74,75,72,67,71,73,74,75,77,67,67,67,66,71,66,71,76,75,76,75,76,75,72,67,71,73,74,75,77,72,67,71,73,74,75,77,76,75,76,75,76,75,66,71,66,71,66,71,66,71,66,71,66,71,76,75,76,75,67,66,76,71,75,67,72,67,71,73,74,75,77,76,75,76,75,72,67,71,73,74,75,77,66,71,66,71,66,71,66,71,67,67,67,66,71,0,0,66,71,0,0,0,0,0,0,66,71,76,75,66,71,67,67,67,67,66,71,72,67,71,73,74,75,66,71,66,71,66,71,67,67,67,76,75,76,75,66,71,67,67,76,75,76,75,72,67,73,74,75,72,67,71,73,74,75,77,72,67,71,73,74,75,77,72,67,71,73,74,75,77,72,67,71,73,74,75,77,72,67,71,73,74,75,77,72,67,71,73,74,75,77,72,67,71,73,74,75,77,76,75,76,75,76,75,76,75,72,67,71,73,74,75,77,76,75,76,75,72,67,71,73,74,75,77,72,67,71,73,74,75,77,66,71,66,71,67,103,0,0,0,104,104,104,104,104,104,105,106,105,105,104,104,106,104,104,104,104,9,79,9,9,9,79,9,9,79,9,9,78,78,0,0,0,0,0,0,0,0,0,0,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,14,9,78,13,79,107,14,13,108,14,13,108,14,13,78,14,14,14,9,78,13,79,14,109,109,14,109,109,14,9,78,13,79,110,14,13,14,9,78,13,79,14,13,14,13,14,13,14,9,78,13,79,13,109,109,14,13,78,78,14,109,14,13,109,109,109,109,109,14,13,109,14,13,14,14,109,14,13,14,13,14,14,9,78,13,13,109,14,13,109,14,13,109,109,14,9,78,13,79,109,14,13,109,14,13,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,9,78,13,79,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,109,14,13,111],"f":[0,0,0,0,0,0,0,0,0,0,0,[1],[1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[2,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[[[2,[5,5,5,5,5,5]]],[[2,[5,5,5,5,5,5]]]],[[[6,[5,5,5,5,5,5]]],[[6,[5,5,5,5,5,5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[[],[[7,[4]]]],[[],[[7,[2]]]],[[],[[7,[6]]]],[1],[1],[1],[[]],[2],[2],[6],[6],[[]],[2],[2],[6],[6],[[]],[2],[6],[2],[6],[2],[6],[2],[6],[2],[6],[2],[6],[2],[6],[2],[6],[2],[6],[2],[6],[2,[[7,[[3,[8]],9]]]],[[4,10],11],[[[2,[12,12,12,12,12,12]],10],11],[[[6,[12,12,12,12,12,12]],10],11],[2,8],[[],8],[[],8],[6,8],[2,8],[[],8],[[],8],[[]],[[]],[[]],[13,[[7,[6,4]]]],[14,[[7,[2,4]]]],[14,[[7,[6,4]]]],[[]],[2],[2],[6],[6],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[],15],[[],15],[2,15],[[],[[3,[8]]]],[2,[[3,[8]]]],[6,[[3,[8]]]],[8,[[3,[8]]]],[8,[[3,[8]]]],[[],[[3,[8]]]],[[],[[3,[8]]]],[2,3],[6,3],[2,[[3,[8]]]],[6,[[3,[8]]]],[2,1],[2,1],[2,[[3,[8]]]],[6,[[3,[8]]]],[2],[6],[4,7],[2,7],[6,7],[[2,1]],[[2,1]],[[6,1]],[2,1],[[],1],[2,1],[6,1],[[],1],[2,1],[2,1],[6,1],[6,1],[[],1],[[],1],[2],[6],[[]],[[]],[[]],[2,1],[2,1],[[],1],[2,1],[6,1],[[],1],[2,1],[6,1],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],7],[14,[[7,[2]]]],[[],7],[14,[[7,[6]]]],[13,[[7,[6]]]],[[],7],[[],7],[[],7],[[],7],[[],17],[[],17],[[],17],[[]],[[]],[[]],[18,[[7,[19]]]],[[2,18],[[7,[19]]]],[[6,18],[[7,[19]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,20],[21,21],[[[22,[5]]],[[22,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[[],[[7,[20]]]],[[],[[7,[21]]]],[[],[[7,[22]]]],[1],[1],[1],[[20,20],15],[[20,10],11],[[21,10],11],[[[22,[12]],10],11],[[]],[[]],[[]],[22,1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[22,21],[[22,1,3]],[[22,1,3]],[22,1],[1,22],[22],[20,7],[21,7],[22,7],[22],[22],[22],[[]],[[]],[[]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[20],[[],17],[[],17],[[],17],[[22,21]],[[22,21]],[[22,3]],[22],[[22,21,1]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[23],[[[3,[[3,[8]]]],3,24],[[7,[23,25]]]],[23,24],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[5]]],[[26,[5]]]],[24,24],[[[23,[5]]],[[23,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[1],[1],0,[[[3,[[3,[8]]]],3,24],[[7,[23,25]]]],[[],[[7,[24]]]],[[],[[7,[23]]]],[1],[1],[1],[1],[23],[[[26,[12]],10],11],[[27,10],11],[[24,10],11],[[]],[25,27],[[]],[[]],[[]],[[],[[7,[26,27]]]],[[],[[7,[26,27]]]],[23],0,[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],0,0,[[[3,[8]],[3,[[3,[8]]]],24,[3,[1]]],23],[[]],[24,7],[23,7],[23],[[]],[[]],[[]],0,0,0,[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[26,18],28],[[[23,[29]],18],28],[[[23,[29]],18,8,8],28],0,[[],[[3,[8]]]],[[],[[3,[8]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[30,31]],[[32,33],31],[34,1],[34,1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[34,[5,5]]],[[34,[5,5]]]],[35,35],[36,36],[37,37],[32,32],[31,31],[30,30],[38,38],[39,39],[40,40],[[[41,[5,5]]],[[41,[5,5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[38,31],38],0,[[34,34],[[7,[35]]]],[[41,41],[[7,[35]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,[[7,[35]]]],[[43,8],[[7,[35]]]],[34,[[7,[35]]]],[[41,8],[[7,[35]]]],[42,[[7,[35]]]],[[43,8],[[7,[35]]]],[34,[[7,[1,35]]]],[[],37],[[],32],[[],31],[[],38],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[7,[34]]]],[[],[[7,[35]]]],[[],[[7,[36]]]],[[],[[7,[37]]]],[[],[[7,[32]]]],[[],[[7,[31]]]],[[],[[7,[30]]]],[[],[[7,[38]]]],[[],[[7,[39]]]],[[],[[7,[40]]]],[[],[[7,[41]]]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[[34,[12,12]],10],11],[[35,10],11],[[36,10],11],[[37,10],11],[[32,10],11],[[31,10],11],[[30,10],11],[[38,10],11],[[39,10],11],[[40,10],11],[[[41,[12,12]],10],11],[[31,44],[[7,[45]]]],[[30,44],[[7,[45]]]],[[38,15],38],0,[[38,31],38],0,[42,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,39],[[]],[32,39],[[]],[46,41],[[]],[[[3,[47]]],36],[[],36],[[32,33],32],[[34,1,1],[[48,[1]]]],[[41,1,1],[[48,[8]]]],[38,49],[[34,1],48],[[41,1],48],[[41,1]],[38,33],[37,49],[[34,1,1],1],[[41,1,1],8],[42,28],[43,28],[34,28],[41,28],[42,28],[43,28],[34,28],[41,28],0,[42,46],[43,41],[34,3],[41,3],[[1,1,1],1],[41],[34,41],[34,41],[34,41],[34,1],[41,1],[41],[34],[41],[[32,33],32],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,39],[30,39],[34,41],[42,43],[34,41],[34,41],[[38,[50,[47]]],38],[[32,33,33],32],[42,[[3,[8]]]],[43,[[3,[8]]]],[42,51],[43,51],[42],[43],[[],42],[[],43],[[],34],[[8,8,1],36],[[],37],[[52,52,52],31],[[[3,[31]]],[[48,[30]]]],[[],38],[[],41],[[],31],[41],[41],[[37,39],37],0,0,[34],[41],[[32,15],32],[[32,33]],[[32,33],32],[34,7],[35,7],[36,7],[37,7],[32,7],[31,7],[30,7],[38,7],[39,7],[40,7],[41,7],[[37,[50,[47]]],37],[[38,33],38],0,[[32,33],32],[[37,40],37],0,[[37,[50,[47]]],37],0,[31],[31,47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,1],[41,1],[34,1],[41,1],[34,34],[41,41],[34,34],[41,41],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[34,[[3,[8]]]],[34,[[3,[8]]]],[34,[[3,[8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,1],[41,1],[41],[34],[41],[[37,1,1],28],[[31,18],[[7,[19]]]],[[30,18],[[7,[19]]]],[34,28],[41,28],[[37,36],37],0,[[37,[50,[47]]],37],0,[[37,36],37],0,[[37,[50,[47]]],37],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[7,[1,25]]]],[29,[[7,[1,25]]]],[[],15],[[],15],[[],15],[[],15],[[],1],[[],1],[[],1],[[],1],[53,1],[54,1],[29,1],[55,1],[56,1],[53,51],[54,51],[29,51],[55,51],[56,51],[53,51],[54,51],[29,51],[55,51],[56,51],[53,3],[54,3],[55],[56],[[],[[7,[3,25]]]],[[],[[7,[3,25]]]],[53,[[7,[3,25]]]],[54,[[7,[3,25]]]],[29,[[7,[3,25]]]],[55,[[7,[3,25]]]],[56,[[7,[3,25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,25],[[[53,[5]]],[[53,[5]]]],[[[54,[5]]],[[54,[5]]]],[[[29,[5]]],[[29,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[7,[25]]]],[1,[[7,[25]]]],[1,[[7,[25]]]],[1,[[7,[25]]]],[[1,1],[[7,[25]]]],[[1,1],[[7,[25]]]],[[53,1,1],[[7,[25]]]],[[54,1,1],[[7,[25]]]],[[29,1,1],[[7,[25]]]],[[55,1,1],[[7,[25]]]],[[56,1,1],[[7,[25]]]],[57,[[7,[1,25]]]],[57,[[7,[1,25]]]],[[53,57],[[7,[1,25]]]],[[54,57],[[7,[1,25]]]],[[29,57],[[7,[1,25]]]],[[55,57],[[7,[1,25]]]],[[56,57],[[7,[1,25]]]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[7,[25]]]],[[],[[7,[53]]]],[[],[[7,[54]]]],[[],[[7,[29]]]],[[],[[7,[55]]]],[[],[[7,[56]]]],[57,8],[57,8],[[53,57],8],[[54,57],8],[[29,57],8],[[55,57],8],[[56,57],8],[1],[1],[1],[1],[1],[1],[[],[[7,[25]]]],[[],[[7,[29,25]]]],[[25,25],15],[[29,29],15],[[]],[[]],[53],[54],[29],[55],[56],[[25,10],11],[[[53,[12]],10],11],[[[54,[12]],10],11],[[[29,[12]],10],11],[[[55,[12]],10],11],[[[56,[12]],10],11],[[]],[56,53],[[]],[55,54],[[]],[[]],[[]],[54,55],[[]],[53,56],[[]],[57,[[7,[1,25]]]],[57,[[7,[1,25]]]],[[53,57],[[7,[1,25]]]],[[54,57],[[7,[1,25]]]],[[29,57],[[7,[1,25]]]],[[55,57],[[7,[1,25]]]],[[56,57],[[7,[1,25]]]],[[],3],[[]],[53,3],[54,3],[29,3],[55],[56],[[53,57],[[7,[1,25]]]],[[54,57],[[7,[1,25]]]],[[29,57],[[7,[1,25]]]],[[55,57],[[7,[1,25]]]],[[56,57],[[7,[1,25]]]],[[53,57]],[[54,57]],[[29,57]],[[55,57]],[[56,57]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[57,58],1],[[53,57,58],1],[[54,57,58],1],[[29,57,58],1],[[55,57,58],1],[[56,57,58],1],[53],[56],[[]],[[]],[[]],[[]],[[]],[[]],[57,15],[57,15],[[53,57],15],[[54,57],15],[[29,57],15],[[55,57],15],[[56,57],15],[29],[[],59],[[54,54],59],[[29,29],59],[[55,55],59],[1,[[7,[53,25]]]],[1,[[7,[54,25]]]],[[],[[7,[29,25]]]],[1,[[7,[55,25]]]],[1,[[7,[56,25]]]],[1,[[7,[54,25]]]],[[],[[7,[29,25]]]],[1,[[7,[55,25]]]],[57,15],[57,15],[[53,57],15],[[54,57],15],[[29,57],15],[[55,57],15],[[56,57],15],[[1,1],[[7,[3,25]]]],[[54,1,1],[[7,[[3,[54]],25]]]],[[29,1,1],[[7,[[3,[29]],25]]]],[[55,1,1],[[7,[[3,[55]],25]]]],[29,60],[[]],[[]],[53],[54],[29],[55],[56],[29],[[]],[[]],[53],[54],[29],[55],[56],[25,7],[53,7],[54,7],[29,7],[55,7],[56,7],[[]],[[]],[[]],[[]],[[]],[[29,29],7],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[61,61],[62,62],[[[61,[5,5,5,5,5]]],[[61,[5,5,5,5,5]]]],[[]],[[]],[[]],[[]],[61,1],[1],[1],[1],[1],[[],[[7,[62]]]],[[],[[7,[61]]]],[1],[1],[61],[61],[61],[[62,10],11],[[]],[[]],[[],1],[[],1],[[]],[[]],[61,8],[[61,1]],[[61,1]],[[61,1]],[61],[61],[[61,1]],[61],[61],[[8,1],[[7,[61,62]]]],[[8,1],[[7,[61,62]]]],[61],[61],[62,7],[61,7],[61,7],[[61,8]],[[61,1],7],[[61,8]],[61,1],[61],[[]],[[]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],7],[[],7],[[],7],[[],7],[[],17],[[],17],[[]],[[]],0,0,0,[63,8],[[64,3],[[7,[64]]]],[[65,3],[[7,[64]]]],[64,[[7,[23,25]]]],[65,[[7,[23,25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[64,1,1],7],[[65,1,1],7],[[64,1,58],7],[[65,1,58],7],[64,15],[65,15],[[[63,[5,5,5,5,5]]],[[63,[5,5,5,5,5]]]],[[]],[[]],[[]],[1],[1],[1],[1],[64,[[7,[23,25]]]],[65,[[7,[23,25]]]],[[],[[7,[65]]]],[[],[[7,[63]]]],[1],[1],[63],[63],[64,51],[65,51],[64,51],[65,51],[64],[65],[64],[65],[[[65,[12,12,12,12,12,12,12]],10],11],[[[63,[12,12,12,12,12]],10],11],[66,64],[[]],[[]],[67,63],[[64,1],[[48,[68]]]],[[65,1],[[48,[68]]]],[[64,1],48],[[65,1],48],[[64,1],48],[[65,1],48],[[64,1],[[48,[1]]]],[[65,1],[[48,[1]]]],[[64,1],[[48,[58]]]],[[65,1],[[48,[58]]]],[63],[64,3],[65,3],[63,1],[[],1],[[],1],[[]],[[]],[64,15],[65,15],[63,15],[63,[[3,[8]]]],[63,[[3,[8]]]],[63],[63,[[3,[8]]]],[[],[[7,[25]]]],[[],69],[[],69],[[],[[7,[25]]]],[64,[[7,[25]]]],[65,[[7,[25]]]],[64,69],[65,69],[[],[[7,[25]]]],[[],69],[[],69],[64,1],[65,1],[64,1],[65,1],[63,70],[64,51],[65,51],[64],[65],[63],[63,70],[63,8],[63,70],[64,51],[65,51],[65,7],[63,7],[64],[65],[64],[65],[63,70],[63,1],[[63,1]],[63,70],[[64,3],7],[[65,3],7],[64],[65],[63,58],[[63,58]],[[]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],7],[[],7],[[],7],[[],7],[[],17],[[],17],[64],[65],[[]],[[]],[64],[65],[64,58],[65,58],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[67,8],[66,[[7,[23,25]]]],[71,[[7,[23,25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[66,1,1],7],[[71,1,1],7],[[66,1,58],7],[[71,1,58],7],[66,15],[71,15],[72,72],[[[67,[5,5,5,5,5]]],[[67,[5,5,5,5,5]]]],[73,73],[74,74],[[[75,[5,5,5,5]]],[[75,[5,5,5,5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[7,[23,25]]]],[[],[[7,[23,25]]]],[66,[[7,[23,25]]]],[71,[[7,[23,25]]]],[[],[[7,[72]]]],[[],[[7,[67]]]],[[],[[7,[71]]]],[[],[[7,[73]]]],[[],[[7,[74]]]],[[],[[7,[75]]]],[1],[1],[1],[1],[1],[1],[1],[67],[67],[67],[66,51],[71,51],[66,51],[71,51],[76],[75],[76,8],[75,8],[76],[75],[[72,10],11],[[[67,[12,12,12,12,12]],10],11],[[[71,[12,12,12,12,12,12]],10],11],[[73,10],11],[[74,10],11],[[[75,[12,12,12,12]],10],11],[[77,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,1,58,58,8],[[7,[76,77]]]],[[3,1,58,58,8],[[7,[75,77]]]],[[3,1,58,58,8],[[7,[76,77]]]],[[3,1,58,58,8],[[7,[75,77]]]],[[3,3,1,58,58,8],[[7,[76,77]]]],[[3,3,1,58,58,8],[[7,[75,77]]]],[[66,1],[[48,[68]]]],[[71,1],[[48,[68]]]],[[66,1],48],[[71,1],48],[[66,1],48],[[71,1],48],[66,[[3,[1]]]],[71,[[3,[1]]]],[[66,1],[[48,[1]]]],[[71,1],[[48,[1]]]],[[66,1],[[48,[58]]]],[[71,1],[[48,[58]]]],[76,66],[75,66],[76,66],[75,66],[67],[66,3],[76],[71,3],[75],[67,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[76,58],66],[[75,58],66],[[76,58],66],[[75,58],66],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,64],[71,64],[[66,3],[[7,[64]]]],[[71,3],[[7,[64]]]],[66,15],[71,15],[66,8],[71,8],[67,[[3,[8]]]],[67],[67,8],[66,[[3,[8]]]],[71,[[3,[8]]]],[[],69],[[],69],[66,1],[71,1],[[],[[7,[25]]]],[[],69],[[],69],[[],[[7,[25]]]],[[],69],[[],69],[66,1],[71,1],[[76,58,58,58],66],[[75,58,58,58],66],[66,58],[71,58],[67,70],[67,70],[67,8],[67,1],[66,51],[71,51],[72,7],[67,7],[71,7],[73,7],[74,7],[75,7],[[66,8],[[7,[8,74]]]],[[71,8],[[7,[8,74]]]],[66],[71],[66],[71],[67,70],[67,1],[[67,1]],[76],[75],[76],[75],[66],[71],[67,58],[[67,58]],[76],[75],[76],[75],[[]],[[]],[[]],[[]],[[]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[76,[[7,[66,76]]]],[75,[[7,[66,75]]]],[76,[[7,[66,76]]]],[75,[[7,[66,75]]]],[[76,58],[[7,[66,76]]]],[[75,58],[[7,[66,75]]]],[[76,58],[[7,[66,76]]]],[[75,58],[[7,[66,75]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[76,58,58,58],[[7,[66,76]]]],[[75,58,58,58],[[7,[66,75]]]],[[76,58,58,58],[[7,[66,76]]]],[[75,58,58,58],[[7,[66,75]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,3],[71,3],[66,58],[71,58],[67,78],0,0,0,0,[[]],[[]],[[1,3]],[[1,3]],[1],[1],[[]],[[]],[1],[1,3],[[]],[[]],[[]],[[]],[[]],[3],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[5,5,5,5,5,5]]],[[14,[5,5,5,5,5,5]]]],[9,9],[78,78],[[[13,[5,5,5,5,5,5]]],[[13,[5,5,5,5,5,5]]]],[79,79],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[7,[14]]]],[[],[[7,[9]]]],[[],[[7,[78]]]],[[],[[7,[13]]]],[1],[1],[1],[1],[1],[[],48],[14,48],[13,48],[[]],[14],[13],[[]],[14],[13],[[78,78],15],[14,[[7,[[3,[8]],9]]]],[14,15],[[[14,[12,12,12,12,12,12]],10],11],[[9,10],11],[[78,10],11],[[[13,[12,12,12,12,12,12]],10],11],[[79,10],11],[14,8],[[],8],[[],8],[14,8],[[],8],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[14],[13],[[],1],[[],1],[[],1],[[],1],[[],1],[[14,[48,[70]]],[[7,[9]]]],[[13,[48,[70]]],[[7,[9]]]],[[14,58,[48,[70]]],[[7,[9]]]],[[13,58,[48,[70]]],[[7,[9]]]],[[14,58,[48,[70]]],[[7,[9]]]],[[13,58,[48,[70]]],[[7,[9]]]],[[]],[[]],[[]],[[]],[[]],[13],[[],15],[[],15],[14,15],[13,15],[78,15],[78,15],[14,15],[[],3],[14,3],[13,3],[8,[[3,[8]]]],[8,[[3,[8]]]],[[],[[3,[8]]]],[[],[[3,[8]]]],[[],8],[14,8],[13,8],[[],8],[14,8],[13,8],[14,1],[14,1],[[],78],[14,78],[13,78],[[8,1,1,1,1,8,1],[[7,[14,9]]]],[[8,1,1],[[7,[13,9]]]],[14,1],[14,7],[9,7],[78,7],[13,7],[[13,[3,[8]],8],[[7,[13,79]]]],[8,[[7,[8,9]]]],[[14,8],[[7,[8,9]]]],[[13,8],[[7,[8,9]]]],[[],1],[14,1],[13,1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[],1],[14,1],[13,1],[[],1],[14,1],[13,1],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],[[7,[16]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],17],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[14],[13],[14],[13],[14],[13],[14],[13],[14],[13],[14],[13],[14],[13],[14],[13],[14],[13],[18,[[7,[19]]]],[[14,18],[[7,[19]]]],[[13,18],[[7,[19]]]],0],"p":[[15,"usize"],[3,"EntropicSamplingAdaptive"],[3,"Vec"],[4,"EntropicErrors"],[8,"Clone"],[3,"EntropicSampling"],[4,"Result"],[15,"f64"],[4,"WangLandauErrors"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"WangLandau1T"],[3,"WangLandauAdaptive"],[15,"bool"],[4,"Error"],[3,"TypeId"],[8,"Write"],[3,"Error"],[4,"CoinFlip"],[3,"CoinFlipMove"],[3,"CoinFlipSequence"],[3,"ReplicaGlued"],[4,"LogBase"],[4,"HistErrors"],[3,"GlueResult"],[4,"GlueErrors"],[6,"Result"],[3,"HistogramFast"],[3,"PaletteRGB"],[3,"ColorRGB"],[3,"CubeHelixParameter"],[15,"f32"],[3,"HeatmapUsize"],[4,"HeatmapError"],[4,"GnuplotAxis"],[3,"GnuplotSettings"],[3,"GnuplotPointSettings"],[4,"GnuplotPalette"],[4,"GnuplotTerminal"],[3,"HeatmapF64"],[3,"HeatmapUsizeMean"],[3,"HeatmapF64Mean"],[8,"Write"],[3,"Error"],[6,"HeatmapU"],[3,"String"],[4,"Option"],[15,"str"],[8,"Into"],[8,"Iterator"],[15,"u8"],[3,"HistogramFloat"],[3,"HistogramInt"],[3,"AtomicHistogramInt"],[3,"AtomicHistogramFloat"],[8,"Borrow"],[3,"NonZeroUsize"],[4,"Ordering"],[3,"RangeInclusive"],[3,"Metropolis"],[4,"MetropolisError"],[3,"ReesWalker"],[6,"Rees"],[3,"ReplicaExchangeEntropicSampling"],[6,"Rewl"],[3,"RewlWalker"],[3,"RwLockReadGuard"],[6,"GluedResult"],[15,"u64"],[3,"ReplicaExchangeWangLandau"],[4,"RewlCreationErrors"],[4,"ExtremeInterval"],[4,"ThresholdErrors"],[3,"ReplicaExchangeWangLandauBuilder"],[6,"RewlBuilder"],[4,"RewlBuilderErr"],[4,"WangLandauMode"],[4,"SetInitialError"],[8,"EntropicEnergy"],[8,"EntropicEnsemble"],[8,"Entropic"],[8,"EntropicHist"],[13,"EstimatedStatistic"],[13,"BorderCreation"],[13,"Labels"],[13,"FromValues"],[13,"CubeHelix"],[13,"RGB"],[13,"EpsLatex"],[13,"PDF"],[13,"XError"],[13,"YError"],[8,"HasUnsignedVersion"],[8,"HistogramCombine"],[8,"Histogram"],[8,"AtomicHistogram"],[8,"HistogramVal"],[8,"AtomicHistogramVal"],[8,"HistogramIntervalDistance"],[8,"IntervalOrder"],[8,"HistogramPartition"],[13,"SeedError"],[8,"MarkovChain"],[8,"SimpleSample"],[8,"HasRng"],[8,"WangLandauEnergy"],[8,"WangLandauEnsemble"],[8,"WangLandau"],[8,"WangLandauHist"],[13,"EstimatedStatistic"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
